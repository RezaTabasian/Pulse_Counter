
Pulse_Counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003094  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003154  08003154  00013154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031f0  080031f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080031f0  080031f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031f0  080031f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031f0  080031f0  000131f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031f4  080031f4  000131f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  2000000c  08003204  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08003204  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbd9  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b47  00000000  00000000  0002cc0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0002e758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  0002f300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff6d  00000000  00000000  0002fe00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db3f  00000000  00000000  0003fd6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00062ea1  00000000  00000000  0004d8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b074d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a90  00000000  00000000  000b07a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800313c 	.word	0x0800313c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800313c 	.word	0x0800313c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b590      	push	{r4, r7, lr}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t Counter=0;
 8000236:	230e      	movs	r3, #14
 8000238:	18fb      	adds	r3, r7, r3
 800023a:	2200      	movs	r2, #0
 800023c:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023e:	f000 fc1b 	bl	8000a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000242:	f000 f8af 	bl	80003a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000246:	f000 fa21 	bl	800068c <MX_GPIO_Init>
  MX_DMA_Init();
 800024a:	f000 f9f9 	bl	8000640 <MX_DMA_Init>
  MX_TIM3_Init();
 800024e:	f000 f969 	bl	8000524 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000252:	f000 f9c5 	bl	80005e0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000256:	f000 f905 	bl	8000464 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 800025a:	4b4a      	ldr	r3, [pc, #296]	; (8000384 <main+0x154>)
 800025c:	0018      	movs	r0, r3
 800025e:	f001 fe13 	bl	8001e88 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1);
 8000262:	4b49      	ldr	r3, [pc, #292]	; (8000388 <main+0x158>)
 8000264:	0018      	movs	r0, r3
 8000266:	f001 fe0f 	bl	8001e88 <HAL_TIM_Base_Start>
  HAL_UART_Receive_DMA(&huart1, string_recive, 6);
 800026a:	0039      	movs	r1, r7
 800026c:	4b47      	ldr	r3, [pc, #284]	; (800038c <main+0x15c>)
 800026e:	2206      	movs	r2, #6
 8000270:	0018      	movs	r0, r3
 8000272:	f002 f951 	bl	8002518 <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Counter = __HAL_TIM_GET_COUNTER(&htim3);
 8000276:	4b43      	ldr	r3, [pc, #268]	; (8000384 <main+0x154>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800027c:	210e      	movs	r1, #14
 800027e:	187b      	adds	r3, r7, r1
 8000280:	801a      	strh	r2, [r3, #0]
	  itoa(Counter,string,10);
 8000282:	187b      	adds	r3, r7, r1
 8000284:	881b      	ldrh	r3, [r3, #0]
 8000286:	2208      	movs	r2, #8
 8000288:	18b9      	adds	r1, r7, r2
 800028a:	220a      	movs	r2, #10
 800028c:	0018      	movs	r0, r3
 800028e:	f002 ff09 	bl	80030a4 <itoa>
	  HAL_UART_Transmit(&huart1, "Chanel 1 count :" , 16, HAL_MAX_DELAY);
 8000292:	2301      	movs	r3, #1
 8000294:	425b      	negs	r3, r3
 8000296:	493e      	ldr	r1, [pc, #248]	; (8000390 <main+0x160>)
 8000298:	483c      	ldr	r0, [pc, #240]	; (800038c <main+0x15c>)
 800029a:	2210      	movs	r2, #16
 800029c:	f002 f89c 	bl	80023d8 <HAL_UART_Transmit>
	  if(HAL_GPIO_ReadPin(CH1_Direction_GPIO_Port, CH1_Direction_Pin))
 80002a0:	2390      	movs	r3, #144	; 0x90
 80002a2:	05db      	lsls	r3, r3, #23
 80002a4:	2120      	movs	r1, #32
 80002a6:	0018      	movs	r0, r3
 80002a8:	f001 f854 	bl	8001354 <HAL_GPIO_ReadPin>
 80002ac:	1e03      	subs	r3, r0, #0
 80002ae:	d007      	beq.n	80002c0 <main+0x90>
	  {
		  HAL_UART_Transmit(&huart1, "--->  ", strlen("--->  "), HAL_MAX_DELAY);
 80002b0:	2301      	movs	r3, #1
 80002b2:	425b      	negs	r3, r3
 80002b4:	4937      	ldr	r1, [pc, #220]	; (8000394 <main+0x164>)
 80002b6:	4835      	ldr	r0, [pc, #212]	; (800038c <main+0x15c>)
 80002b8:	2206      	movs	r2, #6
 80002ba:	f002 f88d 	bl	80023d8 <HAL_UART_Transmit>
 80002be:	e006      	b.n	80002ce <main+0x9e>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart1, "<---  ", strlen("--->  "), HAL_MAX_DELAY);
 80002c0:	2301      	movs	r3, #1
 80002c2:	425b      	negs	r3, r3
 80002c4:	4934      	ldr	r1, [pc, #208]	; (8000398 <main+0x168>)
 80002c6:	4831      	ldr	r0, [pc, #196]	; (800038c <main+0x15c>)
 80002c8:	2206      	movs	r2, #6
 80002ca:	f002 f885 	bl	80023d8 <HAL_UART_Transmit>
	  }
	  HAL_UART_Transmit(&huart1, string , strlen(string), HAL_MAX_DELAY);
 80002ce:	2408      	movs	r4, #8
 80002d0:	193b      	adds	r3, r7, r4
 80002d2:	0018      	movs	r0, r3
 80002d4:	f7ff ff18 	bl	8000108 <strlen>
 80002d8:	0003      	movs	r3, r0
 80002da:	b29a      	uxth	r2, r3
 80002dc:	2301      	movs	r3, #1
 80002de:	425b      	negs	r3, r3
 80002e0:	1939      	adds	r1, r7, r4
 80002e2:	482a      	ldr	r0, [pc, #168]	; (800038c <main+0x15c>)
 80002e4:	f002 f878 	bl	80023d8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, "\n\r" , strlen("\n\r"), HAL_MAX_DELAY);
 80002e8:	2301      	movs	r3, #1
 80002ea:	425b      	negs	r3, r3
 80002ec:	492b      	ldr	r1, [pc, #172]	; (800039c <main+0x16c>)
 80002ee:	4827      	ldr	r0, [pc, #156]	; (800038c <main+0x15c>)
 80002f0:	2202      	movs	r2, #2
 80002f2:	f002 f871 	bl	80023d8 <HAL_UART_Transmit>

	  Counter = __HAL_TIM_GET_COUNTER(&htim1);
 80002f6:	4b24      	ldr	r3, [pc, #144]	; (8000388 <main+0x158>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002fc:	210e      	movs	r1, #14
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	801a      	strh	r2, [r3, #0]
	  itoa(Counter,string,10);
 8000302:	187b      	adds	r3, r7, r1
 8000304:	881b      	ldrh	r3, [r3, #0]
 8000306:	1939      	adds	r1, r7, r4
 8000308:	220a      	movs	r2, #10
 800030a:	0018      	movs	r0, r3
 800030c:	f002 feca 	bl	80030a4 <itoa>
	  HAL_UART_Transmit(&huart1, "Chanel 2 count :" , 16, HAL_MAX_DELAY);
 8000310:	2301      	movs	r3, #1
 8000312:	425b      	negs	r3, r3
 8000314:	4922      	ldr	r1, [pc, #136]	; (80003a0 <main+0x170>)
 8000316:	481d      	ldr	r0, [pc, #116]	; (800038c <main+0x15c>)
 8000318:	2210      	movs	r2, #16
 800031a:	f002 f85d 	bl	80023d8 <HAL_UART_Transmit>
	  if(HAL_GPIO_ReadPin(CH2_Direction_GPIO_Port, CH2_Direction_Pin))
 800031e:	2380      	movs	r3, #128	; 0x80
 8000320:	00da      	lsls	r2, r3, #3
 8000322:	2390      	movs	r3, #144	; 0x90
 8000324:	05db      	lsls	r3, r3, #23
 8000326:	0011      	movs	r1, r2
 8000328:	0018      	movs	r0, r3
 800032a:	f001 f813 	bl	8001354 <HAL_GPIO_ReadPin>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d007      	beq.n	8000342 <main+0x112>
	  {
		  HAL_UART_Transmit(&huart1, "--->  " , strlen("--->  "), HAL_MAX_DELAY);
 8000332:	2301      	movs	r3, #1
 8000334:	425b      	negs	r3, r3
 8000336:	4917      	ldr	r1, [pc, #92]	; (8000394 <main+0x164>)
 8000338:	4814      	ldr	r0, [pc, #80]	; (800038c <main+0x15c>)
 800033a:	2206      	movs	r2, #6
 800033c:	f002 f84c 	bl	80023d8 <HAL_UART_Transmit>
 8000340:	e006      	b.n	8000350 <main+0x120>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart1, "<---  ", strlen("--->  "), HAL_MAX_DELAY);
 8000342:	2301      	movs	r3, #1
 8000344:	425b      	negs	r3, r3
 8000346:	4914      	ldr	r1, [pc, #80]	; (8000398 <main+0x168>)
 8000348:	4810      	ldr	r0, [pc, #64]	; (800038c <main+0x15c>)
 800034a:	2206      	movs	r2, #6
 800034c:	f002 f844 	bl	80023d8 <HAL_UART_Transmit>
	  }
	  HAL_UART_Transmit(&huart1, string , strlen(string), HAL_MAX_DELAY);
 8000350:	2408      	movs	r4, #8
 8000352:	193b      	adds	r3, r7, r4
 8000354:	0018      	movs	r0, r3
 8000356:	f7ff fed7 	bl	8000108 <strlen>
 800035a:	0003      	movs	r3, r0
 800035c:	b29a      	uxth	r2, r3
 800035e:	2301      	movs	r3, #1
 8000360:	425b      	negs	r3, r3
 8000362:	1939      	adds	r1, r7, r4
 8000364:	4809      	ldr	r0, [pc, #36]	; (800038c <main+0x15c>)
 8000366:	f002 f837 	bl	80023d8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, "\n\r" , strlen("\n\r"), HAL_MAX_DELAY);
 800036a:	2301      	movs	r3, #1
 800036c:	425b      	negs	r3, r3
 800036e:	490b      	ldr	r1, [pc, #44]	; (800039c <main+0x16c>)
 8000370:	4806      	ldr	r0, [pc, #24]	; (800038c <main+0x15c>)
 8000372:	2202      	movs	r2, #2
 8000374:	f002 f830 	bl	80023d8 <HAL_UART_Transmit>
//	  {
//		  memset(string_recive ,0 ,6 );
//		  __HAL_TIM_SetCounter(&htim1, 0);
//		  __HAL_TIM_SetCounter(&htim3, 0);
//	  }
	  HAL_Delay(1000);
 8000378:	23fa      	movs	r3, #250	; 0xfa
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	0018      	movs	r0, r3
 800037e:	f000 fbdf 	bl	8000b40 <HAL_Delay>
  {
 8000382:	e778      	b.n	8000276 <main+0x46>
 8000384:	20000070 	.word	0x20000070
 8000388:	20000028 	.word	0x20000028
 800038c:	200000fc 	.word	0x200000fc
 8000390:	08003154 	.word	0x08003154
 8000394:	08003168 	.word	0x08003168
 8000398:	08003170 	.word	0x08003170
 800039c:	08003178 	.word	0x08003178
 80003a0:	0800317c 	.word	0x0800317c

080003a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a4:	b590      	push	{r4, r7, lr}
 80003a6:	b095      	sub	sp, #84	; 0x54
 80003a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003aa:	2420      	movs	r4, #32
 80003ac:	193b      	adds	r3, r7, r4
 80003ae:	0018      	movs	r0, r3
 80003b0:	2330      	movs	r3, #48	; 0x30
 80003b2:	001a      	movs	r2, r3
 80003b4:	2100      	movs	r1, #0
 80003b6:	f002 fe79 	bl	80030ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ba:	2310      	movs	r3, #16
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	0018      	movs	r0, r3
 80003c0:	2310      	movs	r3, #16
 80003c2:	001a      	movs	r2, r3
 80003c4:	2100      	movs	r1, #0
 80003c6:	f002 fe71 	bl	80030ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003ca:	003b      	movs	r3, r7
 80003cc:	0018      	movs	r0, r3
 80003ce:	2310      	movs	r3, #16
 80003d0:	001a      	movs	r2, r3
 80003d2:	2100      	movs	r1, #0
 80003d4:	f002 fe6a 	bl	80030ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003d8:	0021      	movs	r1, r4
 80003da:	187b      	adds	r3, r7, r1
 80003dc:	2201      	movs	r2, #1
 80003de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	2201      	movs	r2, #1
 80003e4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	2202      	movs	r2, #2
 80003ea:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003ec:	187b      	adds	r3, r7, r1
 80003ee:	2280      	movs	r2, #128	; 0x80
 80003f0:	0252      	lsls	r2, r2, #9
 80003f2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80003f4:	187b      	adds	r3, r7, r1
 80003f6:	2280      	movs	r2, #128	; 0x80
 80003f8:	0352      	lsls	r2, r2, #13
 80003fa:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	2200      	movs	r2, #0
 8000400:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000402:	187b      	adds	r3, r7, r1
 8000404:	0018      	movs	r0, r3
 8000406:	f000 ffc3 	bl	8001390 <HAL_RCC_OscConfig>
 800040a:	1e03      	subs	r3, r0, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800040e:	f000 f97b 	bl	8000708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000412:	2110      	movs	r1, #16
 8000414:	187b      	adds	r3, r7, r1
 8000416:	2207      	movs	r2, #7
 8000418:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800041a:	187b      	adds	r3, r7, r1
 800041c:	2202      	movs	r2, #2
 800041e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000420:	187b      	adds	r3, r7, r1
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000426:	187b      	adds	r3, r7, r1
 8000428:	2200      	movs	r2, #0
 800042a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800042c:	187b      	adds	r3, r7, r1
 800042e:	2101      	movs	r1, #1
 8000430:	0018      	movs	r0, r3
 8000432:	f001 fac7 	bl	80019c4 <HAL_RCC_ClockConfig>
 8000436:	1e03      	subs	r3, r0, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800043a:	f000 f965 	bl	8000708 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800043e:	003b      	movs	r3, r7
 8000440:	2201      	movs	r2, #1
 8000442:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000444:	003b      	movs	r3, r7
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800044a:	003b      	movs	r3, r7
 800044c:	0018      	movs	r0, r3
 800044e:	f001 fbfd 	bl	8001c4c <HAL_RCCEx_PeriphCLKConfig>
 8000452:	1e03      	subs	r3, r0, #0
 8000454:	d001      	beq.n	800045a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000456:	f000 f957 	bl	8000708 <Error_Handler>
  }
}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b015      	add	sp, #84	; 0x54
 8000460:	bd90      	pop	{r4, r7, pc}
	...

08000464 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b088      	sub	sp, #32
 8000468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800046a:	230c      	movs	r3, #12
 800046c:	18fb      	adds	r3, r7, r3
 800046e:	0018      	movs	r0, r3
 8000470:	2314      	movs	r3, #20
 8000472:	001a      	movs	r2, r3
 8000474:	2100      	movs	r1, #0
 8000476:	f002 fe19 	bl	80030ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	0018      	movs	r0, r3
 800047e:	2308      	movs	r3, #8
 8000480:	001a      	movs	r2, r3
 8000482:	2100      	movs	r1, #0
 8000484:	f002 fe12 	bl	80030ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000488:	4b23      	ldr	r3, [pc, #140]	; (8000518 <MX_TIM1_Init+0xb4>)
 800048a:	4a24      	ldr	r2, [pc, #144]	; (800051c <MX_TIM1_Init+0xb8>)
 800048c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800048e:	4b22      	ldr	r3, [pc, #136]	; (8000518 <MX_TIM1_Init+0xb4>)
 8000490:	2200      	movs	r2, #0
 8000492:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000494:	4b20      	ldr	r3, [pc, #128]	; (8000518 <MX_TIM1_Init+0xb4>)
 8000496:	2200      	movs	r2, #0
 8000498:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800049a:	4b1f      	ldr	r3, [pc, #124]	; (8000518 <MX_TIM1_Init+0xb4>)
 800049c:	4a20      	ldr	r2, [pc, #128]	; (8000520 <MX_TIM1_Init+0xbc>)
 800049e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004a0:	4b1d      	ldr	r3, [pc, #116]	; (8000518 <MX_TIM1_Init+0xb4>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004a6:	4b1c      	ldr	r3, [pc, #112]	; (8000518 <MX_TIM1_Init+0xb4>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ac:	4b1a      	ldr	r3, [pc, #104]	; (8000518 <MX_TIM1_Init+0xb4>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004b2:	4b19      	ldr	r3, [pc, #100]	; (8000518 <MX_TIM1_Init+0xb4>)
 80004b4:	0018      	movs	r0, r3
 80004b6:	f001 fc97 	bl	8001de8 <HAL_TIM_Base_Init>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d001      	beq.n	80004c2 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80004be:	f000 f923 	bl	8000708 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80004c2:	210c      	movs	r1, #12
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2207      	movs	r2, #7
 80004c8:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2260      	movs	r2, #96	; 0x60
 80004ce:	605a      	str	r2, [r3, #4]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  sSlaveConfig.TriggerFilter = 0;
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2200      	movs	r2, #0
 80004da:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80004dc:	187a      	adds	r2, r7, r1
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <MX_TIM1_Init+0xb4>)
 80004e0:	0011      	movs	r1, r2
 80004e2:	0018      	movs	r0, r3
 80004e4:	f001 fd0e 	bl	8001f04 <HAL_TIM_SlaveConfigSynchro>
 80004e8:	1e03      	subs	r3, r0, #0
 80004ea:	d001      	beq.n	80004f0 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80004ec:	f000 f90c 	bl	8000708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2200      	movs	r2, #0
 80004fa:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004fc:	1d3a      	adds	r2, r7, #4
 80004fe:	4b06      	ldr	r3, [pc, #24]	; (8000518 <MX_TIM1_Init+0xb4>)
 8000500:	0011      	movs	r1, r2
 8000502:	0018      	movs	r0, r3
 8000504:	f001 fec2 	bl	800228c <HAL_TIMEx_MasterConfigSynchronization>
 8000508:	1e03      	subs	r3, r0, #0
 800050a:	d001      	beq.n	8000510 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800050c:	f000 f8fc 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000510:	46c0      	nop			; (mov r8, r8)
 8000512:	46bd      	mov	sp, r7
 8000514:	b008      	add	sp, #32
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000028 	.word	0x20000028
 800051c:	40012c00 	.word	0x40012c00
 8000520:	0000ffff 	.word	0x0000ffff

08000524 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800052a:	230c      	movs	r3, #12
 800052c:	18fb      	adds	r3, r7, r3
 800052e:	0018      	movs	r0, r3
 8000530:	2314      	movs	r3, #20
 8000532:	001a      	movs	r2, r3
 8000534:	2100      	movs	r1, #0
 8000536:	f002 fdb9 	bl	80030ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	0018      	movs	r0, r3
 800053e:	2308      	movs	r3, #8
 8000540:	001a      	movs	r2, r3
 8000542:	2100      	movs	r1, #0
 8000544:	f002 fdb2 	bl	80030ac <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000548:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <MX_TIM3_Init+0xb0>)
 800054a:	4a23      	ldr	r2, [pc, #140]	; (80005d8 <MX_TIM3_Init+0xb4>)
 800054c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800054e:	4b21      	ldr	r3, [pc, #132]	; (80005d4 <MX_TIM3_Init+0xb0>)
 8000550:	2200      	movs	r2, #0
 8000552:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <MX_TIM3_Init+0xb0>)
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800055a:	4b1e      	ldr	r3, [pc, #120]	; (80005d4 <MX_TIM3_Init+0xb0>)
 800055c:	4a1f      	ldr	r2, [pc, #124]	; (80005dc <MX_TIM3_Init+0xb8>)
 800055e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000560:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <MX_TIM3_Init+0xb0>)
 8000562:	2200      	movs	r2, #0
 8000564:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000566:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <MX_TIM3_Init+0xb0>)
 8000568:	2200      	movs	r2, #0
 800056a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800056c:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <MX_TIM3_Init+0xb0>)
 800056e:	0018      	movs	r0, r3
 8000570:	f001 fc3a 	bl	8001de8 <HAL_TIM_Base_Init>
 8000574:	1e03      	subs	r3, r0, #0
 8000576:	d001      	beq.n	800057c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000578:	f000 f8c6 	bl	8000708 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800057c:	210c      	movs	r1, #12
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2207      	movs	r2, #7
 8000582:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2250      	movs	r2, #80	; 0x50
 8000588:	605a      	str	r2, [r3, #4]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  sSlaveConfig.TriggerFilter = 0;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2200      	movs	r2, #0
 8000594:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000596:	187a      	adds	r2, r7, r1
 8000598:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <MX_TIM3_Init+0xb0>)
 800059a:	0011      	movs	r1, r2
 800059c:	0018      	movs	r0, r3
 800059e:	f001 fcb1 	bl	8001f04 <HAL_TIM_SlaveConfigSynchro>
 80005a2:	1e03      	subs	r3, r0, #0
 80005a4:	d001      	beq.n	80005aa <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80005a6:	f000 f8af 	bl	8000708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2200      	movs	r2, #0
 80005b4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005b6:	1d3a      	adds	r2, r7, #4
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <MX_TIM3_Init+0xb0>)
 80005ba:	0011      	movs	r1, r2
 80005bc:	0018      	movs	r0, r3
 80005be:	f001 fe65 	bl	800228c <HAL_TIMEx_MasterConfigSynchronization>
 80005c2:	1e03      	subs	r3, r0, #0
 80005c4:	d001      	beq.n	80005ca <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80005c6:	f000 f89f 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b008      	add	sp, #32
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	20000070 	.word	0x20000070
 80005d8:	40000400 	.word	0x40000400
 80005dc:	0000ffff 	.word	0x0000ffff

080005e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005e4:	4b14      	ldr	r3, [pc, #80]	; (8000638 <MX_USART1_UART_Init+0x58>)
 80005e6:	4a15      	ldr	r2, [pc, #84]	; (800063c <MX_USART1_UART_Init+0x5c>)
 80005e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005ea:	4b13      	ldr	r3, [pc, #76]	; (8000638 <MX_USART1_UART_Init+0x58>)
 80005ec:	22e1      	movs	r2, #225	; 0xe1
 80005ee:	0252      	lsls	r2, r2, #9
 80005f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005f2:	4b11      	ldr	r3, [pc, #68]	; (8000638 <MX_USART1_UART_Init+0x58>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_USART1_UART_Init+0x58>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <MX_USART1_UART_Init+0x58>)
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_USART1_UART_Init+0x58>)
 8000606:	220c      	movs	r2, #12
 8000608:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <MX_USART1_UART_Init+0x58>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_USART1_UART_Init+0x58>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <MX_USART1_UART_Init+0x58>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_USART1_UART_Init+0x58>)
 800061e:	2200      	movs	r2, #0
 8000620:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000622:	4b05      	ldr	r3, [pc, #20]	; (8000638 <MX_USART1_UART_Init+0x58>)
 8000624:	0018      	movs	r0, r3
 8000626:	f001 fe83 	bl	8002330 <HAL_UART_Init>
 800062a:	1e03      	subs	r3, r0, #0
 800062c:	d001      	beq.n	8000632 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800062e:	f000 f86b 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200000fc 	.word	0x200000fc
 800063c:	40013800 	.word	0x40013800

08000640 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_DMA_Init+0x48>)
 8000648:	695a      	ldr	r2, [r3, #20]
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_DMA_Init+0x48>)
 800064c:	2101      	movs	r1, #1
 800064e:	430a      	orrs	r2, r1
 8000650:	615a      	str	r2, [r3, #20]
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <MX_DMA_Init+0x48>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	2201      	movs	r2, #1
 8000658:	4013      	ands	r3, r2
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2100      	movs	r1, #0
 8000662:	200a      	movs	r0, #10
 8000664:	f000 fb3c 	bl	8000ce0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000668:	200a      	movs	r0, #10
 800066a:	f000 fb4e 	bl	8000d0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	2100      	movs	r1, #0
 8000672:	200b      	movs	r0, #11
 8000674:	f000 fb34 	bl	8000ce0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000678:	200b      	movs	r0, #11
 800067a:	f000 fb46 	bl	8000d0a <HAL_NVIC_EnableIRQ>

}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	b002      	add	sp, #8
 8000684:	bd80      	pop	{r7, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	40021000 	.word	0x40021000

0800068c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800068c:	b590      	push	{r4, r7, lr}
 800068e:	b089      	sub	sp, #36	; 0x24
 8000690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	240c      	movs	r4, #12
 8000694:	193b      	adds	r3, r7, r4
 8000696:	0018      	movs	r0, r3
 8000698:	2314      	movs	r3, #20
 800069a:	001a      	movs	r2, r3
 800069c:	2100      	movs	r1, #0
 800069e:	f002 fd05 	bl	80030ac <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006a2:	4b18      	ldr	r3, [pc, #96]	; (8000704 <MX_GPIO_Init+0x78>)
 80006a4:	695a      	ldr	r2, [r3, #20]
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <MX_GPIO_Init+0x78>)
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	03c9      	lsls	r1, r1, #15
 80006ac:	430a      	orrs	r2, r1
 80006ae:	615a      	str	r2, [r3, #20]
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_GPIO_Init+0x78>)
 80006b2:	695a      	ldr	r2, [r3, #20]
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	03db      	lsls	r3, r3, #15
 80006b8:	4013      	ands	r3, r2
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_GPIO_Init+0x78>)
 80006c0:	695a      	ldr	r2, [r3, #20]
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_GPIO_Init+0x78>)
 80006c4:	2180      	movs	r1, #128	; 0x80
 80006c6:	0289      	lsls	r1, r1, #10
 80006c8:	430a      	orrs	r2, r1
 80006ca:	615a      	str	r2, [r3, #20]
 80006cc:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <MX_GPIO_Init+0x78>)
 80006ce:	695a      	ldr	r2, [r3, #20]
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	029b      	lsls	r3, r3, #10
 80006d4:	4013      	ands	r3, r2
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : CH1_Direction_Pin CH2_Direction_Pin */
  GPIO_InitStruct.Pin = CH1_Direction_Pin|CH2_Direction_Pin;
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	2284      	movs	r2, #132	; 0x84
 80006de:	00d2      	lsls	r2, r2, #3
 80006e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ee:	193a      	adds	r2, r7, r4
 80006f0:	2390      	movs	r3, #144	; 0x90
 80006f2:	05db      	lsls	r3, r3, #23
 80006f4:	0011      	movs	r1, r2
 80006f6:	0018      	movs	r0, r3
 80006f8:	f000 fcbc 	bl	8001074 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	b009      	add	sp, #36	; 0x24
 8000702:	bd90      	pop	{r4, r7, pc}
 8000704:	40021000 	.word	0x40021000

08000708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000710:	e7fe      	b.n	8000710 <Error_Handler+0x8>
	...

08000714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <HAL_MspInit+0x44>)
 800071c:	699a      	ldr	r2, [r3, #24]
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <HAL_MspInit+0x44>)
 8000720:	2101      	movs	r1, #1
 8000722:	430a      	orrs	r2, r1
 8000724:	619a      	str	r2, [r3, #24]
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <HAL_MspInit+0x44>)
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	2201      	movs	r2, #1
 800072c:	4013      	ands	r3, r2
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <HAL_MspInit+0x44>)
 8000734:	69da      	ldr	r2, [r3, #28]
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <HAL_MspInit+0x44>)
 8000738:	2180      	movs	r1, #128	; 0x80
 800073a:	0549      	lsls	r1, r1, #21
 800073c:	430a      	orrs	r2, r1
 800073e:	61da      	str	r2, [r3, #28]
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <HAL_MspInit+0x44>)
 8000742:	69da      	ldr	r2, [r3, #28]
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	055b      	lsls	r3, r3, #21
 8000748:	4013      	ands	r3, r2
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	b002      	add	sp, #8
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	40021000 	.word	0x40021000

0800075c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b08d      	sub	sp, #52	; 0x34
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	241c      	movs	r4, #28
 8000766:	193b      	adds	r3, r7, r4
 8000768:	0018      	movs	r0, r3
 800076a:	2314      	movs	r3, #20
 800076c:	001a      	movs	r2, r3
 800076e:	2100      	movs	r1, #0
 8000770:	f002 fc9c 	bl	80030ac <memset>
  if(htim_base->Instance==TIM1)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a4f      	ldr	r2, [pc, #316]	; (80008b8 <HAL_TIM_Base_MspInit+0x15c>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d134      	bne.n	80007e8 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800077e:	4b4f      	ldr	r3, [pc, #316]	; (80008bc <HAL_TIM_Base_MspInit+0x160>)
 8000780:	699a      	ldr	r2, [r3, #24]
 8000782:	4b4e      	ldr	r3, [pc, #312]	; (80008bc <HAL_TIM_Base_MspInit+0x160>)
 8000784:	2180      	movs	r1, #128	; 0x80
 8000786:	0109      	lsls	r1, r1, #4
 8000788:	430a      	orrs	r2, r1
 800078a:	619a      	str	r2, [r3, #24]
 800078c:	4b4b      	ldr	r3, [pc, #300]	; (80008bc <HAL_TIM_Base_MspInit+0x160>)
 800078e:	699a      	ldr	r2, [r3, #24]
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	011b      	lsls	r3, r3, #4
 8000794:	4013      	ands	r3, r2
 8000796:	61bb      	str	r3, [r7, #24]
 8000798:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b48      	ldr	r3, [pc, #288]	; (80008bc <HAL_TIM_Base_MspInit+0x160>)
 800079c:	695a      	ldr	r2, [r3, #20]
 800079e:	4b47      	ldr	r3, [pc, #284]	; (80008bc <HAL_TIM_Base_MspInit+0x160>)
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	0289      	lsls	r1, r1, #10
 80007a4:	430a      	orrs	r2, r1
 80007a6:	615a      	str	r2, [r3, #20]
 80007a8:	4b44      	ldr	r3, [pc, #272]	; (80008bc <HAL_TIM_Base_MspInit+0x160>)
 80007aa:	695a      	ldr	r2, [r3, #20]
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	029b      	lsls	r3, r3, #10
 80007b0:	4013      	ands	r3, r2
 80007b2:	617b      	str	r3, [r7, #20]
 80007b4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	2280      	movs	r2, #128	; 0x80
 80007ba:	0092      	lsls	r2, r2, #2
 80007bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	0021      	movs	r1, r4
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2202      	movs	r2, #2
 80007c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2202      	movs	r2, #2
 80007d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	187a      	adds	r2, r7, r1
 80007da:	2390      	movs	r3, #144	; 0x90
 80007dc:	05db      	lsls	r3, r3, #23
 80007de:	0011      	movs	r1, r2
 80007e0:	0018      	movs	r0, r3
 80007e2:	f000 fc47 	bl	8001074 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80007e6:	e063      	b.n	80008b0 <HAL_TIM_Base_MspInit+0x154>
  else if(htim_base->Instance==TIM3)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a34      	ldr	r2, [pc, #208]	; (80008c0 <HAL_TIM_Base_MspInit+0x164>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d15e      	bne.n	80008b0 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007f2:	4b32      	ldr	r3, [pc, #200]	; (80008bc <HAL_TIM_Base_MspInit+0x160>)
 80007f4:	69da      	ldr	r2, [r3, #28]
 80007f6:	4b31      	ldr	r3, [pc, #196]	; (80008bc <HAL_TIM_Base_MspInit+0x160>)
 80007f8:	2102      	movs	r1, #2
 80007fa:	430a      	orrs	r2, r1
 80007fc:	61da      	str	r2, [r3, #28]
 80007fe:	4b2f      	ldr	r3, [pc, #188]	; (80008bc <HAL_TIM_Base_MspInit+0x160>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	2202      	movs	r2, #2
 8000804:	4013      	ands	r3, r2
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b2c      	ldr	r3, [pc, #176]	; (80008bc <HAL_TIM_Base_MspInit+0x160>)
 800080c:	695a      	ldr	r2, [r3, #20]
 800080e:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <HAL_TIM_Base_MspInit+0x160>)
 8000810:	2180      	movs	r1, #128	; 0x80
 8000812:	0289      	lsls	r1, r1, #10
 8000814:	430a      	orrs	r2, r1
 8000816:	615a      	str	r2, [r3, #20]
 8000818:	4b28      	ldr	r3, [pc, #160]	; (80008bc <HAL_TIM_Base_MspInit+0x160>)
 800081a:	695a      	ldr	r2, [r3, #20]
 800081c:	2380      	movs	r3, #128	; 0x80
 800081e:	029b      	lsls	r3, r3, #10
 8000820:	4013      	ands	r3, r2
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000826:	211c      	movs	r1, #28
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2240      	movs	r2, #64	; 0x40
 800082c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2202      	movs	r2, #2
 8000832:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2201      	movs	r2, #1
 8000844:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000846:	187a      	adds	r2, r7, r1
 8000848:	2390      	movs	r3, #144	; 0x90
 800084a:	05db      	lsls	r3, r3, #23
 800084c:	0011      	movs	r1, r2
 800084e:	0018      	movs	r0, r3
 8000850:	f000 fc10 	bl	8001074 <HAL_GPIO_Init>
    hdma_tim3_ch1_trig.Instance = DMA1_Channel4;
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <HAL_TIM_Base_MspInit+0x168>)
 8000856:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <HAL_TIM_Base_MspInit+0x16c>)
 8000858:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <HAL_TIM_Base_MspInit+0x168>)
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <HAL_TIM_Base_MspInit+0x168>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <HAL_TIM_Base_MspInit+0x168>)
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800086c:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <HAL_TIM_Base_MspInit+0x168>)
 800086e:	2280      	movs	r2, #128	; 0x80
 8000870:	0052      	lsls	r2, r2, #1
 8000872:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000874:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <HAL_TIM_Base_MspInit+0x168>)
 8000876:	2280      	movs	r2, #128	; 0x80
 8000878:	00d2      	lsls	r2, r2, #3
 800087a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <HAL_TIM_Base_MspInit+0x168>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <HAL_TIM_Base_MspInit+0x168>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <HAL_TIM_Base_MspInit+0x168>)
 800088a:	0018      	movs	r0, r3
 800088c:	f000 fa5a 	bl	8000d44 <HAL_DMA_Init>
 8000890:	1e03      	subs	r3, r0, #0
 8000892:	d001      	beq.n	8000898 <HAL_TIM_Base_MspInit+0x13c>
      Error_Handler();
 8000894:	f7ff ff38 	bl	8000708 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <HAL_TIM_Base_MspInit+0x168>)
 800089c:	625a      	str	r2, [r3, #36]	; 0x24
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <HAL_TIM_Base_MspInit+0x168>)
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <HAL_TIM_Base_MspInit+0x168>)
 80008a8:	639a      	str	r2, [r3, #56]	; 0x38
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_TIM_Base_MspInit+0x168>)
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	625a      	str	r2, [r3, #36]	; 0x24
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b00d      	add	sp, #52	; 0x34
 80008b6:	bd90      	pop	{r4, r7, pc}
 80008b8:	40012c00 	.word	0x40012c00
 80008bc:	40021000 	.word	0x40021000
 80008c0:	40000400 	.word	0x40000400
 80008c4:	200000b8 	.word	0x200000b8
 80008c8:	40020044 	.word	0x40020044

080008cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b08b      	sub	sp, #44	; 0x2c
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	2414      	movs	r4, #20
 80008d6:	193b      	adds	r3, r7, r4
 80008d8:	0018      	movs	r0, r3
 80008da:	2314      	movs	r3, #20
 80008dc:	001a      	movs	r2, r3
 80008de:	2100      	movs	r1, #0
 80008e0:	f002 fbe4 	bl	80030ac <memset>
  if(huart->Instance==USART1)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a2f      	ldr	r2, [pc, #188]	; (80009a8 <HAL_UART_MspInit+0xdc>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d158      	bne.n	80009a0 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008ee:	4b2f      	ldr	r3, [pc, #188]	; (80009ac <HAL_UART_MspInit+0xe0>)
 80008f0:	699a      	ldr	r2, [r3, #24]
 80008f2:	4b2e      	ldr	r3, [pc, #184]	; (80009ac <HAL_UART_MspInit+0xe0>)
 80008f4:	2180      	movs	r1, #128	; 0x80
 80008f6:	01c9      	lsls	r1, r1, #7
 80008f8:	430a      	orrs	r2, r1
 80008fa:	619a      	str	r2, [r3, #24]
 80008fc:	4b2b      	ldr	r3, [pc, #172]	; (80009ac <HAL_UART_MspInit+0xe0>)
 80008fe:	699a      	ldr	r2, [r3, #24]
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	01db      	lsls	r3, r3, #7
 8000904:	4013      	ands	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	4b28      	ldr	r3, [pc, #160]	; (80009ac <HAL_UART_MspInit+0xe0>)
 800090c:	695a      	ldr	r2, [r3, #20]
 800090e:	4b27      	ldr	r3, [pc, #156]	; (80009ac <HAL_UART_MspInit+0xe0>)
 8000910:	2180      	movs	r1, #128	; 0x80
 8000912:	0289      	lsls	r1, r1, #10
 8000914:	430a      	orrs	r2, r1
 8000916:	615a      	str	r2, [r3, #20]
 8000918:	4b24      	ldr	r3, [pc, #144]	; (80009ac <HAL_UART_MspInit+0xe0>)
 800091a:	695a      	ldr	r2, [r3, #20]
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	029b      	lsls	r3, r3, #10
 8000920:	4013      	ands	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000926:	0021      	movs	r1, r4
 8000928:	187b      	adds	r3, r7, r1
 800092a:	220c      	movs	r2, #12
 800092c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2202      	movs	r2, #2
 8000932:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2203      	movs	r2, #3
 800093e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2201      	movs	r2, #1
 8000944:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	187a      	adds	r2, r7, r1
 8000948:	2390      	movs	r3, #144	; 0x90
 800094a:	05db      	lsls	r3, r3, #23
 800094c:	0011      	movs	r1, r2
 800094e:	0018      	movs	r0, r3
 8000950:	f000 fb90 	bl	8001074 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000954:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <HAL_UART_MspInit+0xe4>)
 8000956:	4a17      	ldr	r2, [pc, #92]	; (80009b4 <HAL_UART_MspInit+0xe8>)
 8000958:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_UART_MspInit+0xe4>)
 800095c:	2200      	movs	r2, #0
 800095e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <HAL_UART_MspInit+0xe4>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_UART_MspInit+0xe4>)
 8000968:	2280      	movs	r2, #128	; 0x80
 800096a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800096c:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <HAL_UART_MspInit+0xe4>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <HAL_UART_MspInit+0xe4>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000978:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <HAL_UART_MspInit+0xe4>)
 800097a:	2220      	movs	r2, #32
 800097c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <HAL_UART_MspInit+0xe4>)
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <HAL_UART_MspInit+0xe4>)
 8000986:	0018      	movs	r0, r3
 8000988:	f000 f9dc 	bl	8000d44 <HAL_DMA_Init>
 800098c:	1e03      	subs	r3, r0, #0
 800098e:	d001      	beq.n	8000994 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000990:	f7ff feba 	bl	8000708 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <HAL_UART_MspInit+0xe4>)
 8000998:	675a      	str	r2, [r3, #116]	; 0x74
 800099a:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <HAL_UART_MspInit+0xe4>)
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009a0:	46c0      	nop			; (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b00b      	add	sp, #44	; 0x2c
 80009a6:	bd90      	pop	{r4, r7, pc}
 80009a8:	40013800 	.word	0x40013800
 80009ac:	40021000 	.word	0x40021000
 80009b0:	20000184 	.word	0x20000184
 80009b4:	40020030 	.word	0x40020030

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009bc:	e7fe      	b.n	80009bc <NMI_Handler+0x4>

080009be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <HardFault_Handler+0x4>

080009c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009dc:	f000 f894 	bl	8000b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <DMA1_Channel2_3_IRQHandler+0x14>)
 80009ee:	0018      	movs	r0, r3
 80009f0:	f000 fa56 	bl	8000ea0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	20000184 	.word	0x20000184

08000a00 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <DMA1_Channel4_5_IRQHandler+0x14>)
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 fa4a 	bl	8000ea0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	200000b8 	.word	0x200000b8

08000a18 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a26:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a28:	f7ff fff6 	bl	8000a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a2e:	490d      	ldr	r1, [pc, #52]	; (8000a64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <LoopForever+0xe>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a44:	4c0a      	ldr	r4, [pc, #40]	; (8000a70 <LoopForever+0x16>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a52:	f002 faeb 	bl	800302c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a56:	f7ff fbeb 	bl	8000230 <main>

08000a5a <LoopForever>:

LoopForever:
    b LoopForever
 8000a5a:	e7fe      	b.n	8000a5a <LoopForever>
  ldr   r0, =_estack
 8000a5c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a68:	080031f8 	.word	0x080031f8
  ldr r2, =_sbss
 8000a6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a70:	200001cc 	.word	0x200001cc

08000a74 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC1_IRQHandler>
	...

08000a78 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a7c:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <HAL_Init+0x24>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_Init+0x24>)
 8000a82:	2110      	movs	r1, #16
 8000a84:	430a      	orrs	r2, r1
 8000a86:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f000 f809 	bl	8000aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a8e:	f7ff fe41 	bl	8000714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a92:	2300      	movs	r3, #0
}
 8000a94:	0018      	movs	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	40022000 	.word	0x40022000

08000aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <HAL_InitTick+0x5c>)
 8000aaa:	681c      	ldr	r4, [r3, #0]
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <HAL_InitTick+0x60>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	0019      	movs	r1, r3
 8000ab2:	23fa      	movs	r3, #250	; 0xfa
 8000ab4:	0098      	lsls	r0, r3, #2
 8000ab6:	f7ff fb2f 	bl	8000118 <__udivsi3>
 8000aba:	0003      	movs	r3, r0
 8000abc:	0019      	movs	r1, r3
 8000abe:	0020      	movs	r0, r4
 8000ac0:	f7ff fb2a 	bl	8000118 <__udivsi3>
 8000ac4:	0003      	movs	r3, r0
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f000 f92f 	bl	8000d2a <HAL_SYSTICK_Config>
 8000acc:	1e03      	subs	r3, r0, #0
 8000ace:	d001      	beq.n	8000ad4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e00f      	b.n	8000af4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d80b      	bhi.n	8000af2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	2301      	movs	r3, #1
 8000ade:	425b      	negs	r3, r3
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f000 f8fc 	bl	8000ce0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_InitTick+0x64>)
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000aee:	2300      	movs	r3, #0
 8000af0:	e000      	b.n	8000af4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
}
 8000af4:	0018      	movs	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	b003      	add	sp, #12
 8000afa:	bd90      	pop	{r4, r7, pc}
 8000afc:	20000000 	.word	0x20000000
 8000b00:	20000008 	.word	0x20000008
 8000b04:	20000004 	.word	0x20000004

08000b08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <HAL_IncTick+0x1c>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	001a      	movs	r2, r3
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <HAL_IncTick+0x20>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	18d2      	adds	r2, r2, r3
 8000b18:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <HAL_IncTick+0x20>)
 8000b1a:	601a      	str	r2, [r3, #0]
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	20000008 	.word	0x20000008
 8000b28:	200001c8 	.word	0x200001c8

08000b2c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b30:	4b02      	ldr	r3, [pc, #8]	; (8000b3c <HAL_GetTick+0x10>)
 8000b32:	681b      	ldr	r3, [r3, #0]
}
 8000b34:	0018      	movs	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	200001c8 	.word	0x200001c8

08000b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b48:	f7ff fff0 	bl	8000b2c <HAL_GetTick>
 8000b4c:	0003      	movs	r3, r0
 8000b4e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	3301      	adds	r3, #1
 8000b58:	d005      	beq.n	8000b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <HAL_Delay+0x44>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	001a      	movs	r2, r3
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	189b      	adds	r3, r3, r2
 8000b64:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	f7ff ffe0 	bl	8000b2c <HAL_GetTick>
 8000b6c:	0002      	movs	r2, r0
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d8f7      	bhi.n	8000b68 <HAL_Delay+0x28>
  {
  }
}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b004      	add	sp, #16
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	20000008 	.word	0x20000008

08000b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	0002      	movs	r2, r0
 8000b90:	1dfb      	adds	r3, r7, #7
 8000b92:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b94:	1dfb      	adds	r3, r7, #7
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b7f      	cmp	r3, #127	; 0x7f
 8000b9a:	d809      	bhi.n	8000bb0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b9c:	1dfb      	adds	r3, r7, #7
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	001a      	movs	r2, r3
 8000ba2:	231f      	movs	r3, #31
 8000ba4:	401a      	ands	r2, r3
 8000ba6:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <__NVIC_EnableIRQ+0x30>)
 8000ba8:	2101      	movs	r1, #1
 8000baa:	4091      	lsls	r1, r2
 8000bac:	000a      	movs	r2, r1
 8000bae:	601a      	str	r2, [r3, #0]
  }
}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b002      	add	sp, #8
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	e000e100 	.word	0xe000e100

08000bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	0002      	movs	r2, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b7f      	cmp	r3, #127	; 0x7f
 8000bd0:	d828      	bhi.n	8000c24 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd2:	4a2f      	ldr	r2, [pc, #188]	; (8000c90 <__NVIC_SetPriority+0xd4>)
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b25b      	sxtb	r3, r3
 8000bda:	089b      	lsrs	r3, r3, #2
 8000bdc:	33c0      	adds	r3, #192	; 0xc0
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	589b      	ldr	r3, [r3, r2]
 8000be2:	1dfa      	adds	r2, r7, #7
 8000be4:	7812      	ldrb	r2, [r2, #0]
 8000be6:	0011      	movs	r1, r2
 8000be8:	2203      	movs	r2, #3
 8000bea:	400a      	ands	r2, r1
 8000bec:	00d2      	lsls	r2, r2, #3
 8000bee:	21ff      	movs	r1, #255	; 0xff
 8000bf0:	4091      	lsls	r1, r2
 8000bf2:	000a      	movs	r2, r1
 8000bf4:	43d2      	mvns	r2, r2
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	22ff      	movs	r2, #255	; 0xff
 8000c00:	401a      	ands	r2, r3
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	0018      	movs	r0, r3
 8000c08:	2303      	movs	r3, #3
 8000c0a:	4003      	ands	r3, r0
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c10:	481f      	ldr	r0, [pc, #124]	; (8000c90 <__NVIC_SetPriority+0xd4>)
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	b25b      	sxtb	r3, r3
 8000c18:	089b      	lsrs	r3, r3, #2
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	33c0      	adds	r3, #192	; 0xc0
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c22:	e031      	b.n	8000c88 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c24:	4a1b      	ldr	r2, [pc, #108]	; (8000c94 <__NVIC_SetPriority+0xd8>)
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	0019      	movs	r1, r3
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	400b      	ands	r3, r1
 8000c30:	3b08      	subs	r3, #8
 8000c32:	089b      	lsrs	r3, r3, #2
 8000c34:	3306      	adds	r3, #6
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	18d3      	adds	r3, r2, r3
 8000c3a:	3304      	adds	r3, #4
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	1dfa      	adds	r2, r7, #7
 8000c40:	7812      	ldrb	r2, [r2, #0]
 8000c42:	0011      	movs	r1, r2
 8000c44:	2203      	movs	r2, #3
 8000c46:	400a      	ands	r2, r1
 8000c48:	00d2      	lsls	r2, r2, #3
 8000c4a:	21ff      	movs	r1, #255	; 0xff
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	000a      	movs	r2, r1
 8000c50:	43d2      	mvns	r2, r2
 8000c52:	401a      	ands	r2, r3
 8000c54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	019b      	lsls	r3, r3, #6
 8000c5a:	22ff      	movs	r2, #255	; 0xff
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	0018      	movs	r0, r3
 8000c64:	2303      	movs	r3, #3
 8000c66:	4003      	ands	r3, r0
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c6c:	4809      	ldr	r0, [pc, #36]	; (8000c94 <__NVIC_SetPriority+0xd8>)
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	001c      	movs	r4, r3
 8000c74:	230f      	movs	r3, #15
 8000c76:	4023      	ands	r3, r4
 8000c78:	3b08      	subs	r3, #8
 8000c7a:	089b      	lsrs	r3, r3, #2
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	3306      	adds	r3, #6
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	18c3      	adds	r3, r0, r3
 8000c84:	3304      	adds	r3, #4
 8000c86:	601a      	str	r2, [r3, #0]
}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b003      	add	sp, #12
 8000c8e:	bd90      	pop	{r4, r7, pc}
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	1e5a      	subs	r2, r3, #1
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	045b      	lsls	r3, r3, #17
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d301      	bcc.n	8000cb0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cac:	2301      	movs	r3, #1
 8000cae:	e010      	b.n	8000cd2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <SysTick_Config+0x44>)
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	3a01      	subs	r2, #1
 8000cb6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb8:	2301      	movs	r3, #1
 8000cba:	425b      	negs	r3, r3
 8000cbc:	2103      	movs	r1, #3
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f7ff ff7c 	bl	8000bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <SysTick_Config+0x44>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cca:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <SysTick_Config+0x44>)
 8000ccc:	2207      	movs	r2, #7
 8000cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b002      	add	sp, #8
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	e000e010 	.word	0xe000e010

08000ce0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
 8000cea:	210f      	movs	r1, #15
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	1c02      	adds	r2, r0, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	b25b      	sxtb	r3, r3
 8000cfa:	0011      	movs	r1, r2
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff ff5d 	bl	8000bbc <__NVIC_SetPriority>
}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b004      	add	sp, #16
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	0002      	movs	r2, r0
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d16:	1dfb      	adds	r3, r7, #7
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b25b      	sxtb	r3, r3
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff ff33 	bl	8000b88 <__NVIC_EnableIRQ>
}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b002      	add	sp, #8
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	0018      	movs	r0, r3
 8000d36:	f7ff ffaf 	bl	8000c98 <SysTick_Config>
 8000d3a:	0003      	movs	r3, r0
}
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b002      	add	sp, #8
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e036      	b.n	8000dc8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2221      	movs	r2, #33	; 0x21
 8000d5e:	2102      	movs	r1, #2
 8000d60:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	4a18      	ldr	r2, [pc, #96]	; (8000dd0 <HAL_DMA_Init+0x8c>)
 8000d6e:	4013      	ands	r3, r2
 8000d70:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69db      	ldr	r3, [r3, #28]
 8000d98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	68fa      	ldr	r2, [r7, #12]
 8000da6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	0018      	movs	r0, r3
 8000dac:	f000 f946 	bl	800103c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2221      	movs	r2, #33	; 0x21
 8000dba:	2101      	movs	r1, #1
 8000dbc:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2220      	movs	r2, #32
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
}
 8000dc8:	0018      	movs	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b004      	add	sp, #16
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	ffffc00f 	.word	0xffffc00f

08000dd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
 8000de0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000de2:	2317      	movs	r3, #23
 8000de4:	18fb      	adds	r3, r7, r3
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	2220      	movs	r2, #32
 8000dee:	5c9b      	ldrb	r3, [r3, r2]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d101      	bne.n	8000df8 <HAL_DMA_Start_IT+0x24>
 8000df4:	2302      	movs	r3, #2
 8000df6:	e04f      	b.n	8000e98 <HAL_DMA_Start_IT+0xc4>
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2220      	movs	r2, #32
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2221      	movs	r2, #33	; 0x21
 8000e04:	5c9b      	ldrb	r3, [r3, r2]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d13a      	bne.n	8000e82 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2221      	movs	r2, #33	; 0x21
 8000e10:	2102      	movs	r1, #2
 8000e12:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2200      	movs	r2, #0
 8000e18:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2101      	movs	r1, #1
 8000e26:	438a      	bics	r2, r1
 8000e28:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	68b9      	ldr	r1, [r7, #8]
 8000e30:	68f8      	ldr	r0, [r7, #12]
 8000e32:	f000 f8d7 	bl	8000fe4 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d008      	beq.n	8000e50 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	210e      	movs	r1, #14
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	e00f      	b.n	8000e70 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	210a      	movs	r1, #10
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	438a      	bics	r2, r1
 8000e6e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	e007      	b.n	8000e92 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2220      	movs	r2, #32
 8000e86:	2100      	movs	r1, #0
 8000e88:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000e8a:	2317      	movs	r3, #23
 8000e8c:	18fb      	adds	r3, r7, r3
 8000e8e:	2202      	movs	r2, #2
 8000e90:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000e92:	2317      	movs	r3, #23
 8000e94:	18fb      	adds	r3, r7, r3
 8000e96:	781b      	ldrb	r3, [r3, #0]
}
 8000e98:	0018      	movs	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b006      	add	sp, #24
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	2204      	movs	r2, #4
 8000ebe:	409a      	lsls	r2, r3
 8000ec0:	0013      	movs	r3, r2
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	d024      	beq.n	8000f12 <HAL_DMA_IRQHandler+0x72>
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	2204      	movs	r2, #4
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d020      	beq.n	8000f12 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2220      	movs	r2, #32
 8000ed8:	4013      	ands	r3, r2
 8000eda:	d107      	bne.n	8000eec <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2104      	movs	r1, #4
 8000ee8:	438a      	bics	r2, r1
 8000eea:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ef4:	2104      	movs	r1, #4
 8000ef6:	4091      	lsls	r1, r2
 8000ef8:	000a      	movs	r2, r1
 8000efa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d100      	bne.n	8000f06 <HAL_DMA_IRQHandler+0x66>
 8000f04:	e06a      	b.n	8000fdc <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	0010      	movs	r0, r2
 8000f0e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000f10:	e064      	b.n	8000fdc <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	2202      	movs	r2, #2
 8000f18:	409a      	lsls	r2, r3
 8000f1a:	0013      	movs	r3, r2
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	d02b      	beq.n	8000f7a <HAL_DMA_IRQHandler+0xda>
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	2202      	movs	r2, #2
 8000f26:	4013      	ands	r3, r2
 8000f28:	d027      	beq.n	8000f7a <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2220      	movs	r2, #32
 8000f32:	4013      	ands	r3, r2
 8000f34:	d10b      	bne.n	8000f4e <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	210a      	movs	r1, #10
 8000f42:	438a      	bics	r2, r1
 8000f44:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2221      	movs	r2, #33	; 0x21
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f56:	2102      	movs	r1, #2
 8000f58:	4091      	lsls	r1, r2
 8000f5a:	000a      	movs	r2, r1
 8000f5c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2220      	movs	r2, #32
 8000f62:	2100      	movs	r1, #0
 8000f64:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d036      	beq.n	8000fdc <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	0010      	movs	r0, r2
 8000f76:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000f78:	e030      	b.n	8000fdc <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	2208      	movs	r2, #8
 8000f80:	409a      	lsls	r2, r3
 8000f82:	0013      	movs	r3, r2
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	4013      	ands	r3, r2
 8000f88:	d028      	beq.n	8000fdc <HAL_DMA_IRQHandler+0x13c>
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	2208      	movs	r2, #8
 8000f8e:	4013      	ands	r3, r2
 8000f90:	d024      	beq.n	8000fdc <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	210e      	movs	r1, #14
 8000f9e:	438a      	bics	r2, r1
 8000fa0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000faa:	2101      	movs	r1, #1
 8000fac:	4091      	lsls	r1, r2
 8000fae:	000a      	movs	r2, r1
 8000fb0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2221      	movs	r2, #33	; 0x21
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2220      	movs	r2, #32
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d005      	beq.n	8000fdc <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	0010      	movs	r0, r2
 8000fd8:	4798      	blx	r3
    }
  }
}
 8000fda:	e7ff      	b.n	8000fdc <HAL_DMA_IRQHandler+0x13c>
 8000fdc:	46c0      	nop			; (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b004      	add	sp, #16
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
 8000ff0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4091      	lsls	r1, r2
 8000ffe:	000a      	movs	r2, r1
 8001000:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b10      	cmp	r3, #16
 8001010:	d108      	bne.n	8001024 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001022:	e007      	b.n	8001034 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	60da      	str	r2, [r3, #12]
}
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	b004      	add	sp, #16
 800103a:	bd80      	pop	{r7, pc}

0800103c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a08      	ldr	r2, [pc, #32]	; (800106c <DMA_CalcBaseAndBitshift+0x30>)
 800104a:	4694      	mov	ip, r2
 800104c:	4463      	add	r3, ip
 800104e:	2114      	movs	r1, #20
 8001050:	0018      	movs	r0, r3
 8001052:	f7ff f861 	bl	8000118 <__udivsi3>
 8001056:	0003      	movs	r3, r0
 8001058:	009a      	lsls	r2, r3, #2
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a03      	ldr	r2, [pc, #12]	; (8001070 <DMA_CalcBaseAndBitshift+0x34>)
 8001062:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	b002      	add	sp, #8
 800106a:	bd80      	pop	{r7, pc}
 800106c:	bffdfff8 	.word	0xbffdfff8
 8001070:	40020000 	.word	0x40020000

08001074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001082:	e14f      	b.n	8001324 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2101      	movs	r1, #1
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	4091      	lsls	r1, r2
 800108e:	000a      	movs	r2, r1
 8001090:	4013      	ands	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d100      	bne.n	800109c <HAL_GPIO_Init+0x28>
 800109a:	e140      	b.n	800131e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2203      	movs	r2, #3
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d005      	beq.n	80010b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2203      	movs	r2, #3
 80010ae:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d130      	bne.n	8001116 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	409a      	lsls	r2, r3
 80010c2:	0013      	movs	r3, r2
 80010c4:	43da      	mvns	r2, r3
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	68da      	ldr	r2, [r3, #12]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	409a      	lsls	r2, r3
 80010d6:	0013      	movs	r3, r2
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ea:	2201      	movs	r2, #1
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	409a      	lsls	r2, r3
 80010f0:	0013      	movs	r3, r2
 80010f2:	43da      	mvns	r2, r3
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	091b      	lsrs	r3, r3, #4
 8001100:	2201      	movs	r2, #1
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
 8001108:	0013      	movs	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2203      	movs	r2, #3
 800111c:	4013      	ands	r3, r2
 800111e:	2b03      	cmp	r3, #3
 8001120:	d017      	beq.n	8001152 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	2203      	movs	r2, #3
 800112e:	409a      	lsls	r2, r3
 8001130:	0013      	movs	r3, r2
 8001132:	43da      	mvns	r2, r3
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	409a      	lsls	r2, r3
 8001144:	0013      	movs	r3, r2
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2203      	movs	r2, #3
 8001158:	4013      	ands	r3, r2
 800115a:	2b02      	cmp	r3, #2
 800115c:	d123      	bne.n	80011a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	08da      	lsrs	r2, r3, #3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3208      	adds	r2, #8
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	58d3      	ldr	r3, [r2, r3]
 800116a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	2207      	movs	r2, #7
 8001170:	4013      	ands	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	220f      	movs	r2, #15
 8001176:	409a      	lsls	r2, r3
 8001178:	0013      	movs	r3, r2
 800117a:	43da      	mvns	r2, r3
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	691a      	ldr	r2, [r3, #16]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	2107      	movs	r1, #7
 800118a:	400b      	ands	r3, r1
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	409a      	lsls	r2, r3
 8001190:	0013      	movs	r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	08da      	lsrs	r2, r3, #3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3208      	adds	r2, #8
 80011a0:	0092      	lsls	r2, r2, #2
 80011a2:	6939      	ldr	r1, [r7, #16]
 80011a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	2203      	movs	r2, #3
 80011b2:	409a      	lsls	r2, r3
 80011b4:	0013      	movs	r3, r2
 80011b6:	43da      	mvns	r2, r3
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2203      	movs	r2, #3
 80011c4:	401a      	ands	r2, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	409a      	lsls	r2, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	23c0      	movs	r3, #192	; 0xc0
 80011e0:	029b      	lsls	r3, r3, #10
 80011e2:	4013      	ands	r3, r2
 80011e4:	d100      	bne.n	80011e8 <HAL_GPIO_Init+0x174>
 80011e6:	e09a      	b.n	800131e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e8:	4b54      	ldr	r3, [pc, #336]	; (800133c <HAL_GPIO_Init+0x2c8>)
 80011ea:	699a      	ldr	r2, [r3, #24]
 80011ec:	4b53      	ldr	r3, [pc, #332]	; (800133c <HAL_GPIO_Init+0x2c8>)
 80011ee:	2101      	movs	r1, #1
 80011f0:	430a      	orrs	r2, r1
 80011f2:	619a      	str	r2, [r3, #24]
 80011f4:	4b51      	ldr	r3, [pc, #324]	; (800133c <HAL_GPIO_Init+0x2c8>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	2201      	movs	r2, #1
 80011fa:	4013      	ands	r3, r2
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001200:	4a4f      	ldr	r2, [pc, #316]	; (8001340 <HAL_GPIO_Init+0x2cc>)
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	3302      	adds	r3, #2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	589b      	ldr	r3, [r3, r2]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	2203      	movs	r2, #3
 8001212:	4013      	ands	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	220f      	movs	r2, #15
 8001218:	409a      	lsls	r2, r3
 800121a:	0013      	movs	r3, r2
 800121c:	43da      	mvns	r2, r3
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	2390      	movs	r3, #144	; 0x90
 8001228:	05db      	lsls	r3, r3, #23
 800122a:	429a      	cmp	r2, r3
 800122c:	d013      	beq.n	8001256 <HAL_GPIO_Init+0x1e2>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a44      	ldr	r2, [pc, #272]	; (8001344 <HAL_GPIO_Init+0x2d0>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d00d      	beq.n	8001252 <HAL_GPIO_Init+0x1de>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a43      	ldr	r2, [pc, #268]	; (8001348 <HAL_GPIO_Init+0x2d4>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d007      	beq.n	800124e <HAL_GPIO_Init+0x1da>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a42      	ldr	r2, [pc, #264]	; (800134c <HAL_GPIO_Init+0x2d8>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_GPIO_Init+0x1d6>
 8001246:	2303      	movs	r3, #3
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x1e4>
 800124a:	2305      	movs	r3, #5
 800124c:	e004      	b.n	8001258 <HAL_GPIO_Init+0x1e4>
 800124e:	2302      	movs	r3, #2
 8001250:	e002      	b.n	8001258 <HAL_GPIO_Init+0x1e4>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <HAL_GPIO_Init+0x1e4>
 8001256:	2300      	movs	r3, #0
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	2103      	movs	r1, #3
 800125c:	400a      	ands	r2, r1
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	4093      	lsls	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001268:	4935      	ldr	r1, [pc, #212]	; (8001340 <HAL_GPIO_Init+0x2cc>)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3302      	adds	r3, #2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001276:	4b36      	ldr	r3, [pc, #216]	; (8001350 <HAL_GPIO_Init+0x2dc>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	43da      	mvns	r2, r3
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	2380      	movs	r3, #128	; 0x80
 800128c:	035b      	lsls	r3, r3, #13
 800128e:	4013      	ands	r3, r2
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800129a:	4b2d      	ldr	r3, [pc, #180]	; (8001350 <HAL_GPIO_Init+0x2dc>)
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012a0:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <HAL_GPIO_Init+0x2dc>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	43da      	mvns	r2, r3
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	2380      	movs	r3, #128	; 0x80
 80012b6:	039b      	lsls	r3, r3, #14
 80012b8:	4013      	ands	r3, r2
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012c4:	4b22      	ldr	r3, [pc, #136]	; (8001350 <HAL_GPIO_Init+0x2dc>)
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80012ca:	4b21      	ldr	r3, [pc, #132]	; (8001350 <HAL_GPIO_Init+0x2dc>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	43da      	mvns	r2, r3
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	029b      	lsls	r3, r3, #10
 80012e2:	4013      	ands	r3, r2
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <HAL_GPIO_Init+0x2dc>)
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80012f4:	4b16      	ldr	r3, [pc, #88]	; (8001350 <HAL_GPIO_Init+0x2dc>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	43da      	mvns	r2, r3
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	025b      	lsls	r3, r3, #9
 800130c:	4013      	ands	r3, r2
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001318:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <HAL_GPIO_Init+0x2dc>)
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	3301      	adds	r3, #1
 8001322:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	40da      	lsrs	r2, r3
 800132c:	1e13      	subs	r3, r2, #0
 800132e:	d000      	beq.n	8001332 <HAL_GPIO_Init+0x2be>
 8001330:	e6a8      	b.n	8001084 <HAL_GPIO_Init+0x10>
  } 
}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	46c0      	nop			; (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	b006      	add	sp, #24
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40021000 	.word	0x40021000
 8001340:	40010000 	.word	0x40010000
 8001344:	48000400 	.word	0x48000400
 8001348:	48000800 	.word	0x48000800
 800134c:	48000c00 	.word	0x48000c00
 8001350:	40010400 	.word	0x40010400

08001354 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	000a      	movs	r2, r1
 800135e:	1cbb      	adds	r3, r7, #2
 8001360:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	1cba      	adds	r2, r7, #2
 8001368:	8812      	ldrh	r2, [r2, #0]
 800136a:	4013      	ands	r3, r2
 800136c:	d004      	beq.n	8001378 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800136e:	230f      	movs	r3, #15
 8001370:	18fb      	adds	r3, r7, r3
 8001372:	2201      	movs	r2, #1
 8001374:	701a      	strb	r2, [r3, #0]
 8001376:	e003      	b.n	8001380 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001378:	230f      	movs	r3, #15
 800137a:	18fb      	adds	r3, r7, r3
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001380:	230f      	movs	r3, #15
 8001382:	18fb      	adds	r3, r7, r3
 8001384:	781b      	ldrb	r3, [r3, #0]
  }
 8001386:	0018      	movs	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	b004      	add	sp, #16
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e301      	b.n	80019a6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2201      	movs	r2, #1
 80013a8:	4013      	ands	r3, r2
 80013aa:	d100      	bne.n	80013ae <HAL_RCC_OscConfig+0x1e>
 80013ac:	e08d      	b.n	80014ca <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013ae:	4bc3      	ldr	r3, [pc, #780]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	220c      	movs	r2, #12
 80013b4:	4013      	ands	r3, r2
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	d00e      	beq.n	80013d8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013ba:	4bc0      	ldr	r3, [pc, #768]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	220c      	movs	r2, #12
 80013c0:	4013      	ands	r3, r2
 80013c2:	2b08      	cmp	r3, #8
 80013c4:	d116      	bne.n	80013f4 <HAL_RCC_OscConfig+0x64>
 80013c6:	4bbd      	ldr	r3, [pc, #756]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	2380      	movs	r3, #128	; 0x80
 80013cc:	025b      	lsls	r3, r3, #9
 80013ce:	401a      	ands	r2, r3
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	025b      	lsls	r3, r3, #9
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d10d      	bne.n	80013f4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d8:	4bb8      	ldr	r3, [pc, #736]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	029b      	lsls	r3, r3, #10
 80013e0:	4013      	ands	r3, r2
 80013e2:	d100      	bne.n	80013e6 <HAL_RCC_OscConfig+0x56>
 80013e4:	e070      	b.n	80014c8 <HAL_RCC_OscConfig+0x138>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d000      	beq.n	80013f0 <HAL_RCC_OscConfig+0x60>
 80013ee:	e06b      	b.n	80014c8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e2d8      	b.n	80019a6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d107      	bne.n	800140c <HAL_RCC_OscConfig+0x7c>
 80013fc:	4baf      	ldr	r3, [pc, #700]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4bae      	ldr	r3, [pc, #696]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001402:	2180      	movs	r1, #128	; 0x80
 8001404:	0249      	lsls	r1, r1, #9
 8001406:	430a      	orrs	r2, r1
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	e02f      	b.n	800146c <HAL_RCC_OscConfig+0xdc>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d10c      	bne.n	800142e <HAL_RCC_OscConfig+0x9e>
 8001414:	4ba9      	ldr	r3, [pc, #676]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4ba8      	ldr	r3, [pc, #672]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 800141a:	49a9      	ldr	r1, [pc, #676]	; (80016c0 <HAL_RCC_OscConfig+0x330>)
 800141c:	400a      	ands	r2, r1
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	4ba6      	ldr	r3, [pc, #664]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4ba5      	ldr	r3, [pc, #660]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001426:	49a7      	ldr	r1, [pc, #668]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 8001428:	400a      	ands	r2, r1
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	e01e      	b.n	800146c <HAL_RCC_OscConfig+0xdc>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b05      	cmp	r3, #5
 8001434:	d10e      	bne.n	8001454 <HAL_RCC_OscConfig+0xc4>
 8001436:	4ba1      	ldr	r3, [pc, #644]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4ba0      	ldr	r3, [pc, #640]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 800143c:	2180      	movs	r1, #128	; 0x80
 800143e:	02c9      	lsls	r1, r1, #11
 8001440:	430a      	orrs	r2, r1
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	4b9d      	ldr	r3, [pc, #628]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b9c      	ldr	r3, [pc, #624]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 800144a:	2180      	movs	r1, #128	; 0x80
 800144c:	0249      	lsls	r1, r1, #9
 800144e:	430a      	orrs	r2, r1
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	e00b      	b.n	800146c <HAL_RCC_OscConfig+0xdc>
 8001454:	4b99      	ldr	r3, [pc, #612]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b98      	ldr	r3, [pc, #608]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 800145a:	4999      	ldr	r1, [pc, #612]	; (80016c0 <HAL_RCC_OscConfig+0x330>)
 800145c:	400a      	ands	r2, r1
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	4b96      	ldr	r3, [pc, #600]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b95      	ldr	r3, [pc, #596]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001466:	4997      	ldr	r1, [pc, #604]	; (80016c4 <HAL_RCC_OscConfig+0x334>)
 8001468:	400a      	ands	r2, r1
 800146a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d014      	beq.n	800149e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001474:	f7ff fb5a 	bl	8000b2c <HAL_GetTick>
 8001478:	0003      	movs	r3, r0
 800147a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800147e:	f7ff fb55 	bl	8000b2c <HAL_GetTick>
 8001482:	0002      	movs	r2, r0
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b64      	cmp	r3, #100	; 0x64
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e28a      	b.n	80019a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001490:	4b8a      	ldr	r3, [pc, #552]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	2380      	movs	r3, #128	; 0x80
 8001496:	029b      	lsls	r3, r3, #10
 8001498:	4013      	ands	r3, r2
 800149a:	d0f0      	beq.n	800147e <HAL_RCC_OscConfig+0xee>
 800149c:	e015      	b.n	80014ca <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149e:	f7ff fb45 	bl	8000b2c <HAL_GetTick>
 80014a2:	0003      	movs	r3, r0
 80014a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014a8:	f7ff fb40 	bl	8000b2c <HAL_GetTick>
 80014ac:	0002      	movs	r2, r0
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b64      	cmp	r3, #100	; 0x64
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e275      	b.n	80019a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ba:	4b80      	ldr	r3, [pc, #512]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	029b      	lsls	r3, r3, #10
 80014c2:	4013      	ands	r3, r2
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0x118>
 80014c6:	e000      	b.n	80014ca <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2202      	movs	r2, #2
 80014d0:	4013      	ands	r3, r2
 80014d2:	d100      	bne.n	80014d6 <HAL_RCC_OscConfig+0x146>
 80014d4:	e069      	b.n	80015aa <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014d6:	4b79      	ldr	r3, [pc, #484]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	220c      	movs	r2, #12
 80014dc:	4013      	ands	r3, r2
 80014de:	d00b      	beq.n	80014f8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014e0:	4b76      	ldr	r3, [pc, #472]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	220c      	movs	r2, #12
 80014e6:	4013      	ands	r3, r2
 80014e8:	2b08      	cmp	r3, #8
 80014ea:	d11c      	bne.n	8001526 <HAL_RCC_OscConfig+0x196>
 80014ec:	4b73      	ldr	r3, [pc, #460]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	025b      	lsls	r3, r3, #9
 80014f4:	4013      	ands	r3, r2
 80014f6:	d116      	bne.n	8001526 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f8:	4b70      	ldr	r3, [pc, #448]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2202      	movs	r2, #2
 80014fe:	4013      	ands	r3, r2
 8001500:	d005      	beq.n	800150e <HAL_RCC_OscConfig+0x17e>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d001      	beq.n	800150e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e24b      	b.n	80019a6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150e:	4b6b      	ldr	r3, [pc, #428]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	22f8      	movs	r2, #248	; 0xf8
 8001514:	4393      	bics	r3, r2
 8001516:	0019      	movs	r1, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	00da      	lsls	r2, r3, #3
 800151e:	4b67      	ldr	r3, [pc, #412]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001520:	430a      	orrs	r2, r1
 8001522:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001524:	e041      	b.n	80015aa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d024      	beq.n	8001578 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800152e:	4b63      	ldr	r3, [pc, #396]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	4b62      	ldr	r3, [pc, #392]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001534:	2101      	movs	r1, #1
 8001536:	430a      	orrs	r2, r1
 8001538:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153a:	f7ff faf7 	bl	8000b2c <HAL_GetTick>
 800153e:	0003      	movs	r3, r0
 8001540:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001544:	f7ff faf2 	bl	8000b2c <HAL_GetTick>
 8001548:	0002      	movs	r2, r0
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e227      	b.n	80019a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001556:	4b59      	ldr	r3, [pc, #356]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2202      	movs	r2, #2
 800155c:	4013      	ands	r3, r2
 800155e:	d0f1      	beq.n	8001544 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001560:	4b56      	ldr	r3, [pc, #344]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	22f8      	movs	r2, #248	; 0xf8
 8001566:	4393      	bics	r3, r2
 8001568:	0019      	movs	r1, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	00da      	lsls	r2, r3, #3
 8001570:	4b52      	ldr	r3, [pc, #328]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001572:	430a      	orrs	r2, r1
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	e018      	b.n	80015aa <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001578:	4b50      	ldr	r3, [pc, #320]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b4f      	ldr	r3, [pc, #316]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 800157e:	2101      	movs	r1, #1
 8001580:	438a      	bics	r2, r1
 8001582:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff fad2 	bl	8000b2c <HAL_GetTick>
 8001588:	0003      	movs	r3, r0
 800158a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800158e:	f7ff facd 	bl	8000b2c <HAL_GetTick>
 8001592:	0002      	movs	r2, r0
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e202      	b.n	80019a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a0:	4b46      	ldr	r3, [pc, #280]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2202      	movs	r2, #2
 80015a6:	4013      	ands	r3, r2
 80015a8:	d1f1      	bne.n	800158e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2208      	movs	r2, #8
 80015b0:	4013      	ands	r3, r2
 80015b2:	d036      	beq.n	8001622 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d019      	beq.n	80015f0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015bc:	4b3f      	ldr	r3, [pc, #252]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80015be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015c0:	4b3e      	ldr	r3, [pc, #248]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80015c2:	2101      	movs	r1, #1
 80015c4:	430a      	orrs	r2, r1
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c8:	f7ff fab0 	bl	8000b2c <HAL_GetTick>
 80015cc:	0003      	movs	r3, r0
 80015ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d2:	f7ff faab 	bl	8000b2c <HAL_GetTick>
 80015d6:	0002      	movs	r2, r0
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e1e0      	b.n	80019a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e4:	4b35      	ldr	r3, [pc, #212]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	2202      	movs	r2, #2
 80015ea:	4013      	ands	r3, r2
 80015ec:	d0f1      	beq.n	80015d2 <HAL_RCC_OscConfig+0x242>
 80015ee:	e018      	b.n	8001622 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f0:	4b32      	ldr	r3, [pc, #200]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80015f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015f4:	4b31      	ldr	r3, [pc, #196]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80015f6:	2101      	movs	r1, #1
 80015f8:	438a      	bics	r2, r1
 80015fa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fc:	f7ff fa96 	bl	8000b2c <HAL_GetTick>
 8001600:	0003      	movs	r3, r0
 8001602:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001606:	f7ff fa91 	bl	8000b2c <HAL_GetTick>
 800160a:	0002      	movs	r2, r0
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e1c6      	b.n	80019a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001618:	4b28      	ldr	r3, [pc, #160]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	2202      	movs	r2, #2
 800161e:	4013      	ands	r3, r2
 8001620:	d1f1      	bne.n	8001606 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2204      	movs	r2, #4
 8001628:	4013      	ands	r3, r2
 800162a:	d100      	bne.n	800162e <HAL_RCC_OscConfig+0x29e>
 800162c:	e0b4      	b.n	8001798 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800162e:	201f      	movs	r0, #31
 8001630:	183b      	adds	r3, r7, r0
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001636:	4b21      	ldr	r3, [pc, #132]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001638:	69da      	ldr	r2, [r3, #28]
 800163a:	2380      	movs	r3, #128	; 0x80
 800163c:	055b      	lsls	r3, r3, #21
 800163e:	4013      	ands	r3, r2
 8001640:	d110      	bne.n	8001664 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001644:	69da      	ldr	r2, [r3, #28]
 8001646:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001648:	2180      	movs	r1, #128	; 0x80
 800164a:	0549      	lsls	r1, r1, #21
 800164c:	430a      	orrs	r2, r1
 800164e:	61da      	str	r2, [r3, #28]
 8001650:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 8001652:	69da      	ldr	r2, [r3, #28]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	055b      	lsls	r3, r3, #21
 8001658:	4013      	ands	r3, r2
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800165e:	183b      	adds	r3, r7, r0
 8001660:	2201      	movs	r2, #1
 8001662:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001664:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <HAL_RCC_OscConfig+0x338>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4013      	ands	r3, r2
 800166e:	d11a      	bne.n	80016a6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001670:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <HAL_RCC_OscConfig+0x338>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <HAL_RCC_OscConfig+0x338>)
 8001676:	2180      	movs	r1, #128	; 0x80
 8001678:	0049      	lsls	r1, r1, #1
 800167a:	430a      	orrs	r2, r1
 800167c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800167e:	f7ff fa55 	bl	8000b2c <HAL_GetTick>
 8001682:	0003      	movs	r3, r0
 8001684:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001688:	f7ff fa50 	bl	8000b2c <HAL_GetTick>
 800168c:	0002      	movs	r2, r0
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b64      	cmp	r3, #100	; 0x64
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e185      	b.n	80019a6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <HAL_RCC_OscConfig+0x338>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	4013      	ands	r3, r2
 80016a4:	d0f0      	beq.n	8001688 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d10e      	bne.n	80016cc <HAL_RCC_OscConfig+0x33c>
 80016ae:	4b03      	ldr	r3, [pc, #12]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80016b0:	6a1a      	ldr	r2, [r3, #32]
 80016b2:	4b02      	ldr	r3, [pc, #8]	; (80016bc <HAL_RCC_OscConfig+0x32c>)
 80016b4:	2101      	movs	r1, #1
 80016b6:	430a      	orrs	r2, r1
 80016b8:	621a      	str	r2, [r3, #32]
 80016ba:	e035      	b.n	8001728 <HAL_RCC_OscConfig+0x398>
 80016bc:	40021000 	.word	0x40021000
 80016c0:	fffeffff 	.word	0xfffeffff
 80016c4:	fffbffff 	.word	0xfffbffff
 80016c8:	40007000 	.word	0x40007000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d10c      	bne.n	80016ee <HAL_RCC_OscConfig+0x35e>
 80016d4:	4bb6      	ldr	r3, [pc, #728]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 80016d6:	6a1a      	ldr	r2, [r3, #32]
 80016d8:	4bb5      	ldr	r3, [pc, #724]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 80016da:	2101      	movs	r1, #1
 80016dc:	438a      	bics	r2, r1
 80016de:	621a      	str	r2, [r3, #32]
 80016e0:	4bb3      	ldr	r3, [pc, #716]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 80016e2:	6a1a      	ldr	r2, [r3, #32]
 80016e4:	4bb2      	ldr	r3, [pc, #712]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 80016e6:	2104      	movs	r1, #4
 80016e8:	438a      	bics	r2, r1
 80016ea:	621a      	str	r2, [r3, #32]
 80016ec:	e01c      	b.n	8001728 <HAL_RCC_OscConfig+0x398>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b05      	cmp	r3, #5
 80016f4:	d10c      	bne.n	8001710 <HAL_RCC_OscConfig+0x380>
 80016f6:	4bae      	ldr	r3, [pc, #696]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 80016f8:	6a1a      	ldr	r2, [r3, #32]
 80016fa:	4bad      	ldr	r3, [pc, #692]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 80016fc:	2104      	movs	r1, #4
 80016fe:	430a      	orrs	r2, r1
 8001700:	621a      	str	r2, [r3, #32]
 8001702:	4bab      	ldr	r3, [pc, #684]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 8001704:	6a1a      	ldr	r2, [r3, #32]
 8001706:	4baa      	ldr	r3, [pc, #680]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 8001708:	2101      	movs	r1, #1
 800170a:	430a      	orrs	r2, r1
 800170c:	621a      	str	r2, [r3, #32]
 800170e:	e00b      	b.n	8001728 <HAL_RCC_OscConfig+0x398>
 8001710:	4ba7      	ldr	r3, [pc, #668]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 8001712:	6a1a      	ldr	r2, [r3, #32]
 8001714:	4ba6      	ldr	r3, [pc, #664]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 8001716:	2101      	movs	r1, #1
 8001718:	438a      	bics	r2, r1
 800171a:	621a      	str	r2, [r3, #32]
 800171c:	4ba4      	ldr	r3, [pc, #656]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 800171e:	6a1a      	ldr	r2, [r3, #32]
 8001720:	4ba3      	ldr	r3, [pc, #652]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 8001722:	2104      	movs	r1, #4
 8001724:	438a      	bics	r2, r1
 8001726:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d014      	beq.n	800175a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001730:	f7ff f9fc 	bl	8000b2c <HAL_GetTick>
 8001734:	0003      	movs	r3, r0
 8001736:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001738:	e009      	b.n	800174e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800173a:	f7ff f9f7 	bl	8000b2c <HAL_GetTick>
 800173e:	0002      	movs	r2, r0
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	4a9b      	ldr	r2, [pc, #620]	; (80019b4 <HAL_RCC_OscConfig+0x624>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e12b      	b.n	80019a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800174e:	4b98      	ldr	r3, [pc, #608]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	2202      	movs	r2, #2
 8001754:	4013      	ands	r3, r2
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x3aa>
 8001758:	e013      	b.n	8001782 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175a:	f7ff f9e7 	bl	8000b2c <HAL_GetTick>
 800175e:	0003      	movs	r3, r0
 8001760:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001762:	e009      	b.n	8001778 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001764:	f7ff f9e2 	bl	8000b2c <HAL_GetTick>
 8001768:	0002      	movs	r2, r0
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	4a91      	ldr	r2, [pc, #580]	; (80019b4 <HAL_RCC_OscConfig+0x624>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e116      	b.n	80019a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001778:	4b8d      	ldr	r3, [pc, #564]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	2202      	movs	r2, #2
 800177e:	4013      	ands	r3, r2
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001782:	231f      	movs	r3, #31
 8001784:	18fb      	adds	r3, r7, r3
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d105      	bne.n	8001798 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800178c:	4b88      	ldr	r3, [pc, #544]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 800178e:	69da      	ldr	r2, [r3, #28]
 8001790:	4b87      	ldr	r3, [pc, #540]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 8001792:	4989      	ldr	r1, [pc, #548]	; (80019b8 <HAL_RCC_OscConfig+0x628>)
 8001794:	400a      	ands	r2, r1
 8001796:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2210      	movs	r2, #16
 800179e:	4013      	ands	r3, r2
 80017a0:	d063      	beq.n	800186a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d12a      	bne.n	8001800 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017aa:	4b81      	ldr	r3, [pc, #516]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 80017ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ae:	4b80      	ldr	r3, [pc, #512]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 80017b0:	2104      	movs	r1, #4
 80017b2:	430a      	orrs	r2, r1
 80017b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80017b6:	4b7e      	ldr	r3, [pc, #504]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 80017b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ba:	4b7d      	ldr	r3, [pc, #500]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 80017bc:	2101      	movs	r1, #1
 80017be:	430a      	orrs	r2, r1
 80017c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c2:	f7ff f9b3 	bl	8000b2c <HAL_GetTick>
 80017c6:	0003      	movs	r3, r0
 80017c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017cc:	f7ff f9ae 	bl	8000b2c <HAL_GetTick>
 80017d0:	0002      	movs	r2, r0
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e0e3      	b.n	80019a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017de:	4b74      	ldr	r3, [pc, #464]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 80017e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e2:	2202      	movs	r2, #2
 80017e4:	4013      	ands	r3, r2
 80017e6:	d0f1      	beq.n	80017cc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017e8:	4b71      	ldr	r3, [pc, #452]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 80017ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ec:	22f8      	movs	r2, #248	; 0xf8
 80017ee:	4393      	bics	r3, r2
 80017f0:	0019      	movs	r1, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	00da      	lsls	r2, r3, #3
 80017f8:	4b6d      	ldr	r3, [pc, #436]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 80017fa:	430a      	orrs	r2, r1
 80017fc:	635a      	str	r2, [r3, #52]	; 0x34
 80017fe:	e034      	b.n	800186a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	3305      	adds	r3, #5
 8001806:	d111      	bne.n	800182c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001808:	4b69      	ldr	r3, [pc, #420]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 800180a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800180c:	4b68      	ldr	r3, [pc, #416]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 800180e:	2104      	movs	r1, #4
 8001810:	438a      	bics	r2, r1
 8001812:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001814:	4b66      	ldr	r3, [pc, #408]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 8001816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001818:	22f8      	movs	r2, #248	; 0xf8
 800181a:	4393      	bics	r3, r2
 800181c:	0019      	movs	r1, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	00da      	lsls	r2, r3, #3
 8001824:	4b62      	ldr	r3, [pc, #392]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 8001826:	430a      	orrs	r2, r1
 8001828:	635a      	str	r2, [r3, #52]	; 0x34
 800182a:	e01e      	b.n	800186a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800182c:	4b60      	ldr	r3, [pc, #384]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 800182e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001830:	4b5f      	ldr	r3, [pc, #380]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 8001832:	2104      	movs	r1, #4
 8001834:	430a      	orrs	r2, r1
 8001836:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001838:	4b5d      	ldr	r3, [pc, #372]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 800183a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800183c:	4b5c      	ldr	r3, [pc, #368]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 800183e:	2101      	movs	r1, #1
 8001840:	438a      	bics	r2, r1
 8001842:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001844:	f7ff f972 	bl	8000b2c <HAL_GetTick>
 8001848:	0003      	movs	r3, r0
 800184a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800184e:	f7ff f96d 	bl	8000b2c <HAL_GetTick>
 8001852:	0002      	movs	r2, r0
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e0a2      	b.n	80019a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001860:	4b53      	ldr	r3, [pc, #332]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 8001862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001864:	2202      	movs	r2, #2
 8001866:	4013      	ands	r3, r2
 8001868:	d1f1      	bne.n	800184e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d100      	bne.n	8001874 <HAL_RCC_OscConfig+0x4e4>
 8001872:	e097      	b.n	80019a4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001874:	4b4e      	ldr	r3, [pc, #312]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	220c      	movs	r2, #12
 800187a:	4013      	ands	r3, r2
 800187c:	2b08      	cmp	r3, #8
 800187e:	d100      	bne.n	8001882 <HAL_RCC_OscConfig+0x4f2>
 8001880:	e06b      	b.n	800195a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d14c      	bne.n	8001924 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188a:	4b49      	ldr	r3, [pc, #292]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	4b48      	ldr	r3, [pc, #288]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 8001890:	494a      	ldr	r1, [pc, #296]	; (80019bc <HAL_RCC_OscConfig+0x62c>)
 8001892:	400a      	ands	r2, r1
 8001894:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001896:	f7ff f949 	bl	8000b2c <HAL_GetTick>
 800189a:	0003      	movs	r3, r0
 800189c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a0:	f7ff f944 	bl	8000b2c <HAL_GetTick>
 80018a4:	0002      	movs	r2, r0
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e079      	b.n	80019a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b2:	4b3f      	ldr	r3, [pc, #252]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	049b      	lsls	r3, r3, #18
 80018ba:	4013      	ands	r3, r2
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018be:	4b3c      	ldr	r3, [pc, #240]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	220f      	movs	r2, #15
 80018c4:	4393      	bics	r3, r2
 80018c6:	0019      	movs	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018cc:	4b38      	ldr	r3, [pc, #224]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 80018ce:	430a      	orrs	r2, r1
 80018d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80018d2:	4b37      	ldr	r3, [pc, #220]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4a3a      	ldr	r2, [pc, #232]	; (80019c0 <HAL_RCC_OscConfig+0x630>)
 80018d8:	4013      	ands	r3, r2
 80018da:	0019      	movs	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	431a      	orrs	r2, r3
 80018e6:	4b32      	ldr	r3, [pc, #200]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 80018e8:	430a      	orrs	r2, r1
 80018ea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ec:	4b30      	ldr	r3, [pc, #192]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b2f      	ldr	r3, [pc, #188]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 80018f2:	2180      	movs	r1, #128	; 0x80
 80018f4:	0449      	lsls	r1, r1, #17
 80018f6:	430a      	orrs	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fa:	f7ff f917 	bl	8000b2c <HAL_GetTick>
 80018fe:	0003      	movs	r3, r0
 8001900:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001904:	f7ff f912 	bl	8000b2c <HAL_GetTick>
 8001908:	0002      	movs	r2, r0
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e047      	b.n	80019a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001916:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	049b      	lsls	r3, r3, #18
 800191e:	4013      	ands	r3, r2
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x574>
 8001922:	e03f      	b.n	80019a4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001924:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 800192a:	4924      	ldr	r1, [pc, #144]	; (80019bc <HAL_RCC_OscConfig+0x62c>)
 800192c:	400a      	ands	r2, r1
 800192e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff f8fc 	bl	8000b2c <HAL_GetTick>
 8001934:	0003      	movs	r3, r0
 8001936:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800193a:	f7ff f8f7 	bl	8000b2c <HAL_GetTick>
 800193e:	0002      	movs	r2, r0
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e02c      	b.n	80019a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800194c:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	049b      	lsls	r3, r3, #18
 8001954:	4013      	ands	r3, r2
 8001956:	d1f0      	bne.n	800193a <HAL_RCC_OscConfig+0x5aa>
 8001958:	e024      	b.n	80019a4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d101      	bne.n	8001966 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e01f      	b.n	80019a6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001966:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800196c:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <HAL_RCC_OscConfig+0x620>)
 800196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001970:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	025b      	lsls	r3, r3, #9
 8001978:	401a      	ands	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	429a      	cmp	r2, r3
 8001980:	d10e      	bne.n	80019a0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	220f      	movs	r2, #15
 8001986:	401a      	ands	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800198c:	429a      	cmp	r2, r3
 800198e:	d107      	bne.n	80019a0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	23f0      	movs	r3, #240	; 0xf0
 8001994:	039b      	lsls	r3, r3, #14
 8001996:	401a      	ands	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800199c:	429a      	cmp	r2, r3
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	0018      	movs	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b008      	add	sp, #32
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	40021000 	.word	0x40021000
 80019b4:	00001388 	.word	0x00001388
 80019b8:	efffffff 	.word	0xefffffff
 80019bc:	feffffff 	.word	0xfeffffff
 80019c0:	ffc2ffff 	.word	0xffc2ffff

080019c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0b3      	b.n	8001b40 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019d8:	4b5b      	ldr	r3, [pc, #364]	; (8001b48 <HAL_RCC_ClockConfig+0x184>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2201      	movs	r2, #1
 80019de:	4013      	ands	r3, r2
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d911      	bls.n	8001a0a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e6:	4b58      	ldr	r3, [pc, #352]	; (8001b48 <HAL_RCC_ClockConfig+0x184>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2201      	movs	r2, #1
 80019ec:	4393      	bics	r3, r2
 80019ee:	0019      	movs	r1, r3
 80019f0:	4b55      	ldr	r3, [pc, #340]	; (8001b48 <HAL_RCC_ClockConfig+0x184>)
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f8:	4b53      	ldr	r3, [pc, #332]	; (8001b48 <HAL_RCC_ClockConfig+0x184>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2201      	movs	r2, #1
 80019fe:	4013      	ands	r3, r2
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d001      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e09a      	b.n	8001b40 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2202      	movs	r2, #2
 8001a10:	4013      	ands	r3, r2
 8001a12:	d015      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2204      	movs	r2, #4
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d006      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a1e:	4b4b      	ldr	r3, [pc, #300]	; (8001b4c <HAL_RCC_ClockConfig+0x188>)
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	4b4a      	ldr	r3, [pc, #296]	; (8001b4c <HAL_RCC_ClockConfig+0x188>)
 8001a24:	21e0      	movs	r1, #224	; 0xe0
 8001a26:	00c9      	lsls	r1, r1, #3
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a2c:	4b47      	ldr	r3, [pc, #284]	; (8001b4c <HAL_RCC_ClockConfig+0x188>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	22f0      	movs	r2, #240	; 0xf0
 8001a32:	4393      	bics	r3, r2
 8001a34:	0019      	movs	r1, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	4b44      	ldr	r3, [pc, #272]	; (8001b4c <HAL_RCC_ClockConfig+0x188>)
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2201      	movs	r2, #1
 8001a46:	4013      	ands	r3, r2
 8001a48:	d040      	beq.n	8001acc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d107      	bne.n	8001a62 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a52:	4b3e      	ldr	r3, [pc, #248]	; (8001b4c <HAL_RCC_ClockConfig+0x188>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	2380      	movs	r3, #128	; 0x80
 8001a58:	029b      	lsls	r3, r3, #10
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d114      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e06e      	b.n	8001b40 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d107      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6a:	4b38      	ldr	r3, [pc, #224]	; (8001b4c <HAL_RCC_ClockConfig+0x188>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	049b      	lsls	r3, r3, #18
 8001a72:	4013      	ands	r3, r2
 8001a74:	d108      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e062      	b.n	8001b40 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7a:	4b34      	ldr	r3, [pc, #208]	; (8001b4c <HAL_RCC_ClockConfig+0x188>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	4013      	ands	r3, r2
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e05b      	b.n	8001b40 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a88:	4b30      	ldr	r3, [pc, #192]	; (8001b4c <HAL_RCC_ClockConfig+0x188>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	4393      	bics	r3, r2
 8001a90:	0019      	movs	r1, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <HAL_RCC_ClockConfig+0x188>)
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a9c:	f7ff f846 	bl	8000b2c <HAL_GetTick>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa4:	e009      	b.n	8001aba <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa6:	f7ff f841 	bl	8000b2c <HAL_GetTick>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	4a27      	ldr	r2, [pc, #156]	; (8001b50 <HAL_RCC_ClockConfig+0x18c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e042      	b.n	8001b40 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aba:	4b24      	ldr	r3, [pc, #144]	; (8001b4c <HAL_RCC_ClockConfig+0x188>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	220c      	movs	r2, #12
 8001ac0:	401a      	ands	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d1ec      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001acc:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <HAL_RCC_ClockConfig+0x184>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d211      	bcs.n	8001afe <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ada:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <HAL_RCC_ClockConfig+0x184>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	4393      	bics	r3, r2
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <HAL_RCC_ClockConfig+0x184>)
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aec:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <HAL_RCC_ClockConfig+0x184>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2201      	movs	r2, #1
 8001af2:	4013      	ands	r3, r2
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d001      	beq.n	8001afe <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e020      	b.n	8001b40 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2204      	movs	r2, #4
 8001b04:	4013      	ands	r3, r2
 8001b06:	d009      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b08:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <HAL_RCC_ClockConfig+0x188>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	4a11      	ldr	r2, [pc, #68]	; (8001b54 <HAL_RCC_ClockConfig+0x190>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	0019      	movs	r1, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <HAL_RCC_ClockConfig+0x188>)
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b1c:	f000 f820 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 8001b20:	0001      	movs	r1, r0
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_RCC_ClockConfig+0x188>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	091b      	lsrs	r3, r3, #4
 8001b28:	220f      	movs	r2, #15
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <HAL_RCC_ClockConfig+0x194>)
 8001b2e:	5cd3      	ldrb	r3, [r2, r3]
 8001b30:	000a      	movs	r2, r1
 8001b32:	40da      	lsrs	r2, r3
 8001b34:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_RCC_ClockConfig+0x198>)
 8001b36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b38:	2003      	movs	r0, #3
 8001b3a:	f7fe ffb1 	bl	8000aa0 <HAL_InitTick>
  
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b004      	add	sp, #16
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40022000 	.word	0x40022000
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	00001388 	.word	0x00001388
 8001b54:	fffff8ff 	.word	0xfffff8ff
 8001b58:	08003190 	.word	0x08003190
 8001b5c:	20000000 	.word	0x20000000

08001b60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001b7a:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	220c      	movs	r2, #12
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d002      	beq.n	8001b90 <HAL_RCC_GetSysClockFreq+0x30>
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d003      	beq.n	8001b96 <HAL_RCC_GetSysClockFreq+0x36>
 8001b8e:	e02c      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b90:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b92:	613b      	str	r3, [r7, #16]
      break;
 8001b94:	e02c      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	0c9b      	lsrs	r3, r3, #18
 8001b9a:	220f      	movs	r2, #15
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	4a19      	ldr	r2, [pc, #100]	; (8001c04 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ba0:	5cd3      	ldrb	r3, [r2, r3]
 8001ba2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001ba4:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	220f      	movs	r2, #15
 8001baa:	4013      	ands	r3, r2
 8001bac:	4a16      	ldr	r2, [pc, #88]	; (8001c08 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001bae:	5cd3      	ldrb	r3, [r2, r3]
 8001bb0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	025b      	lsls	r3, r3, #9
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d009      	beq.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bbc:	68b9      	ldr	r1, [r7, #8]
 8001bbe:	4810      	ldr	r0, [pc, #64]	; (8001c00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bc0:	f7fe faaa 	bl	8000118 <__udivsi3>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	001a      	movs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4353      	muls	r3, r2
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	e009      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	000a      	movs	r2, r1
 8001bd4:	0152      	lsls	r2, r2, #5
 8001bd6:	1a52      	subs	r2, r2, r1
 8001bd8:	0193      	lsls	r3, r2, #6
 8001bda:	1a9b      	subs	r3, r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	185b      	adds	r3, r3, r1
 8001be0:	021b      	lsls	r3, r3, #8
 8001be2:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	613b      	str	r3, [r7, #16]
      break;
 8001be8:	e002      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bea:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bec:	613b      	str	r3, [r7, #16]
      break;
 8001bee:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001bf0:	693b      	ldr	r3, [r7, #16]
}
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	b006      	add	sp, #24
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	007a1200 	.word	0x007a1200
 8001c04:	080031a8 	.word	0x080031a8
 8001c08:	080031b8 	.word	0x080031b8

08001c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c10:	4b02      	ldr	r3, [pc, #8]	; (8001c1c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	0018      	movs	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	20000000 	.word	0x20000000

08001c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001c24:	f7ff fff2 	bl	8001c0c <HAL_RCC_GetHCLKFreq>
 8001c28:	0001      	movs	r1, r0
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	0a1b      	lsrs	r3, r3, #8
 8001c30:	2207      	movs	r2, #7
 8001c32:	4013      	ands	r3, r2
 8001c34:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c36:	5cd3      	ldrb	r3, [r2, r3]
 8001c38:	40d9      	lsrs	r1, r3
 8001c3a:	000b      	movs	r3, r1
}    
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	40021000 	.word	0x40021000
 8001c48:	080031a0 	.word	0x080031a0

08001c4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	025b      	lsls	r3, r3, #9
 8001c64:	4013      	ands	r3, r2
 8001c66:	d100      	bne.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001c68:	e08e      	b.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001c6a:	2017      	movs	r0, #23
 8001c6c:	183b      	adds	r3, r7, r0
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c72:	4b57      	ldr	r3, [pc, #348]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c74:	69da      	ldr	r2, [r3, #28]
 8001c76:	2380      	movs	r3, #128	; 0x80
 8001c78:	055b      	lsls	r3, r3, #21
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d110      	bne.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	4b54      	ldr	r3, [pc, #336]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c80:	69da      	ldr	r2, [r3, #28]
 8001c82:	4b53      	ldr	r3, [pc, #332]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c84:	2180      	movs	r1, #128	; 0x80
 8001c86:	0549      	lsls	r1, r1, #21
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	61da      	str	r2, [r3, #28]
 8001c8c:	4b50      	ldr	r3, [pc, #320]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c8e:	69da      	ldr	r2, [r3, #28]
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	055b      	lsls	r3, r3, #21
 8001c94:	4013      	ands	r3, r2
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9a:	183b      	adds	r3, r7, r0
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca0:	4b4c      	ldr	r3, [pc, #304]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d11a      	bne.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cac:	4b49      	ldr	r3, [pc, #292]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b48      	ldr	r3, [pc, #288]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001cb2:	2180      	movs	r1, #128	; 0x80
 8001cb4:	0049      	lsls	r1, r1, #1
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cba:	f7fe ff37 	bl	8000b2c <HAL_GetTick>
 8001cbe:	0003      	movs	r3, r0
 8001cc0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc4:	f7fe ff32 	bl	8000b2c <HAL_GetTick>
 8001cc8:	0002      	movs	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	; 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e077      	b.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd6:	4b3f      	ldr	r3, [pc, #252]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ce2:	4b3b      	ldr	r3, [pc, #236]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ce4:	6a1a      	ldr	r2, [r3, #32]
 8001ce6:	23c0      	movs	r3, #192	; 0xc0
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4013      	ands	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d034      	beq.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	23c0      	movs	r3, #192	; 0xc0
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d02c      	beq.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d04:	4b32      	ldr	r3, [pc, #200]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	4a33      	ldr	r2, [pc, #204]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d0e:	4b30      	ldr	r3, [pc, #192]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d10:	6a1a      	ldr	r2, [r3, #32]
 8001d12:	4b2f      	ldr	r3, [pc, #188]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d14:	2180      	movs	r1, #128	; 0x80
 8001d16:	0249      	lsls	r1, r1, #9
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d1c:	4b2c      	ldr	r3, [pc, #176]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d1e:	6a1a      	ldr	r2, [r3, #32]
 8001d20:	4b2b      	ldr	r3, [pc, #172]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d22:	492e      	ldr	r1, [pc, #184]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001d24:	400a      	ands	r2, r1
 8001d26:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d28:	4b29      	ldr	r3, [pc, #164]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2201      	movs	r2, #1
 8001d32:	4013      	ands	r3, r2
 8001d34:	d013      	beq.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d36:	f7fe fef9 	bl	8000b2c <HAL_GetTick>
 8001d3a:	0003      	movs	r3, r0
 8001d3c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3e:	e009      	b.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d40:	f7fe fef4 	bl	8000b2c <HAL_GetTick>
 8001d44:	0002      	movs	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	4a25      	ldr	r2, [pc, #148]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e038      	b.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d54:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	2202      	movs	r2, #2
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	4a1d      	ldr	r2, [pc, #116]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	0019      	movs	r1, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d72:	2317      	movs	r3, #23
 8001d74:	18fb      	adds	r3, r7, r3
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d105      	bne.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d7c:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d7e:	69da      	ldr	r2, [r3, #28]
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d82:	4918      	ldr	r1, [pc, #96]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001d84:	400a      	ands	r2, r1
 8001d86:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d009      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d92:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	2203      	movs	r2, #3
 8001d98:	4393      	bics	r3, r2
 8001d9a:	0019      	movs	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001da2:	430a      	orrs	r2, r1
 8001da4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2220      	movs	r2, #32
 8001dac:	4013      	ands	r3, r2
 8001dae:	d009      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001db0:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	2210      	movs	r2, #16
 8001db6:	4393      	bics	r3, r2
 8001db8:	0019      	movs	r1, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b006      	add	sp, #24
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40007000 	.word	0x40007000
 8001dd8:	fffffcff 	.word	0xfffffcff
 8001ddc:	fffeffff 	.word	0xfffeffff
 8001de0:	00001388 	.word	0x00001388
 8001de4:	efffffff 	.word	0xefffffff

08001de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e042      	b.n	8001e80 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	223d      	movs	r2, #61	; 0x3d
 8001dfe:	5c9b      	ldrb	r3, [r3, r2]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d107      	bne.n	8001e16 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	223c      	movs	r2, #60	; 0x3c
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	0018      	movs	r0, r3
 8001e12:	f7fe fca3 	bl	800075c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	223d      	movs	r2, #61	; 0x3d
 8001e1a:	2102      	movs	r1, #2
 8001e1c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3304      	adds	r3, #4
 8001e26:	0019      	movs	r1, r3
 8001e28:	0010      	movs	r0, r2
 8001e2a:	f000 f8b1 	bl	8001f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2246      	movs	r2, #70	; 0x46
 8001e32:	2101      	movs	r1, #1
 8001e34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	223e      	movs	r2, #62	; 0x3e
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	5499      	strb	r1, [r3, r2]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	223f      	movs	r2, #63	; 0x3f
 8001e42:	2101      	movs	r1, #1
 8001e44:	5499      	strb	r1, [r3, r2]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2240      	movs	r2, #64	; 0x40
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	5499      	strb	r1, [r3, r2]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2241      	movs	r2, #65	; 0x41
 8001e52:	2101      	movs	r1, #1
 8001e54:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2242      	movs	r2, #66	; 0x42
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	5499      	strb	r1, [r3, r2]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2243      	movs	r2, #67	; 0x43
 8001e62:	2101      	movs	r1, #1
 8001e64:	5499      	strb	r1, [r3, r2]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2244      	movs	r2, #68	; 0x44
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	5499      	strb	r1, [r3, r2]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2245      	movs	r2, #69	; 0x45
 8001e72:	2101      	movs	r1, #1
 8001e74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	223d      	movs	r2, #61	; 0x3d
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	0018      	movs	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b002      	add	sp, #8
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	223d      	movs	r2, #61	; 0x3d
 8001e94:	5c9b      	ldrb	r3, [r3, r2]
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d001      	beq.n	8001ea0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e028      	b.n	8001ef2 <HAL_TIM_Base_Start+0x6a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	223d      	movs	r2, #61	; 0x3d
 8001ea4:	2102      	movs	r1, #2
 8001ea6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a13      	ldr	r2, [pc, #76]	; (8001efc <HAL_TIM_Base_Start+0x74>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d004      	beq.n	8001ebc <HAL_TIM_Base_Start+0x34>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a12      	ldr	r2, [pc, #72]	; (8001f00 <HAL_TIM_Base_Start+0x78>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d111      	bne.n	8001ee0 <HAL_TIM_Base_Start+0x58>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2207      	movs	r2, #7
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b06      	cmp	r3, #6
 8001ecc:	d010      	beq.n	8001ef0 <HAL_TIM_Base_Start+0x68>
    {
      __HAL_TIM_ENABLE(htim);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2101      	movs	r1, #1
 8001eda:	430a      	orrs	r2, r1
 8001edc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ede:	e007      	b.n	8001ef0 <HAL_TIM_Base_Start+0x68>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2101      	movs	r1, #1
 8001eec:	430a      	orrs	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b004      	add	sp, #16
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	40012c00 	.word	0x40012c00
 8001f00:	40000400 	.word	0x40000400

08001f04 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	223c      	movs	r2, #60	; 0x3c
 8001f12:	5c9b      	ldrb	r3, [r3, r2]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <HAL_TIM_SlaveConfigSynchro+0x18>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e032      	b.n	8001f82 <HAL_TIM_SlaveConfigSynchro+0x7e>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	223c      	movs	r2, #60	; 0x3c
 8001f20:	2101      	movs	r1, #1
 8001f22:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	223d      	movs	r2, #61	; 0x3d
 8001f28:	2102      	movs	r1, #2
 8001f2a:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	0011      	movs	r1, r2
 8001f32:	0018      	movs	r0, r3
 8001f34:	f000 f898 	bl	8002068 <TIM_SlaveTimer_SetConfig>
 8001f38:	1e03      	subs	r3, r0, #0
 8001f3a:	d009      	beq.n	8001f50 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	223d      	movs	r2, #61	; 0x3d
 8001f40:	2101      	movs	r1, #1
 8001f42:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	223c      	movs	r2, #60	; 0x3c
 8001f48:	2100      	movs	r1, #0
 8001f4a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e018      	b.n	8001f82 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2140      	movs	r1, #64	; 0x40
 8001f5c:	438a      	bics	r2, r1
 8001f5e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4908      	ldr	r1, [pc, #32]	; (8001f8c <HAL_TIM_SlaveConfigSynchro+0x88>)
 8001f6c:	400a      	ands	r2, r1
 8001f6e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	223d      	movs	r2, #61	; 0x3d
 8001f74:	2101      	movs	r1, #1
 8001f76:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	223c      	movs	r2, #60	; 0x3c
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	0018      	movs	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b002      	add	sp, #8
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	ffffbfff 	.word	0xffffbfff

08001f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a2b      	ldr	r2, [pc, #172]	; (8002050 <TIM_Base_SetConfig+0xc0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d003      	beq.n	8001fb0 <TIM_Base_SetConfig+0x20>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a2a      	ldr	r2, [pc, #168]	; (8002054 <TIM_Base_SetConfig+0xc4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d108      	bne.n	8001fc2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2270      	movs	r2, #112	; 0x70
 8001fb4:	4393      	bics	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a22      	ldr	r2, [pc, #136]	; (8002050 <TIM_Base_SetConfig+0xc0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00f      	beq.n	8001fea <TIM_Base_SetConfig+0x5a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a21      	ldr	r2, [pc, #132]	; (8002054 <TIM_Base_SetConfig+0xc4>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d00b      	beq.n	8001fea <TIM_Base_SetConfig+0x5a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a20      	ldr	r2, [pc, #128]	; (8002058 <TIM_Base_SetConfig+0xc8>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d007      	beq.n	8001fea <TIM_Base_SetConfig+0x5a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a1f      	ldr	r2, [pc, #124]	; (800205c <TIM_Base_SetConfig+0xcc>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d003      	beq.n	8001fea <TIM_Base_SetConfig+0x5a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a1e      	ldr	r2, [pc, #120]	; (8002060 <TIM_Base_SetConfig+0xd0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d108      	bne.n	8001ffc <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4a1d      	ldr	r2, [pc, #116]	; (8002064 <TIM_Base_SetConfig+0xd4>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2280      	movs	r2, #128	; 0x80
 8002000:	4393      	bics	r3, r2
 8002002:	001a      	movs	r2, r3
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	4313      	orrs	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <TIM_Base_SetConfig+0xc0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d007      	beq.n	800203a <TIM_Base_SetConfig+0xaa>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a0b      	ldr	r2, [pc, #44]	; (800205c <TIM_Base_SetConfig+0xcc>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d003      	beq.n	800203a <TIM_Base_SetConfig+0xaa>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <TIM_Base_SetConfig+0xd0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d103      	bne.n	8002042 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	691a      	ldr	r2, [r3, #16]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	615a      	str	r2, [r3, #20]
}
 8002048:	46c0      	nop			; (mov r8, r8)
 800204a:	46bd      	mov	sp, r7
 800204c:	b004      	add	sp, #16
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40012c00 	.word	0x40012c00
 8002054:	40000400 	.word	0x40000400
 8002058:	40002000 	.word	0x40002000
 800205c:	40014400 	.word	0x40014400
 8002060:	40014800 	.word	0x40014800
 8002064:	fffffcff 	.word	0xfffffcff

08002068 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002072:	2317      	movs	r3, #23
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	2200      	movs	r2, #0
 8002078:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	2270      	movs	r2, #112	; 0x70
 8002086:	4393      	bics	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	2207      	movs	r2, #7
 8002098:	4393      	bics	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b70      	cmp	r3, #112	; 0x70
 80020b4:	d015      	beq.n	80020e2 <TIM_SlaveTimer_SetConfig+0x7a>
 80020b6:	d900      	bls.n	80020ba <TIM_SlaveTimer_SetConfig+0x52>
 80020b8:	e05b      	b.n	8002172 <TIM_SlaveTimer_SetConfig+0x10a>
 80020ba:	2b60      	cmp	r3, #96	; 0x60
 80020bc:	d04f      	beq.n	800215e <TIM_SlaveTimer_SetConfig+0xf6>
 80020be:	d858      	bhi.n	8002172 <TIM_SlaveTimer_SetConfig+0x10a>
 80020c0:	2b50      	cmp	r3, #80	; 0x50
 80020c2:	d042      	beq.n	800214a <TIM_SlaveTimer_SetConfig+0xe2>
 80020c4:	d855      	bhi.n	8002172 <TIM_SlaveTimer_SetConfig+0x10a>
 80020c6:	2b40      	cmp	r3, #64	; 0x40
 80020c8:	d016      	beq.n	80020f8 <TIM_SlaveTimer_SetConfig+0x90>
 80020ca:	d852      	bhi.n	8002172 <TIM_SlaveTimer_SetConfig+0x10a>
 80020cc:	2b30      	cmp	r3, #48	; 0x30
 80020ce:	d055      	beq.n	800217c <TIM_SlaveTimer_SetConfig+0x114>
 80020d0:	d84f      	bhi.n	8002172 <TIM_SlaveTimer_SetConfig+0x10a>
 80020d2:	2b20      	cmp	r3, #32
 80020d4:	d052      	beq.n	800217c <TIM_SlaveTimer_SetConfig+0x114>
 80020d6:	d84c      	bhi.n	8002172 <TIM_SlaveTimer_SetConfig+0x10a>
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d04f      	beq.n	800217c <TIM_SlaveTimer_SetConfig+0x114>
 80020dc:	2b10      	cmp	r3, #16
 80020de:	d04d      	beq.n	800217c <TIM_SlaveTimer_SetConfig+0x114>
 80020e0:	e047      	b.n	8002172 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6818      	ldr	r0, [r3, #0]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68d9      	ldr	r1, [r3, #12]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f000 f8ab 	bl	800224c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80020f6:	e042      	b.n	800217e <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b05      	cmp	r3, #5
 80020fe:	d101      	bne.n	8002104 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e03f      	b.n	8002184 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6a1a      	ldr	r2, [r3, #32]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2101      	movs	r1, #1
 8002118:	438a      	bics	r2, r1
 800211a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	22f0      	movs	r2, #240	; 0xf0
 8002128:	4393      	bics	r3, r2
 800212a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	4313      	orrs	r3, r2
 8002136:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	621a      	str	r2, [r3, #32]
      break;
 8002148:	e019      	b.n	800217e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6818      	ldr	r0, [r3, #0]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	6899      	ldr	r1, [r3, #8]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	001a      	movs	r2, r3
 8002158:	f000 f818 	bl	800218c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800215c:	e00f      	b.n	800217e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	6899      	ldr	r1, [r3, #8]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	001a      	movs	r2, r3
 800216c:	f000 f83c 	bl	80021e8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8002170:	e005      	b.n	800217e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002172:	2317      	movs	r3, #23
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
      break;
 800217a:	e000      	b.n	800217e <TIM_SlaveTimer_SetConfig+0x116>
      break;
 800217c:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 800217e:	2317      	movs	r3, #23
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	781b      	ldrb	r3, [r3, #0]
}
 8002184:	0018      	movs	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	b006      	add	sp, #24
 800218a:	bd80      	pop	{r7, pc}

0800218c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	2201      	movs	r2, #1
 80021a4:	4393      	bics	r3, r2
 80021a6:	001a      	movs	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	22f0      	movs	r2, #240	; 0xf0
 80021b6:	4393      	bics	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	220a      	movs	r2, #10
 80021c8:	4393      	bics	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	621a      	str	r2, [r3, #32]
}
 80021e0:	46c0      	nop			; (mov r8, r8)
 80021e2:	46bd      	mov	sp, r7
 80021e4:	b006      	add	sp, #24
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	2210      	movs	r2, #16
 80021fa:	4393      	bics	r3, r2
 80021fc:	001a      	movs	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	4a0d      	ldr	r2, [pc, #52]	; (8002248 <TIM_TI2_ConfigInputStage+0x60>)
 8002212:	4013      	ands	r3, r2
 8002214:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	031b      	lsls	r3, r3, #12
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	4313      	orrs	r3, r2
 800221e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	22a0      	movs	r2, #160	; 0xa0
 8002224:	4393      	bics	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	011b      	lsls	r3, r3, #4
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4313      	orrs	r3, r2
 8002230:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	621a      	str	r2, [r3, #32]
}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	46bd      	mov	sp, r7
 8002242:	b006      	add	sp, #24
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	ffff0fff 	.word	0xffff0fff

0800224c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
 8002258:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	4a09      	ldr	r2, [pc, #36]	; (8002288 <TIM_ETR_SetConfig+0x3c>)
 8002264:	4013      	ands	r3, r2
 8002266:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	021a      	lsls	r2, r3, #8
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	431a      	orrs	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	4313      	orrs	r3, r2
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	4313      	orrs	r3, r2
 8002278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	609a      	str	r2, [r3, #8]
}
 8002280:	46c0      	nop			; (mov r8, r8)
 8002282:	46bd      	mov	sp, r7
 8002284:	b006      	add	sp, #24
 8002286:	bd80      	pop	{r7, pc}
 8002288:	ffff00ff 	.word	0xffff00ff

0800228c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	223c      	movs	r2, #60	; 0x3c
 800229a:	5c9b      	ldrb	r3, [r3, r2]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d101      	bne.n	80022a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022a0:	2302      	movs	r3, #2
 80022a2:	e03c      	b.n	800231e <HAL_TIMEx_MasterConfigSynchronization+0x92>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	223c      	movs	r2, #60	; 0x3c
 80022a8:	2101      	movs	r1, #1
 80022aa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	223d      	movs	r2, #61	; 0x3d
 80022b0:	2102      	movs	r1, #2
 80022b2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2270      	movs	r2, #112	; 0x70
 80022c8:	4393      	bics	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a11      	ldr	r2, [pc, #68]	; (8002328 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d004      	beq.n	80022f2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0f      	ldr	r2, [pc, #60]	; (800232c <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d10c      	bne.n	800230c <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2280      	movs	r2, #128	; 0x80
 80022f6:	4393      	bics	r3, r2
 80022f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	4313      	orrs	r3, r2
 8002302:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	223d      	movs	r2, #61	; 0x3d
 8002310:	2101      	movs	r1, #1
 8002312:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	223c      	movs	r2, #60	; 0x3c
 8002318:	2100      	movs	r1, #0
 800231a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	0018      	movs	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	b004      	add	sp, #16
 8002324:	bd80      	pop	{r7, pc}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	40012c00 	.word	0x40012c00
 800232c:	40000400 	.word	0x40000400

08002330 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e044      	b.n	80023cc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002346:	2b00      	cmp	r3, #0
 8002348:	d107      	bne.n	800235a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2278      	movs	r2, #120	; 0x78
 800234e:	2100      	movs	r1, #0
 8002350:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	0018      	movs	r0, r3
 8002356:	f7fe fab9 	bl	80008cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2224      	movs	r2, #36	; 0x24
 800235e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2101      	movs	r1, #1
 800236c:	438a      	bics	r2, r1
 800236e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	0018      	movs	r0, r3
 8002374:	f000 f94a 	bl	800260c <UART_SetConfig>
 8002378:	0003      	movs	r3, r0
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e024      	b.n	80023cc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	0018      	movs	r0, r3
 800238e:	f000 fa65 	bl	800285c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	490d      	ldr	r1, [pc, #52]	; (80023d4 <HAL_UART_Init+0xa4>)
 800239e:	400a      	ands	r2, r1
 80023a0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2108      	movs	r1, #8
 80023ae:	438a      	bics	r2, r1
 80023b0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2101      	movs	r1, #1
 80023be:	430a      	orrs	r2, r1
 80023c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	0018      	movs	r0, r3
 80023c6:	f000 fafd 	bl	80029c4 <UART_CheckIdleState>
 80023ca:	0003      	movs	r3, r0
}
 80023cc:	0018      	movs	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	b002      	add	sp, #8
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	fffff7ff 	.word	0xfffff7ff

080023d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08a      	sub	sp, #40	; 0x28
 80023dc:	af02      	add	r7, sp, #8
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	603b      	str	r3, [r7, #0]
 80023e4:	1dbb      	adds	r3, r7, #6
 80023e6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023ec:	2b20      	cmp	r3, #32
 80023ee:	d000      	beq.n	80023f2 <HAL_UART_Transmit+0x1a>
 80023f0:	e08d      	b.n	800250e <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_UART_Transmit+0x28>
 80023f8:	1dbb      	adds	r3, r7, #6
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e085      	b.n	8002510 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	015b      	lsls	r3, r3, #5
 800240c:	429a      	cmp	r2, r3
 800240e:	d109      	bne.n	8002424 <HAL_UART_Transmit+0x4c>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d105      	bne.n	8002424 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2201      	movs	r2, #1
 800241c:	4013      	ands	r3, r2
 800241e:	d001      	beq.n	8002424 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e075      	b.n	8002510 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2284      	movs	r2, #132	; 0x84
 8002428:	2100      	movs	r1, #0
 800242a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2221      	movs	r2, #33	; 0x21
 8002430:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002432:	f7fe fb7b 	bl	8000b2c <HAL_GetTick>
 8002436:	0003      	movs	r3, r0
 8002438:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1dba      	adds	r2, r7, #6
 800243e:	2150      	movs	r1, #80	; 0x50
 8002440:	8812      	ldrh	r2, [r2, #0]
 8002442:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	1dba      	adds	r2, r7, #6
 8002448:	2152      	movs	r1, #82	; 0x52
 800244a:	8812      	ldrh	r2, [r2, #0]
 800244c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	015b      	lsls	r3, r3, #5
 8002456:	429a      	cmp	r2, r3
 8002458:	d108      	bne.n	800246c <HAL_UART_Transmit+0x94>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d104      	bne.n	800246c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	e003      	b.n	8002474 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002470:	2300      	movs	r3, #0
 8002472:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002474:	e030      	b.n	80024d8 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	0013      	movs	r3, r2
 8002480:	2200      	movs	r2, #0
 8002482:	2180      	movs	r1, #128	; 0x80
 8002484:	f000 fb46 	bl	8002b14 <UART_WaitOnFlagUntilTimeout>
 8002488:	1e03      	subs	r3, r0, #0
 800248a:	d004      	beq.n	8002496 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2220      	movs	r2, #32
 8002490:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e03c      	b.n	8002510 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10b      	bne.n	80024b4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	881a      	ldrh	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	05d2      	lsls	r2, r2, #23
 80024a6:	0dd2      	lsrs	r2, r2, #23
 80024a8:	b292      	uxth	r2, r2
 80024aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	3302      	adds	r3, #2
 80024b0:	61bb      	str	r3, [r7, #24]
 80024b2:	e008      	b.n	80024c6 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	781a      	ldrb	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	b292      	uxth	r2, r2
 80024be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	3301      	adds	r3, #1
 80024c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2252      	movs	r2, #82	; 0x52
 80024ca:	5a9b      	ldrh	r3, [r3, r2]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b299      	uxth	r1, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2252      	movs	r2, #82	; 0x52
 80024d6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2252      	movs	r2, #82	; 0x52
 80024dc:	5a9b      	ldrh	r3, [r3, r2]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1c8      	bne.n	8002476 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	0013      	movs	r3, r2
 80024ee:	2200      	movs	r2, #0
 80024f0:	2140      	movs	r1, #64	; 0x40
 80024f2:	f000 fb0f 	bl	8002b14 <UART_WaitOnFlagUntilTimeout>
 80024f6:	1e03      	subs	r3, r0, #0
 80024f8:	d004      	beq.n	8002504 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2220      	movs	r2, #32
 80024fe:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e005      	b.n	8002510 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2220      	movs	r2, #32
 8002508:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	e000      	b.n	8002510 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800250e:	2302      	movs	r3, #2
  }
}
 8002510:	0018      	movs	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	b008      	add	sp, #32
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	1dbb      	adds	r3, r7, #6
 8002524:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2280      	movs	r2, #128	; 0x80
 800252a:	589b      	ldr	r3, [r3, r2]
 800252c:	2b20      	cmp	r3, #32
 800252e:	d145      	bne.n	80025bc <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_UART_Receive_DMA+0x26>
 8002536:	1dbb      	adds	r3, r7, #6
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e03d      	b.n	80025be <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	2380      	movs	r3, #128	; 0x80
 8002548:	015b      	lsls	r3, r3, #5
 800254a:	429a      	cmp	r2, r3
 800254c:	d109      	bne.n	8002562 <HAL_UART_Receive_DMA+0x4a>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d105      	bne.n	8002562 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2201      	movs	r2, #1
 800255a:	4013      	ands	r3, r2
 800255c:	d001      	beq.n	8002562 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e02d      	b.n	80025be <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	041b      	lsls	r3, r3, #16
 8002572:	4013      	ands	r3, r2
 8002574:	d019      	beq.n	80025aa <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002576:	f3ef 8310 	mrs	r3, PRIMASK
 800257a:	613b      	str	r3, [r7, #16]
  return(result);
 800257c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800257e:	61fb      	str	r3, [r7, #28]
 8002580:	2301      	movs	r3, #1
 8002582:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	f383 8810 	msr	PRIMASK, r3
}
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2180      	movs	r1, #128	; 0x80
 8002598:	04c9      	lsls	r1, r1, #19
 800259a:	430a      	orrs	r2, r1
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	f383 8810 	msr	PRIMASK, r3
}
 80025a8:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80025aa:	1dbb      	adds	r3, r7, #6
 80025ac:	881a      	ldrh	r2, [r3, #0]
 80025ae:	68b9      	ldr	r1, [r7, #8]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	0018      	movs	r0, r3
 80025b4:	f000 fb18 	bl	8002be8 <UART_Start_Receive_DMA>
 80025b8:	0003      	movs	r3, r0
 80025ba:	e000      	b.n	80025be <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80025bc:	2302      	movs	r3, #2
  }
}
 80025be:	0018      	movs	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b008      	add	sp, #32
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b002      	add	sp, #8
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	46bd      	mov	sp, r7
 80025e2:	b002      	add	sp, #8
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	46bd      	mov	sp, r7
 80025f2:	b002      	add	sp, #8
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	000a      	movs	r2, r1
 8002600:	1cbb      	adds	r3, r7, #2
 8002602:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002604:	46c0      	nop			; (mov r8, r8)
 8002606:	46bd      	mov	sp, r7
 8002608:	b002      	add	sp, #8
 800260a:	bd80      	pop	{r7, pc}

0800260c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002614:	231e      	movs	r3, #30
 8002616:	18fb      	adds	r3, r7, r3
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	4313      	orrs	r3, r2
 8002632:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a83      	ldr	r2, [pc, #524]	; (8002848 <UART_SetConfig+0x23c>)
 800263c:	4013      	ands	r3, r2
 800263e:	0019      	movs	r1, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	430a      	orrs	r2, r1
 8002648:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	4a7e      	ldr	r2, [pc, #504]	; (800284c <UART_SetConfig+0x240>)
 8002652:	4013      	ands	r3, r2
 8002654:	0019      	movs	r1, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	4313      	orrs	r3, r2
 8002670:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	4a75      	ldr	r2, [pc, #468]	; (8002850 <UART_SetConfig+0x244>)
 800267a:	4013      	ands	r3, r2
 800267c:	0019      	movs	r1, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	430a      	orrs	r2, r1
 8002686:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002688:	4b72      	ldr	r3, [pc, #456]	; (8002854 <UART_SetConfig+0x248>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	2203      	movs	r2, #3
 800268e:	4013      	ands	r3, r2
 8002690:	2b03      	cmp	r3, #3
 8002692:	d00d      	beq.n	80026b0 <UART_SetConfig+0xa4>
 8002694:	d81b      	bhi.n	80026ce <UART_SetConfig+0xc2>
 8002696:	2b02      	cmp	r3, #2
 8002698:	d014      	beq.n	80026c4 <UART_SetConfig+0xb8>
 800269a:	d818      	bhi.n	80026ce <UART_SetConfig+0xc2>
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <UART_SetConfig+0x9a>
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d00a      	beq.n	80026ba <UART_SetConfig+0xae>
 80026a4:	e013      	b.n	80026ce <UART_SetConfig+0xc2>
 80026a6:	231f      	movs	r3, #31
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]
 80026ae:	e012      	b.n	80026d6 <UART_SetConfig+0xca>
 80026b0:	231f      	movs	r3, #31
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	2202      	movs	r2, #2
 80026b6:	701a      	strb	r2, [r3, #0]
 80026b8:	e00d      	b.n	80026d6 <UART_SetConfig+0xca>
 80026ba:	231f      	movs	r3, #31
 80026bc:	18fb      	adds	r3, r7, r3
 80026be:	2204      	movs	r2, #4
 80026c0:	701a      	strb	r2, [r3, #0]
 80026c2:	e008      	b.n	80026d6 <UART_SetConfig+0xca>
 80026c4:	231f      	movs	r3, #31
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	2208      	movs	r2, #8
 80026ca:	701a      	strb	r2, [r3, #0]
 80026cc:	e003      	b.n	80026d6 <UART_SetConfig+0xca>
 80026ce:	231f      	movs	r3, #31
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	2210      	movs	r2, #16
 80026d4:	701a      	strb	r2, [r3, #0]
 80026d6:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69da      	ldr	r2, [r3, #28]
 80026dc:	2380      	movs	r3, #128	; 0x80
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d15c      	bne.n	800279e <UART_SetConfig+0x192>
  {
    switch (clocksource)
 80026e4:	231f      	movs	r3, #31
 80026e6:	18fb      	adds	r3, r7, r3
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d015      	beq.n	800271a <UART_SetConfig+0x10e>
 80026ee:	dc18      	bgt.n	8002722 <UART_SetConfig+0x116>
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d00d      	beq.n	8002710 <UART_SetConfig+0x104>
 80026f4:	dc15      	bgt.n	8002722 <UART_SetConfig+0x116>
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <UART_SetConfig+0xf4>
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d005      	beq.n	800270a <UART_SetConfig+0xfe>
 80026fe:	e010      	b.n	8002722 <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002700:	f7ff fa8e 	bl	8001c20 <HAL_RCC_GetPCLK1Freq>
 8002704:	0003      	movs	r3, r0
 8002706:	61bb      	str	r3, [r7, #24]
        break;
 8002708:	e012      	b.n	8002730 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800270a:	4b53      	ldr	r3, [pc, #332]	; (8002858 <UART_SetConfig+0x24c>)
 800270c:	61bb      	str	r3, [r7, #24]
        break;
 800270e:	e00f      	b.n	8002730 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002710:	f7ff fa26 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 8002714:	0003      	movs	r3, r0
 8002716:	61bb      	str	r3, [r7, #24]
        break;
 8002718:	e00a      	b.n	8002730 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800271a:	2380      	movs	r3, #128	; 0x80
 800271c:	021b      	lsls	r3, r3, #8
 800271e:	61bb      	str	r3, [r7, #24]
        break;
 8002720:	e006      	b.n	8002730 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002726:	231e      	movs	r3, #30
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	2201      	movs	r2, #1
 800272c:	701a      	strb	r2, [r3, #0]
        break;
 800272e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d100      	bne.n	8002738 <UART_SetConfig+0x12c>
 8002736:	e07a      	b.n	800282e <UART_SetConfig+0x222>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	005a      	lsls	r2, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	085b      	lsrs	r3, r3, #1
 8002742:	18d2      	adds	r2, r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	0019      	movs	r1, r3
 800274a:	0010      	movs	r0, r2
 800274c:	f7fd fce4 	bl	8000118 <__udivsi3>
 8002750:	0003      	movs	r3, r0
 8002752:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	2b0f      	cmp	r3, #15
 8002758:	d91c      	bls.n	8002794 <UART_SetConfig+0x188>
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	025b      	lsls	r3, r3, #9
 8002760:	429a      	cmp	r2, r3
 8002762:	d217      	bcs.n	8002794 <UART_SetConfig+0x188>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	b29a      	uxth	r2, r3
 8002768:	200e      	movs	r0, #14
 800276a:	183b      	adds	r3, r7, r0
 800276c:	210f      	movs	r1, #15
 800276e:	438a      	bics	r2, r1
 8002770:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	085b      	lsrs	r3, r3, #1
 8002776:	b29b      	uxth	r3, r3
 8002778:	2207      	movs	r2, #7
 800277a:	4013      	ands	r3, r2
 800277c:	b299      	uxth	r1, r3
 800277e:	183b      	adds	r3, r7, r0
 8002780:	183a      	adds	r2, r7, r0
 8002782:	8812      	ldrh	r2, [r2, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	183a      	adds	r2, r7, r0
 800278e:	8812      	ldrh	r2, [r2, #0]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	e04c      	b.n	800282e <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 8002794:	231e      	movs	r3, #30
 8002796:	18fb      	adds	r3, r7, r3
 8002798:	2201      	movs	r2, #1
 800279a:	701a      	strb	r2, [r3, #0]
 800279c:	e047      	b.n	800282e <UART_SetConfig+0x222>
      }
    }
  }
  else
  {
    switch (clocksource)
 800279e:	231f      	movs	r3, #31
 80027a0:	18fb      	adds	r3, r7, r3
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d015      	beq.n	80027d4 <UART_SetConfig+0x1c8>
 80027a8:	dc18      	bgt.n	80027dc <UART_SetConfig+0x1d0>
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d00d      	beq.n	80027ca <UART_SetConfig+0x1be>
 80027ae:	dc15      	bgt.n	80027dc <UART_SetConfig+0x1d0>
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <UART_SetConfig+0x1ae>
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d005      	beq.n	80027c4 <UART_SetConfig+0x1b8>
 80027b8:	e010      	b.n	80027dc <UART_SetConfig+0x1d0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027ba:	f7ff fa31 	bl	8001c20 <HAL_RCC_GetPCLK1Freq>
 80027be:	0003      	movs	r3, r0
 80027c0:	61bb      	str	r3, [r7, #24]
        break;
 80027c2:	e012      	b.n	80027ea <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027c4:	4b24      	ldr	r3, [pc, #144]	; (8002858 <UART_SetConfig+0x24c>)
 80027c6:	61bb      	str	r3, [r7, #24]
        break;
 80027c8:	e00f      	b.n	80027ea <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027ca:	f7ff f9c9 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 80027ce:	0003      	movs	r3, r0
 80027d0:	61bb      	str	r3, [r7, #24]
        break;
 80027d2:	e00a      	b.n	80027ea <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	021b      	lsls	r3, r3, #8
 80027d8:	61bb      	str	r3, [r7, #24]
        break;
 80027da:	e006      	b.n	80027ea <UART_SetConfig+0x1de>
      default:
        pclk = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80027e0:	231e      	movs	r3, #30
 80027e2:	18fb      	adds	r3, r7, r3
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
        break;
 80027e8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d01e      	beq.n	800282e <UART_SetConfig+0x222>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	085a      	lsrs	r2, r3, #1
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	18d2      	adds	r2, r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	0019      	movs	r1, r3
 8002800:	0010      	movs	r0, r2
 8002802:	f7fd fc89 	bl	8000118 <__udivsi3>
 8002806:	0003      	movs	r3, r0
 8002808:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	2b0f      	cmp	r3, #15
 800280e:	d90a      	bls.n	8002826 <UART_SetConfig+0x21a>
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	025b      	lsls	r3, r3, #9
 8002816:	429a      	cmp	r2, r3
 8002818:	d205      	bcs.n	8002826 <UART_SetConfig+0x21a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	b29a      	uxth	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	60da      	str	r2, [r3, #12]
 8002824:	e003      	b.n	800282e <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 8002826:	231e      	movs	r3, #30
 8002828:	18fb      	adds	r3, r7, r3
 800282a:	2201      	movs	r2, #1
 800282c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800283a:	231e      	movs	r3, #30
 800283c:	18fb      	adds	r3, r7, r3
 800283e:	781b      	ldrb	r3, [r3, #0]
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	b008      	add	sp, #32
 8002846:	bd80      	pop	{r7, pc}
 8002848:	ffff69f3 	.word	0xffff69f3
 800284c:	ffffcfff 	.word	0xffffcfff
 8002850:	fffff4ff 	.word	0xfffff4ff
 8002854:	40021000 	.word	0x40021000
 8002858:	007a1200 	.word	0x007a1200

0800285c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	2201      	movs	r2, #1
 800286a:	4013      	ands	r3, r2
 800286c:	d00b      	beq.n	8002886 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	4a4a      	ldr	r2, [pc, #296]	; (80029a0 <UART_AdvFeatureConfig+0x144>)
 8002876:	4013      	ands	r3, r2
 8002878:	0019      	movs	r1, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	2202      	movs	r2, #2
 800288c:	4013      	ands	r3, r2
 800288e:	d00b      	beq.n	80028a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4a43      	ldr	r2, [pc, #268]	; (80029a4 <UART_AdvFeatureConfig+0x148>)
 8002898:	4013      	ands	r3, r2
 800289a:	0019      	movs	r1, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	2204      	movs	r2, #4
 80028ae:	4013      	ands	r3, r2
 80028b0:	d00b      	beq.n	80028ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a3b      	ldr	r2, [pc, #236]	; (80029a8 <UART_AdvFeatureConfig+0x14c>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	0019      	movs	r1, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	2208      	movs	r2, #8
 80028d0:	4013      	ands	r3, r2
 80028d2:	d00b      	beq.n	80028ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4a34      	ldr	r2, [pc, #208]	; (80029ac <UART_AdvFeatureConfig+0x150>)
 80028dc:	4013      	ands	r3, r2
 80028de:	0019      	movs	r1, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	2210      	movs	r2, #16
 80028f2:	4013      	ands	r3, r2
 80028f4:	d00b      	beq.n	800290e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	4a2c      	ldr	r2, [pc, #176]	; (80029b0 <UART_AdvFeatureConfig+0x154>)
 80028fe:	4013      	ands	r3, r2
 8002900:	0019      	movs	r1, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	2220      	movs	r2, #32
 8002914:	4013      	ands	r3, r2
 8002916:	d00b      	beq.n	8002930 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	4a25      	ldr	r2, [pc, #148]	; (80029b4 <UART_AdvFeatureConfig+0x158>)
 8002920:	4013      	ands	r3, r2
 8002922:	0019      	movs	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	2240      	movs	r2, #64	; 0x40
 8002936:	4013      	ands	r3, r2
 8002938:	d01d      	beq.n	8002976 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	4a1d      	ldr	r2, [pc, #116]	; (80029b8 <UART_AdvFeatureConfig+0x15c>)
 8002942:	4013      	ands	r3, r2
 8002944:	0019      	movs	r1, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002956:	2380      	movs	r3, #128	; 0x80
 8002958:	035b      	lsls	r3, r3, #13
 800295a:	429a      	cmp	r2, r3
 800295c:	d10b      	bne.n	8002976 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	4a15      	ldr	r2, [pc, #84]	; (80029bc <UART_AdvFeatureConfig+0x160>)
 8002966:	4013      	ands	r3, r2
 8002968:	0019      	movs	r1, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	2280      	movs	r2, #128	; 0x80
 800297c:	4013      	ands	r3, r2
 800297e:	d00b      	beq.n	8002998 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <UART_AdvFeatureConfig+0x164>)
 8002988:	4013      	ands	r3, r2
 800298a:	0019      	movs	r1, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	605a      	str	r2, [r3, #4]
  }
}
 8002998:	46c0      	nop			; (mov r8, r8)
 800299a:	46bd      	mov	sp, r7
 800299c:	b002      	add	sp, #8
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	fffdffff 	.word	0xfffdffff
 80029a4:	fffeffff 	.word	0xfffeffff
 80029a8:	fffbffff 	.word	0xfffbffff
 80029ac:	ffff7fff 	.word	0xffff7fff
 80029b0:	ffffefff 	.word	0xffffefff
 80029b4:	ffffdfff 	.word	0xffffdfff
 80029b8:	ffefffff 	.word	0xffefffff
 80029bc:	ff9fffff 	.word	0xff9fffff
 80029c0:	fff7ffff 	.word	0xfff7ffff

080029c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b092      	sub	sp, #72	; 0x48
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2284      	movs	r2, #132	; 0x84
 80029d0:	2100      	movs	r1, #0
 80029d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029d4:	f7fe f8aa 	bl	8000b2c <HAL_GetTick>
 80029d8:	0003      	movs	r3, r0
 80029da:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2208      	movs	r2, #8
 80029e4:	4013      	ands	r3, r2
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d12c      	bne.n	8002a44 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ec:	2280      	movs	r2, #128	; 0x80
 80029ee:	0391      	lsls	r1, r2, #14
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	4a46      	ldr	r2, [pc, #280]	; (8002b0c <UART_CheckIdleState+0x148>)
 80029f4:	9200      	str	r2, [sp, #0]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f000 f88c 	bl	8002b14 <UART_WaitOnFlagUntilTimeout>
 80029fc:	1e03      	subs	r3, r0, #0
 80029fe:	d021      	beq.n	8002a44 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a00:	f3ef 8310 	mrs	r3, PRIMASK
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002a08:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a10:	f383 8810 	msr	PRIMASK, r3
}
 8002a14:	46c0      	nop			; (mov r8, r8)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2180      	movs	r1, #128	; 0x80
 8002a22:	438a      	bics	r2, r1
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2c:	f383 8810 	msr	PRIMASK, r3
}
 8002a30:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2220      	movs	r2, #32
 8002a36:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2278      	movs	r2, #120	; 0x78
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e05f      	b.n	8002b04 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d146      	bne.n	8002ae0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a54:	2280      	movs	r2, #128	; 0x80
 8002a56:	03d1      	lsls	r1, r2, #15
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	4a2c      	ldr	r2, [pc, #176]	; (8002b0c <UART_CheckIdleState+0x148>)
 8002a5c:	9200      	str	r2, [sp, #0]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f000 f858 	bl	8002b14 <UART_WaitOnFlagUntilTimeout>
 8002a64:	1e03      	subs	r3, r0, #0
 8002a66:	d03b      	beq.n	8002ae0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a68:	f3ef 8310 	mrs	r3, PRIMASK
 8002a6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a70:	637b      	str	r3, [r7, #52]	; 0x34
 8002a72:	2301      	movs	r3, #1
 8002a74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	f383 8810 	msr	PRIMASK, r3
}
 8002a7c:	46c0      	nop			; (mov r8, r8)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4921      	ldr	r1, [pc, #132]	; (8002b10 <UART_CheckIdleState+0x14c>)
 8002a8a:	400a      	ands	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f383 8810 	msr	PRIMASK, r3
}
 8002a98:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a9e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002aa0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa2:	633b      	str	r3, [r7, #48]	; 0x30
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f383 8810 	msr	PRIMASK, r3
}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689a      	ldr	r2, [r3, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2101      	movs	r1, #1
 8002abc:	438a      	bics	r2, r1
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	f383 8810 	msr	PRIMASK, r3
}
 8002aca:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2280      	movs	r2, #128	; 0x80
 8002ad0:	2120      	movs	r1, #32
 8002ad2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2278      	movs	r2, #120	; 0x78
 8002ad8:	2100      	movs	r1, #0
 8002ada:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e011      	b.n	8002b04 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2280      	movs	r2, #128	; 0x80
 8002aea:	2120      	movs	r1, #32
 8002aec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2278      	movs	r2, #120	; 0x78
 8002afe:	2100      	movs	r1, #0
 8002b00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	0018      	movs	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b010      	add	sp, #64	; 0x40
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	01ffffff 	.word	0x01ffffff
 8002b10:	fffffedf 	.word	0xfffffedf

08002b14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	1dfb      	adds	r3, r7, #7
 8002b22:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b24:	e04b      	b.n	8002bbe <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	d048      	beq.n	8002bbe <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b2c:	f7fd fffe 	bl	8000b2c <HAL_GetTick>
 8002b30:	0002      	movs	r2, r0
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d302      	bcc.n	8002b42 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e04b      	b.n	8002bde <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2204      	movs	r2, #4
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d035      	beq.n	8002bbe <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	2208      	movs	r2, #8
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d111      	bne.n	8002b84 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2208      	movs	r2, #8
 8002b66:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f000 f900 	bl	8002d70 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2284      	movs	r2, #132	; 0x84
 8002b74:	2108      	movs	r1, #8
 8002b76:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2278      	movs	r2, #120	; 0x78
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e02c      	b.n	8002bde <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	69da      	ldr	r2, [r3, #28]
 8002b8a:	2380      	movs	r3, #128	; 0x80
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	401a      	ands	r2, r3
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d112      	bne.n	8002bbe <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2280      	movs	r2, #128	; 0x80
 8002b9e:	0112      	lsls	r2, r2, #4
 8002ba0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f000 f8e3 	bl	8002d70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2284      	movs	r2, #132	; 0x84
 8002bae:	2120      	movs	r1, #32
 8002bb0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2278      	movs	r2, #120	; 0x78
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e00f      	b.n	8002bde <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	425a      	negs	r2, r3
 8002bce:	4153      	adcs	r3, r2
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	001a      	movs	r2, r3
 8002bd4:	1dfb      	adds	r3, r7, #7
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d0a4      	beq.n	8002b26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	0018      	movs	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b004      	add	sp, #16
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b090      	sub	sp, #64	; 0x40
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	1dbb      	adds	r3, r7, #6
 8002bf4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1dba      	adds	r2, r7, #6
 8002c00:	2158      	movs	r1, #88	; 0x58
 8002c02:	8812      	ldrh	r2, [r2, #0]
 8002c04:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2284      	movs	r2, #132	; 0x84
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	2122      	movs	r1, #34	; 0x22
 8002c14:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d028      	beq.n	8002c70 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c22:	4a3e      	ldr	r2, [pc, #248]	; (8002d1c <UART_Start_Receive_DMA+0x134>)
 8002c24:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c2a:	4a3d      	ldr	r2, [pc, #244]	; (8002d20 <UART_Start_Receive_DMA+0x138>)
 8002c2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c32:	4a3c      	ldr	r2, [pc, #240]	; (8002d24 <UART_Start_Receive_DMA+0x13c>)
 8002c34:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	3324      	adds	r3, #36	; 0x24
 8002c48:	0019      	movs	r1, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4e:	001a      	movs	r2, r3
 8002c50:	1dbb      	adds	r3, r7, #6
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	f7fe f8be 	bl	8000dd4 <HAL_DMA_Start_IT>
 8002c58:	1e03      	subs	r3, r0, #0
 8002c5a:	d009      	beq.n	8002c70 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2284      	movs	r2, #132	; 0x84
 8002c60:	2110      	movs	r1, #16
 8002c62:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2280      	movs	r2, #128	; 0x80
 8002c68:	2120      	movs	r1, #32
 8002c6a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e050      	b.n	8002d12 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d019      	beq.n	8002cac <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c78:	f3ef 8310 	mrs	r3, PRIMASK
 8002c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c82:	2301      	movs	r3, #1
 8002c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c88:	f383 8810 	msr	PRIMASK, r3
}
 8002c8c:	46c0      	nop			; (mov r8, r8)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2180      	movs	r1, #128	; 0x80
 8002c9a:	0049      	lsls	r1, r1, #1
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca6:	f383 8810 	msr	PRIMASK, r3
}
 8002caa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cac:	f3ef 8310 	mrs	r3, PRIMASK
 8002cb0:	613b      	str	r3, [r7, #16]
  return(result);
 8002cb2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f383 8810 	msr	PRIMASK, r3
}
 8002cc0:	46c0      	nop			; (mov r8, r8)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2101      	movs	r1, #1
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	609a      	str	r2, [r3, #8]
 8002cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	f383 8810 	msr	PRIMASK, r3
}
 8002cdc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cde:	f3ef 8310 	mrs	r3, PRIMASK
 8002ce2:	61fb      	str	r3, [r7, #28]
  return(result);
 8002ce4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ce8:	2301      	movs	r3, #1
 8002cea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	f383 8810 	msr	PRIMASK, r3
}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2140      	movs	r1, #64	; 0x40
 8002d00:	430a      	orrs	r2, r1
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	f383 8810 	msr	PRIMASK, r3
}
 8002d0e:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	0018      	movs	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b010      	add	sp, #64	; 0x40
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	08002e39 	.word	0x08002e39
 8002d20:	08002f65 	.word	0x08002f65
 8002d24:	08002fa7 	.word	0x08002fa7

08002d28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d30:	f3ef 8310 	mrs	r3, PRIMASK
 8002d34:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d36:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f383 8810 	msr	PRIMASK, r3
}
 8002d44:	46c0      	nop			; (mov r8, r8)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	21c0      	movs	r1, #192	; 0xc0
 8002d52:	438a      	bics	r2, r1
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	f383 8810 	msr	PRIMASK, r3
}
 8002d60:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2220      	movs	r2, #32
 8002d66:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b006      	add	sp, #24
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08e      	sub	sp, #56	; 0x38
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d78:	f3ef 8310 	mrs	r3, PRIMASK
 8002d7c:	617b      	str	r3, [r7, #20]
  return(result);
 8002d7e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
 8002d82:	2301      	movs	r3, #1
 8002d84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	f383 8810 	msr	PRIMASK, r3
}
 8002d8c:	46c0      	nop			; (mov r8, r8)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4926      	ldr	r1, [pc, #152]	; (8002e34 <UART_EndRxTransfer+0xc4>)
 8002d9a:	400a      	ands	r2, r1
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	f383 8810 	msr	PRIMASK, r3
}
 8002da8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002daa:	f3ef 8310 	mrs	r3, PRIMASK
 8002dae:	623b      	str	r3, [r7, #32]
  return(result);
 8002db0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db2:	633b      	str	r3, [r7, #48]	; 0x30
 8002db4:	2301      	movs	r3, #1
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	f383 8810 	msr	PRIMASK, r3
}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2101      	movs	r1, #1
 8002dcc:	438a      	bics	r2, r1
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd6:	f383 8810 	msr	PRIMASK, r3
}
 8002dda:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d118      	bne.n	8002e16 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002de4:	f3ef 8310 	mrs	r3, PRIMASK
 8002de8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dee:	2301      	movs	r3, #1
 8002df0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f383 8810 	msr	PRIMASK, r3
}
 8002df8:	46c0      	nop			; (mov r8, r8)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2110      	movs	r1, #16
 8002e06:	438a      	bics	r2, r1
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f383 8810 	msr	PRIMASK, r3
}
 8002e14:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2280      	movs	r2, #128	; 0x80
 8002e1a:	2120      	movs	r1, #32
 8002e1c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b00e      	add	sp, #56	; 0x38
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	fffffedf 	.word	0xfffffedf

08002e38 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b094      	sub	sp, #80	; 0x50
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	2b20      	cmp	r3, #32
 8002e4c:	d06f      	beq.n	8002f2e <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8002e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e50:	225a      	movs	r2, #90	; 0x5a
 8002e52:	2100      	movs	r1, #0
 8002e54:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e56:	f3ef 8310 	mrs	r3, PRIMASK
 8002e5a:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e5c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e60:	2301      	movs	r3, #1
 8002e62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f383 8810 	msr	PRIMASK, r3
}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	493a      	ldr	r1, [pc, #232]	; (8002f60 <UART_DMAReceiveCplt+0x128>)
 8002e78:	400a      	ands	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e7e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	f383 8810 	msr	PRIMASK, r3
}
 8002e86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e88:	f3ef 8310 	mrs	r3, PRIMASK
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e90:	647b      	str	r3, [r7, #68]	; 0x44
 8002e92:	2301      	movs	r3, #1
 8002e94:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e98:	f383 8810 	msr	PRIMASK, r3
}
 8002e9c:	46c0      	nop			; (mov r8, r8)
 8002e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	438a      	bics	r2, r1
 8002eac:	609a      	str	r2, [r3, #8]
 8002eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb4:	f383 8810 	msr	PRIMASK, r3
}
 8002eb8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eba:	f3ef 8310 	mrs	r3, PRIMASK
 8002ebe:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ec2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eca:	f383 8810 	msr	PRIMASK, r3
}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2140      	movs	r1, #64	; 0x40
 8002edc:	438a      	bics	r2, r1
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ee2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee6:	f383 8810 	msr	PRIMASK, r3
}
 8002eea:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eee:	2280      	movs	r2, #128	; 0x80
 8002ef0:	2120      	movs	r1, #32
 8002ef2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d118      	bne.n	8002f2e <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002efc:	f3ef 8310 	mrs	r3, PRIMASK
 8002f00:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f02:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f06:	2301      	movs	r3, #1
 8002f08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f383 8810 	msr	PRIMASK, r3
}
 8002f10:	46c0      	nop			; (mov r8, r8)
 8002f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2110      	movs	r1, #16
 8002f1e:	438a      	bics	r2, r1
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f383 8810 	msr	PRIMASK, r3
}
 8002f2c:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f30:	2200      	movs	r2, #0
 8002f32:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d108      	bne.n	8002f4e <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f3e:	2258      	movs	r2, #88	; 0x58
 8002f40:	5a9a      	ldrh	r2, [r3, r2]
 8002f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f44:	0011      	movs	r1, r2
 8002f46:	0018      	movs	r0, r3
 8002f48:	f7ff fb55 	bl	80025f6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f4c:	e003      	b.n	8002f56 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f50:	0018      	movs	r0, r3
 8002f52:	f7ff fb38 	bl	80025c6 <HAL_UART_RxCpltCallback>
}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	b014      	add	sp, #80	; 0x50
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	fffffeff 	.word	0xfffffeff

08002f64 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2201      	movs	r2, #1
 8002f76:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d10a      	bne.n	8002f96 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2258      	movs	r2, #88	; 0x58
 8002f84:	5a9b      	ldrh	r3, [r3, r2]
 8002f86:	085b      	lsrs	r3, r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	0011      	movs	r1, r2
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f7ff fb31 	bl	80025f6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f94:	e003      	b.n	8002f9e <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f7ff fb1c 	bl	80025d6 <HAL_UART_RxHalfCpltCallback>
}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	b004      	add	sp, #16
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b086      	sub	sp, #24
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fb8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2280      	movs	r2, #128	; 0x80
 8002fbe:	589b      	ldr	r3, [r3, r2]
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2280      	movs	r2, #128	; 0x80
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b80      	cmp	r3, #128	; 0x80
 8002fce:	d10a      	bne.n	8002fe6 <UART_DMAError+0x40>
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	2b21      	cmp	r3, #33	; 0x21
 8002fd4:	d107      	bne.n	8002fe6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2252      	movs	r2, #82	; 0x52
 8002fda:	2100      	movs	r1, #0
 8002fdc:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f7ff fea1 	bl	8002d28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2240      	movs	r2, #64	; 0x40
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b40      	cmp	r3, #64	; 0x40
 8002ff2:	d10a      	bne.n	800300a <UART_DMAError+0x64>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b22      	cmp	r3, #34	; 0x22
 8002ff8:	d107      	bne.n	800300a <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	225a      	movs	r2, #90	; 0x5a
 8002ffe:	2100      	movs	r1, #0
 8003000:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	0018      	movs	r0, r3
 8003006:	f7ff feb3 	bl	8002d70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2284      	movs	r2, #132	; 0x84
 800300e:	589b      	ldr	r3, [r3, r2]
 8003010:	2210      	movs	r2, #16
 8003012:	431a      	orrs	r2, r3
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	2184      	movs	r1, #132	; 0x84
 8003018:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	0018      	movs	r0, r3
 800301e:	f7ff fae2 	bl	80025e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	46bd      	mov	sp, r7
 8003026:	b006      	add	sp, #24
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <__libc_init_array>:
 800302c:	b570      	push	{r4, r5, r6, lr}
 800302e:	2600      	movs	r6, #0
 8003030:	4d0c      	ldr	r5, [pc, #48]	; (8003064 <__libc_init_array+0x38>)
 8003032:	4c0d      	ldr	r4, [pc, #52]	; (8003068 <__libc_init_array+0x3c>)
 8003034:	1b64      	subs	r4, r4, r5
 8003036:	10a4      	asrs	r4, r4, #2
 8003038:	42a6      	cmp	r6, r4
 800303a:	d109      	bne.n	8003050 <__libc_init_array+0x24>
 800303c:	2600      	movs	r6, #0
 800303e:	f000 f87d 	bl	800313c <_init>
 8003042:	4d0a      	ldr	r5, [pc, #40]	; (800306c <__libc_init_array+0x40>)
 8003044:	4c0a      	ldr	r4, [pc, #40]	; (8003070 <__libc_init_array+0x44>)
 8003046:	1b64      	subs	r4, r4, r5
 8003048:	10a4      	asrs	r4, r4, #2
 800304a:	42a6      	cmp	r6, r4
 800304c:	d105      	bne.n	800305a <__libc_init_array+0x2e>
 800304e:	bd70      	pop	{r4, r5, r6, pc}
 8003050:	00b3      	lsls	r3, r6, #2
 8003052:	58eb      	ldr	r3, [r5, r3]
 8003054:	4798      	blx	r3
 8003056:	3601      	adds	r6, #1
 8003058:	e7ee      	b.n	8003038 <__libc_init_array+0xc>
 800305a:	00b3      	lsls	r3, r6, #2
 800305c:	58eb      	ldr	r3, [r5, r3]
 800305e:	4798      	blx	r3
 8003060:	3601      	adds	r6, #1
 8003062:	e7f2      	b.n	800304a <__libc_init_array+0x1e>
 8003064:	080031f0 	.word	0x080031f0
 8003068:	080031f0 	.word	0x080031f0
 800306c:	080031f0 	.word	0x080031f0
 8003070:	080031f4 	.word	0x080031f4

08003074 <__itoa>:
 8003074:	1e93      	subs	r3, r2, #2
 8003076:	b510      	push	{r4, lr}
 8003078:	000c      	movs	r4, r1
 800307a:	2b22      	cmp	r3, #34	; 0x22
 800307c:	d904      	bls.n	8003088 <__itoa+0x14>
 800307e:	2300      	movs	r3, #0
 8003080:	001c      	movs	r4, r3
 8003082:	700b      	strb	r3, [r1, #0]
 8003084:	0020      	movs	r0, r4
 8003086:	bd10      	pop	{r4, pc}
 8003088:	2a0a      	cmp	r2, #10
 800308a:	d109      	bne.n	80030a0 <__itoa+0x2c>
 800308c:	2800      	cmp	r0, #0
 800308e:	da07      	bge.n	80030a0 <__itoa+0x2c>
 8003090:	232d      	movs	r3, #45	; 0x2d
 8003092:	700b      	strb	r3, [r1, #0]
 8003094:	2101      	movs	r1, #1
 8003096:	4240      	negs	r0, r0
 8003098:	1861      	adds	r1, r4, r1
 800309a:	f000 f80f 	bl	80030bc <__utoa>
 800309e:	e7f1      	b.n	8003084 <__itoa+0x10>
 80030a0:	2100      	movs	r1, #0
 80030a2:	e7f9      	b.n	8003098 <__itoa+0x24>

080030a4 <itoa>:
 80030a4:	b510      	push	{r4, lr}
 80030a6:	f7ff ffe5 	bl	8003074 <__itoa>
 80030aa:	bd10      	pop	{r4, pc}

080030ac <memset>:
 80030ac:	0003      	movs	r3, r0
 80030ae:	1882      	adds	r2, r0, r2
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d100      	bne.n	80030b6 <memset+0xa>
 80030b4:	4770      	bx	lr
 80030b6:	7019      	strb	r1, [r3, #0]
 80030b8:	3301      	adds	r3, #1
 80030ba:	e7f9      	b.n	80030b0 <memset+0x4>

080030bc <__utoa>:
 80030bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030be:	000c      	movs	r4, r1
 80030c0:	0016      	movs	r6, r2
 80030c2:	b08d      	sub	sp, #52	; 0x34
 80030c4:	2225      	movs	r2, #37	; 0x25
 80030c6:	0007      	movs	r7, r0
 80030c8:	4916      	ldr	r1, [pc, #88]	; (8003124 <__utoa+0x68>)
 80030ca:	a802      	add	r0, sp, #8
 80030cc:	f000 f82c 	bl	8003128 <memcpy>
 80030d0:	1e62      	subs	r2, r4, #1
 80030d2:	9200      	str	r2, [sp, #0]
 80030d4:	1eb3      	subs	r3, r6, #2
 80030d6:	aa02      	add	r2, sp, #8
 80030d8:	2500      	movs	r5, #0
 80030da:	9201      	str	r2, [sp, #4]
 80030dc:	2b22      	cmp	r3, #34	; 0x22
 80030de:	d904      	bls.n	80030ea <__utoa+0x2e>
 80030e0:	7025      	strb	r5, [r4, #0]
 80030e2:	002c      	movs	r4, r5
 80030e4:	0020      	movs	r0, r4
 80030e6:	b00d      	add	sp, #52	; 0x34
 80030e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ea:	0038      	movs	r0, r7
 80030ec:	0031      	movs	r1, r6
 80030ee:	f7fd f899 	bl	8000224 <__aeabi_uidivmod>
 80030f2:	000b      	movs	r3, r1
 80030f4:	9a01      	ldr	r2, [sp, #4]
 80030f6:	0029      	movs	r1, r5
 80030f8:	5cd3      	ldrb	r3, [r2, r3]
 80030fa:	9a00      	ldr	r2, [sp, #0]
 80030fc:	3501      	adds	r5, #1
 80030fe:	5553      	strb	r3, [r2, r5]
 8003100:	003b      	movs	r3, r7
 8003102:	0007      	movs	r7, r0
 8003104:	429e      	cmp	r6, r3
 8003106:	d9f0      	bls.n	80030ea <__utoa+0x2e>
 8003108:	2300      	movs	r3, #0
 800310a:	0022      	movs	r2, r4
 800310c:	5563      	strb	r3, [r4, r5]
 800310e:	000b      	movs	r3, r1
 8003110:	1ac8      	subs	r0, r1, r3
 8003112:	4283      	cmp	r3, r0
 8003114:	dde6      	ble.n	80030e4 <__utoa+0x28>
 8003116:	7810      	ldrb	r0, [r2, #0]
 8003118:	5ce5      	ldrb	r5, [r4, r3]
 800311a:	7015      	strb	r5, [r2, #0]
 800311c:	54e0      	strb	r0, [r4, r3]
 800311e:	3201      	adds	r2, #1
 8003120:	3b01      	subs	r3, #1
 8003122:	e7f5      	b.n	8003110 <__utoa+0x54>
 8003124:	080031c8 	.word	0x080031c8

08003128 <memcpy>:
 8003128:	2300      	movs	r3, #0
 800312a:	b510      	push	{r4, lr}
 800312c:	429a      	cmp	r2, r3
 800312e:	d100      	bne.n	8003132 <memcpy+0xa>
 8003130:	bd10      	pop	{r4, pc}
 8003132:	5ccc      	ldrb	r4, [r1, r3]
 8003134:	54c4      	strb	r4, [r0, r3]
 8003136:	3301      	adds	r3, #1
 8003138:	e7f8      	b.n	800312c <memcpy+0x4>
	...

0800313c <_init>:
 800313c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003142:	bc08      	pop	{r3}
 8003144:	469e      	mov	lr, r3
 8003146:	4770      	bx	lr

08003148 <_fini>:
 8003148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800314e:	bc08      	pop	{r3}
 8003150:	469e      	mov	lr, r3
 8003152:	4770      	bx	lr
