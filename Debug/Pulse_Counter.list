
Pulse_Counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003260  08003260  00013260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003304  08003304  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003304  08003304  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003304  08003304  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003304  08003304  00013304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003308  08003308  00013308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800330c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  2000000c  08003318  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08003318  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc23  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b47  00000000  00000000  0002cc57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0002e7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  0002f348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff6d  00000000  00000000  0002fe48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dadd  00000000  00000000  0003fdb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00062ebf  00000000  00000000  0004d892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b0751  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a90  00000000  00000000  000b07a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003248 	.word	0x08003248

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003248 	.word	0x08003248

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b590      	push	{r4, r7, lr}
 8000232:	b087      	sub	sp, #28
 8000234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t Counter1=0;
 8000236:	2316      	movs	r3, #22
 8000238:	18fb      	adds	r3, r7, r3
 800023a:	2200      	movs	r2, #0
 800023c:	801a      	strh	r2, [r3, #0]
	uint16_t Counter2=0;
 800023e:	2314      	movs	r3, #20
 8000240:	18fb      	adds	r3, r7, r3
 8000242:	2200      	movs	r2, #0
 8000244:	801a      	strh	r2, [r3, #0]
	uint16_t temp1=0;
 8000246:	2312      	movs	r3, #18
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	2200      	movs	r2, #0
 800024c:	801a      	strh	r2, [r3, #0]
	uint16_t temp2=0;
 800024e:	2310      	movs	r3, #16
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	2200      	movs	r2, #0
 8000254:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000256:	f000 fc95 	bl	8000b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025a:	f000 f929 	bl	80004b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025e:	f000 fa9b 	bl	8000798 <MX_GPIO_Init>
  MX_DMA_Init();
 8000262:	f000 fa73 	bl	800074c <MX_DMA_Init>
  MX_TIM3_Init();
 8000266:	f000 f9e3 	bl	8000630 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800026a:	f000 fa3f 	bl	80006ec <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800026e:	f000 f97f 	bl	8000570 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000272:	4b86      	ldr	r3, [pc, #536]	; (800048c <main+0x25c>)
 8000274:	0018      	movs	r0, r3
 8000276:	f001 fe8d 	bl	8001f94 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1);
 800027a:	4b85      	ldr	r3, [pc, #532]	; (8000490 <main+0x260>)
 800027c:	0018      	movs	r0, r3
 800027e:	f001 fe89 	bl	8001f94 <HAL_TIM_Base_Start>
  HAL_UART_Receive_DMA(&huart1, string_recive, 6);
 8000282:	0039      	movs	r1, r7
 8000284:	4b83      	ldr	r3, [pc, #524]	; (8000494 <main+0x264>)
 8000286:	2206      	movs	r2, #6
 8000288:	0018      	movs	r0, r3
 800028a:	f002 f9cb 	bl	8002624 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit(&huart1, "Chanel 1 count :" , 16, HAL_MAX_DELAY);
 800028e:	2301      	movs	r3, #1
 8000290:	425b      	negs	r3, r3
 8000292:	4981      	ldr	r1, [pc, #516]	; (8000498 <main+0x268>)
 8000294:	487f      	ldr	r0, [pc, #508]	; (8000494 <main+0x264>)
 8000296:	2210      	movs	r2, #16
 8000298:	f002 f924 	bl	80024e4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, "---> 0", strlen("---> 0"), HAL_MAX_DELAY);
 800029c:	2301      	movs	r3, #1
 800029e:	425b      	negs	r3, r3
 80002a0:	497e      	ldr	r1, [pc, #504]	; (800049c <main+0x26c>)
 80002a2:	487c      	ldr	r0, [pc, #496]	; (8000494 <main+0x264>)
 80002a4:	2206      	movs	r2, #6
 80002a6:	f002 f91d 	bl	80024e4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, "\n\r" , strlen("\n\r"), HAL_MAX_DELAY);
 80002aa:	2301      	movs	r3, #1
 80002ac:	425b      	negs	r3, r3
 80002ae:	497c      	ldr	r1, [pc, #496]	; (80004a0 <main+0x270>)
 80002b0:	4878      	ldr	r0, [pc, #480]	; (8000494 <main+0x264>)
 80002b2:	2202      	movs	r2, #2
 80002b4:	f002 f916 	bl	80024e4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, "Chanel 2 count :" , 16, HAL_MAX_DELAY);
 80002b8:	2301      	movs	r3, #1
 80002ba:	425b      	negs	r3, r3
 80002bc:	4979      	ldr	r1, [pc, #484]	; (80004a4 <main+0x274>)
 80002be:	4875      	ldr	r0, [pc, #468]	; (8000494 <main+0x264>)
 80002c0:	2210      	movs	r2, #16
 80002c2:	f002 f90f 	bl	80024e4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, "---> 0", strlen("---> 0"), HAL_MAX_DELAY);
 80002c6:	2301      	movs	r3, #1
 80002c8:	425b      	negs	r3, r3
 80002ca:	4974      	ldr	r1, [pc, #464]	; (800049c <main+0x26c>)
 80002cc:	4871      	ldr	r0, [pc, #452]	; (8000494 <main+0x264>)
 80002ce:	2206      	movs	r2, #6
 80002d0:	f002 f908 	bl	80024e4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, "\n\r" , strlen("\n\r"), HAL_MAX_DELAY);
 80002d4:	2301      	movs	r3, #1
 80002d6:	425b      	negs	r3, r3
 80002d8:	4971      	ldr	r1, [pc, #452]	; (80004a0 <main+0x270>)
 80002da:	486e      	ldr	r0, [pc, #440]	; (8000494 <main+0x264>)
 80002dc:	2202      	movs	r2, #2
 80002de:	f002 f901 	bl	80024e4 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Counter1 = __HAL_TIM_GET_COUNTER(&htim3);
 80002e2:	4b6a      	ldr	r3, [pc, #424]	; (800048c <main+0x25c>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002e8:	2116      	movs	r1, #22
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	801a      	strh	r2, [r3, #0]
	  Counter2 = __HAL_TIM_GET_COUNTER(&htim1);
 80002ee:	4b68      	ldr	r3, [pc, #416]	; (8000490 <main+0x260>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002f4:	2314      	movs	r3, #20
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	801a      	strh	r2, [r3, #0]
	  if(Counter1 != temp1)
 80002fa:	187a      	adds	r2, r7, r1
 80002fc:	2312      	movs	r3, #18
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	8812      	ldrh	r2, [r2, #0]
 8000302:	881b      	ldrh	r3, [r3, #0]
 8000304:	429a      	cmp	r2, r3
 8000306:	d052      	beq.n	80003ae <main+0x17e>
	  {
		  while(temp1 != Counter1)
 8000308:	e00f      	b.n	800032a <main+0xfa>
		  {
			  Counter1 = __HAL_TIM_GET_COUNTER(&htim3);
 800030a:	4b60      	ldr	r3, [pc, #384]	; (800048c <main+0x25c>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000310:	2416      	movs	r4, #22
 8000312:	193b      	adds	r3, r7, r4
 8000314:	801a      	strh	r2, [r3, #0]
			  HAL_Delay(500);
 8000316:	23fa      	movs	r3, #250	; 0xfa
 8000318:	005b      	lsls	r3, r3, #1
 800031a:	0018      	movs	r0, r3
 800031c:	f000 fc96 	bl	8000c4c <HAL_Delay>
			  temp1 = Counter1;
 8000320:	2312      	movs	r3, #18
 8000322:	18fb      	adds	r3, r7, r3
 8000324:	193a      	adds	r2, r7, r4
 8000326:	8812      	ldrh	r2, [r2, #0]
 8000328:	801a      	strh	r2, [r3, #0]
		  while(temp1 != Counter1)
 800032a:	2312      	movs	r3, #18
 800032c:	18fa      	adds	r2, r7, r3
 800032e:	2116      	movs	r1, #22
 8000330:	187b      	adds	r3, r7, r1
 8000332:	8812      	ldrh	r2, [r2, #0]
 8000334:	881b      	ldrh	r3, [r3, #0]
 8000336:	429a      	cmp	r2, r3
 8000338:	d1e7      	bne.n	800030a <main+0xda>
		  }
		  itoa(Counter1,string,10);
 800033a:	187b      	adds	r3, r7, r1
 800033c:	881b      	ldrh	r3, [r3, #0]
 800033e:	2208      	movs	r2, #8
 8000340:	18b9      	adds	r1, r7, r2
 8000342:	220a      	movs	r2, #10
 8000344:	0018      	movs	r0, r3
 8000346:	f002 ff33 	bl	80031b0 <itoa>
		  HAL_UART_Transmit(&huart1, "Chanel 1 count :" , 16, HAL_MAX_DELAY);
 800034a:	2301      	movs	r3, #1
 800034c:	425b      	negs	r3, r3
 800034e:	4952      	ldr	r1, [pc, #328]	; (8000498 <main+0x268>)
 8000350:	4850      	ldr	r0, [pc, #320]	; (8000494 <main+0x264>)
 8000352:	2210      	movs	r2, #16
 8000354:	f002 f8c6 	bl	80024e4 <HAL_UART_Transmit>
		  if(HAL_GPIO_ReadPin(CH1_Direction_GPIO_Port, CH1_Direction_Pin))
 8000358:	2390      	movs	r3, #144	; 0x90
 800035a:	05db      	lsls	r3, r3, #23
 800035c:	2120      	movs	r1, #32
 800035e:	0018      	movs	r0, r3
 8000360:	f001 f87e 	bl	8001460 <HAL_GPIO_ReadPin>
 8000364:	1e03      	subs	r3, r0, #0
 8000366:	d007      	beq.n	8000378 <main+0x148>
		  {
			  HAL_UART_Transmit(&huart1, "--->  ", strlen("--->  "), HAL_MAX_DELAY);
 8000368:	2301      	movs	r3, #1
 800036a:	425b      	negs	r3, r3
 800036c:	494e      	ldr	r1, [pc, #312]	; (80004a8 <main+0x278>)
 800036e:	4849      	ldr	r0, [pc, #292]	; (8000494 <main+0x264>)
 8000370:	2206      	movs	r2, #6
 8000372:	f002 f8b7 	bl	80024e4 <HAL_UART_Transmit>
 8000376:	e006      	b.n	8000386 <main+0x156>
		  }
		  else
		  {
			  HAL_UART_Transmit(&huart1, "<---  ", strlen("--->  "), HAL_MAX_DELAY);
 8000378:	2301      	movs	r3, #1
 800037a:	425b      	negs	r3, r3
 800037c:	494b      	ldr	r1, [pc, #300]	; (80004ac <main+0x27c>)
 800037e:	4845      	ldr	r0, [pc, #276]	; (8000494 <main+0x264>)
 8000380:	2206      	movs	r2, #6
 8000382:	f002 f8af 	bl	80024e4 <HAL_UART_Transmit>
		  }
		  HAL_UART_Transmit(&huart1, string , strlen(string), HAL_MAX_DELAY);
 8000386:	2408      	movs	r4, #8
 8000388:	193b      	adds	r3, r7, r4
 800038a:	0018      	movs	r0, r3
 800038c:	f7ff febc 	bl	8000108 <strlen>
 8000390:	0003      	movs	r3, r0
 8000392:	b29a      	uxth	r2, r3
 8000394:	2301      	movs	r3, #1
 8000396:	425b      	negs	r3, r3
 8000398:	1939      	adds	r1, r7, r4
 800039a:	483e      	ldr	r0, [pc, #248]	; (8000494 <main+0x264>)
 800039c:	f002 f8a2 	bl	80024e4 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, "\n\r" , strlen("\n\r"), HAL_MAX_DELAY);
 80003a0:	2301      	movs	r3, #1
 80003a2:	425b      	negs	r3, r3
 80003a4:	493e      	ldr	r1, [pc, #248]	; (80004a0 <main+0x270>)
 80003a6:	483b      	ldr	r0, [pc, #236]	; (8000494 <main+0x264>)
 80003a8:	2202      	movs	r2, #2
 80003aa:	f002 f89b 	bl	80024e4 <HAL_UART_Transmit>

	  }

	  if(Counter2 != temp2)
 80003ae:	2314      	movs	r3, #20
 80003b0:	18fa      	adds	r2, r7, r3
 80003b2:	2310      	movs	r3, #16
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	8812      	ldrh	r2, [r2, #0]
 80003b8:	881b      	ldrh	r3, [r3, #0]
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d091      	beq.n	80002e2 <main+0xb2>
	  {
		  while(temp2 != Counter2)
 80003be:	e00f      	b.n	80003e0 <main+0x1b0>
		  {
			  Counter2 = __HAL_TIM_GET_COUNTER(&htim1);
 80003c0:	4b33      	ldr	r3, [pc, #204]	; (8000490 <main+0x260>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003c6:	2414      	movs	r4, #20
 80003c8:	193b      	adds	r3, r7, r4
 80003ca:	801a      	strh	r2, [r3, #0]
			  HAL_Delay(500);
 80003cc:	23fa      	movs	r3, #250	; 0xfa
 80003ce:	005b      	lsls	r3, r3, #1
 80003d0:	0018      	movs	r0, r3
 80003d2:	f000 fc3b 	bl	8000c4c <HAL_Delay>
			  temp2 = Counter2;
 80003d6:	2310      	movs	r3, #16
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	193a      	adds	r2, r7, r4
 80003dc:	8812      	ldrh	r2, [r2, #0]
 80003de:	801a      	strh	r2, [r3, #0]
		  while(temp2 != Counter2)
 80003e0:	2310      	movs	r3, #16
 80003e2:	18fa      	adds	r2, r7, r3
 80003e4:	2414      	movs	r4, #20
 80003e6:	193b      	adds	r3, r7, r4
 80003e8:	8812      	ldrh	r2, [r2, #0]
 80003ea:	881b      	ldrh	r3, [r3, #0]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d1e7      	bne.n	80003c0 <main+0x190>
		  }
		  HAL_Delay(1000);
 80003f0:	23fa      	movs	r3, #250	; 0xfa
 80003f2:	009b      	lsls	r3, r3, #2
 80003f4:	0018      	movs	r0, r3
 80003f6:	f000 fc29 	bl	8000c4c <HAL_Delay>
		  Counter2 = __HAL_TIM_GET_COUNTER(&htim1);
 80003fa:	4b25      	ldr	r3, [pc, #148]	; (8000490 <main+0x260>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000400:	193b      	adds	r3, r7, r4
 8000402:	801a      	strh	r2, [r3, #0]
		  itoa(Counter2,string,10);
 8000404:	193b      	adds	r3, r7, r4
 8000406:	881b      	ldrh	r3, [r3, #0]
 8000408:	2208      	movs	r2, #8
 800040a:	18b9      	adds	r1, r7, r2
 800040c:	220a      	movs	r2, #10
 800040e:	0018      	movs	r0, r3
 8000410:	f002 fece 	bl	80031b0 <itoa>
		  HAL_UART_Transmit(&huart1, "Chanel 2 count :" , 16, HAL_MAX_DELAY);
 8000414:	2301      	movs	r3, #1
 8000416:	425b      	negs	r3, r3
 8000418:	4922      	ldr	r1, [pc, #136]	; (80004a4 <main+0x274>)
 800041a:	481e      	ldr	r0, [pc, #120]	; (8000494 <main+0x264>)
 800041c:	2210      	movs	r2, #16
 800041e:	f002 f861 	bl	80024e4 <HAL_UART_Transmit>
		  if(HAL_GPIO_ReadPin(CH2_Direction_GPIO_Port, CH2_Direction_Pin))
 8000422:	2380      	movs	r3, #128	; 0x80
 8000424:	00da      	lsls	r2, r3, #3
 8000426:	2390      	movs	r3, #144	; 0x90
 8000428:	05db      	lsls	r3, r3, #23
 800042a:	0011      	movs	r1, r2
 800042c:	0018      	movs	r0, r3
 800042e:	f001 f817 	bl	8001460 <HAL_GPIO_ReadPin>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d007      	beq.n	8000446 <main+0x216>
		  {
			  HAL_UART_Transmit(&huart1, "--->  " , strlen("--->  "), HAL_MAX_DELAY);
 8000436:	2301      	movs	r3, #1
 8000438:	425b      	negs	r3, r3
 800043a:	491b      	ldr	r1, [pc, #108]	; (80004a8 <main+0x278>)
 800043c:	4815      	ldr	r0, [pc, #84]	; (8000494 <main+0x264>)
 800043e:	2206      	movs	r2, #6
 8000440:	f002 f850 	bl	80024e4 <HAL_UART_Transmit>
 8000444:	e006      	b.n	8000454 <main+0x224>
		  }
		  else
		  {
			  HAL_UART_Transmit(&huart1, "<---  ", strlen("--->  "), HAL_MAX_DELAY);
 8000446:	2301      	movs	r3, #1
 8000448:	425b      	negs	r3, r3
 800044a:	4918      	ldr	r1, [pc, #96]	; (80004ac <main+0x27c>)
 800044c:	4811      	ldr	r0, [pc, #68]	; (8000494 <main+0x264>)
 800044e:	2206      	movs	r2, #6
 8000450:	f002 f848 	bl	80024e4 <HAL_UART_Transmit>
		  }
		  HAL_UART_Transmit(&huart1, string , strlen(string), HAL_MAX_DELAY);
 8000454:	2408      	movs	r4, #8
 8000456:	193b      	adds	r3, r7, r4
 8000458:	0018      	movs	r0, r3
 800045a:	f7ff fe55 	bl	8000108 <strlen>
 800045e:	0003      	movs	r3, r0
 8000460:	b29a      	uxth	r2, r3
 8000462:	2301      	movs	r3, #1
 8000464:	425b      	negs	r3, r3
 8000466:	1939      	adds	r1, r7, r4
 8000468:	480a      	ldr	r0, [pc, #40]	; (8000494 <main+0x264>)
 800046a:	f002 f83b 	bl	80024e4 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, "\n\r" , strlen("\n\r"), HAL_MAX_DELAY);
 800046e:	2301      	movs	r3, #1
 8000470:	425b      	negs	r3, r3
 8000472:	490b      	ldr	r1, [pc, #44]	; (80004a0 <main+0x270>)
 8000474:	4807      	ldr	r0, [pc, #28]	; (8000494 <main+0x264>)
 8000476:	2202      	movs	r2, #2
 8000478:	f002 f834 	bl	80024e4 <HAL_UART_Transmit>
		  temp2 = Counter2;
 800047c:	2310      	movs	r3, #16
 800047e:	18fb      	adds	r3, r7, r3
 8000480:	2214      	movs	r2, #20
 8000482:	18ba      	adds	r2, r7, r2
 8000484:	8812      	ldrh	r2, [r2, #0]
 8000486:	801a      	strh	r2, [r3, #0]
	  Counter1 = __HAL_TIM_GET_COUNTER(&htim3);
 8000488:	e72b      	b.n	80002e2 <main+0xb2>
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	20000070 	.word	0x20000070
 8000490:	20000028 	.word	0x20000028
 8000494:	200000fc 	.word	0x200000fc
 8000498:	08003260 	.word	0x08003260
 800049c:	08003274 	.word	0x08003274
 80004a0:	0800327c 	.word	0x0800327c
 80004a4:	08003280 	.word	0x08003280
 80004a8:	08003294 	.word	0x08003294
 80004ac:	0800329c 	.word	0x0800329c

080004b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b0:	b590      	push	{r4, r7, lr}
 80004b2:	b095      	sub	sp, #84	; 0x54
 80004b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b6:	2420      	movs	r4, #32
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	0018      	movs	r0, r3
 80004bc:	2330      	movs	r3, #48	; 0x30
 80004be:	001a      	movs	r2, r3
 80004c0:	2100      	movs	r1, #0
 80004c2:	f002 fe79 	bl	80031b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c6:	2310      	movs	r3, #16
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	0018      	movs	r0, r3
 80004cc:	2310      	movs	r3, #16
 80004ce:	001a      	movs	r2, r3
 80004d0:	2100      	movs	r1, #0
 80004d2:	f002 fe71 	bl	80031b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004d6:	003b      	movs	r3, r7
 80004d8:	0018      	movs	r0, r3
 80004da:	2310      	movs	r3, #16
 80004dc:	001a      	movs	r2, r3
 80004de:	2100      	movs	r1, #0
 80004e0:	f002 fe6a 	bl	80031b8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004e4:	0021      	movs	r1, r4
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	2201      	movs	r2, #1
 80004ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	2201      	movs	r2, #1
 80004f0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	2202      	movs	r2, #2
 80004f6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	0252      	lsls	r2, r2, #9
 80004fe:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2280      	movs	r2, #128	; 0x80
 8000504:	0352      	lsls	r2, r2, #13
 8000506:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2200      	movs	r2, #0
 800050c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050e:	187b      	adds	r3, r7, r1
 8000510:	0018      	movs	r0, r3
 8000512:	f000 ffc3 	bl	800149c <HAL_RCC_OscConfig>
 8000516:	1e03      	subs	r3, r0, #0
 8000518:	d001      	beq.n	800051e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800051a:	f000 f97b 	bl	8000814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800051e:	2110      	movs	r1, #16
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2207      	movs	r2, #7
 8000524:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2202      	movs	r2, #2
 800052a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2200      	movs	r2, #0
 8000536:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2101      	movs	r1, #1
 800053c:	0018      	movs	r0, r3
 800053e:	f001 fac7 	bl	8001ad0 <HAL_RCC_ClockConfig>
 8000542:	1e03      	subs	r3, r0, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000546:	f000 f965 	bl	8000814 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800054a:	003b      	movs	r3, r7
 800054c:	2201      	movs	r2, #1
 800054e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000550:	003b      	movs	r3, r7
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000556:	003b      	movs	r3, r7
 8000558:	0018      	movs	r0, r3
 800055a:	f001 fbfd 	bl	8001d58 <HAL_RCCEx_PeriphCLKConfig>
 800055e:	1e03      	subs	r3, r0, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000562:	f000 f957 	bl	8000814 <Error_Handler>
  }
}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	b015      	add	sp, #84	; 0x54
 800056c:	bd90      	pop	{r4, r7, pc}
	...

08000570 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000576:	230c      	movs	r3, #12
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	0018      	movs	r0, r3
 800057c:	2314      	movs	r3, #20
 800057e:	001a      	movs	r2, r3
 8000580:	2100      	movs	r1, #0
 8000582:	f002 fe19 	bl	80031b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	0018      	movs	r0, r3
 800058a:	2308      	movs	r3, #8
 800058c:	001a      	movs	r2, r3
 800058e:	2100      	movs	r1, #0
 8000590:	f002 fe12 	bl	80031b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000594:	4b23      	ldr	r3, [pc, #140]	; (8000624 <MX_TIM1_Init+0xb4>)
 8000596:	4a24      	ldr	r2, [pc, #144]	; (8000628 <MX_TIM1_Init+0xb8>)
 8000598:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800059a:	4b22      	ldr	r3, [pc, #136]	; (8000624 <MX_TIM1_Init+0xb4>)
 800059c:	2200      	movs	r2, #0
 800059e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a0:	4b20      	ldr	r3, [pc, #128]	; (8000624 <MX_TIM1_Init+0xb4>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80005a6:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <MX_TIM1_Init+0xb4>)
 80005a8:	4a20      	ldr	r2, [pc, #128]	; (800062c <MX_TIM1_Init+0xbc>)
 80005aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ac:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <MX_TIM1_Init+0xb4>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005b2:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <MX_TIM1_Init+0xb4>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b8:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <MX_TIM1_Init+0xb4>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005be:	4b19      	ldr	r3, [pc, #100]	; (8000624 <MX_TIM1_Init+0xb4>)
 80005c0:	0018      	movs	r0, r3
 80005c2:	f001 fc97 	bl	8001ef4 <HAL_TIM_Base_Init>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80005ca:	f000 f923 	bl	8000814 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80005ce:	210c      	movs	r1, #12
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2207      	movs	r2, #7
 80005d4:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2260      	movs	r2, #96	; 0x60
 80005da:	605a      	str	r2, [r3, #4]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  sSlaveConfig.TriggerFilter = 0;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80005e8:	187a      	adds	r2, r7, r1
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_TIM1_Init+0xb4>)
 80005ec:	0011      	movs	r1, r2
 80005ee:	0018      	movs	r0, r3
 80005f0:	f001 fd0e 	bl	8002010 <HAL_TIM_SlaveConfigSynchro>
 80005f4:	1e03      	subs	r3, r0, #0
 80005f6:	d001      	beq.n	80005fc <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80005f8:	f000 f90c 	bl	8000814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2200      	movs	r2, #0
 8000606:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000608:	1d3a      	adds	r2, r7, #4
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_TIM1_Init+0xb4>)
 800060c:	0011      	movs	r1, r2
 800060e:	0018      	movs	r0, r3
 8000610:	f001 fec2 	bl	8002398 <HAL_TIMEx_MasterConfigSynchronization>
 8000614:	1e03      	subs	r3, r0, #0
 8000616:	d001      	beq.n	800061c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000618:	f000 f8fc 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800061c:	46c0      	nop			; (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	b008      	add	sp, #32
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000028 	.word	0x20000028
 8000628:	40012c00 	.word	0x40012c00
 800062c:	0000ffff 	.word	0x0000ffff

08000630 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000636:	230c      	movs	r3, #12
 8000638:	18fb      	adds	r3, r7, r3
 800063a:	0018      	movs	r0, r3
 800063c:	2314      	movs	r3, #20
 800063e:	001a      	movs	r2, r3
 8000640:	2100      	movs	r1, #0
 8000642:	f002 fdb9 	bl	80031b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	0018      	movs	r0, r3
 800064a:	2308      	movs	r3, #8
 800064c:	001a      	movs	r2, r3
 800064e:	2100      	movs	r1, #0
 8000650:	f002 fdb2 	bl	80031b8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <MX_TIM3_Init+0xb0>)
 8000656:	4a23      	ldr	r2, [pc, #140]	; (80006e4 <MX_TIM3_Init+0xb4>)
 8000658:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800065a:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <MX_TIM3_Init+0xb0>)
 800065c:	2200      	movs	r2, #0
 800065e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <MX_TIM3_Init+0xb0>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000666:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <MX_TIM3_Init+0xb0>)
 8000668:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <MX_TIM3_Init+0xb8>)
 800066a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <MX_TIM3_Init+0xb0>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000672:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <MX_TIM3_Init+0xb0>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000678:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <MX_TIM3_Init+0xb0>)
 800067a:	0018      	movs	r0, r3
 800067c:	f001 fc3a 	bl	8001ef4 <HAL_TIM_Base_Init>
 8000680:	1e03      	subs	r3, r0, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000684:	f000 f8c6 	bl	8000814 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000688:	210c      	movs	r1, #12
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2207      	movs	r2, #7
 800068e:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2250      	movs	r2, #80	; 0x50
 8000694:	605a      	str	r2, [r3, #4]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  sSlaveConfig.TriggerFilter = 0;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80006a2:	187a      	adds	r2, r7, r1
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_TIM3_Init+0xb0>)
 80006a6:	0011      	movs	r1, r2
 80006a8:	0018      	movs	r0, r3
 80006aa:	f001 fcb1 	bl	8002010 <HAL_TIM_SlaveConfigSynchro>
 80006ae:	1e03      	subs	r3, r0, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80006b2:	f000 f8af 	bl	8000814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006c2:	1d3a      	adds	r2, r7, #4
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_TIM3_Init+0xb0>)
 80006c6:	0011      	movs	r1, r2
 80006c8:	0018      	movs	r0, r3
 80006ca:	f001 fe65 	bl	8002398 <HAL_TIMEx_MasterConfigSynchronization>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80006d2:	f000 f89f 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b008      	add	sp, #32
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	20000070 	.word	0x20000070
 80006e4:	40000400 	.word	0x40000400
 80006e8:	0000ffff 	.word	0x0000ffff

080006ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_USART1_UART_Init+0x58>)
 80006f2:	4a15      	ldr	r2, [pc, #84]	; (8000748 <MX_USART1_UART_Init+0x5c>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_USART1_UART_Init+0x58>)
 80006f8:	22e1      	movs	r2, #225	; 0xe1
 80006fa:	0252      	lsls	r2, r2, #9
 80006fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_USART1_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_USART1_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_USART1_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_USART1_UART_Init+0x58>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_USART1_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_USART1_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_USART1_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_USART1_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <MX_USART1_UART_Init+0x58>)
 8000730:	0018      	movs	r0, r3
 8000732:	f001 fe83 	bl	800243c <HAL_UART_Init>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d001      	beq.n	800073e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 f86b 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200000fc 	.word	0x200000fc
 8000748:	40013800 	.word	0x40013800

0800074c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <MX_DMA_Init+0x48>)
 8000754:	695a      	ldr	r2, [r3, #20]
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_DMA_Init+0x48>)
 8000758:	2101      	movs	r1, #1
 800075a:	430a      	orrs	r2, r1
 800075c:	615a      	str	r2, [r3, #20]
 800075e:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <MX_DMA_Init+0x48>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	2201      	movs	r2, #1
 8000764:	4013      	ands	r3, r2
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	200a      	movs	r0, #10
 8000770:	f000 fb3c 	bl	8000dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000774:	200a      	movs	r0, #10
 8000776:	f000 fb4e 	bl	8000e16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2100      	movs	r1, #0
 800077e:	200b      	movs	r0, #11
 8000780:	f000 fb34 	bl	8000dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000784:	200b      	movs	r0, #11
 8000786:	f000 fb46 	bl	8000e16 <HAL_NVIC_EnableIRQ>

}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	b002      	add	sp, #8
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	40021000 	.word	0x40021000

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b089      	sub	sp, #36	; 0x24
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	240c      	movs	r4, #12
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	0018      	movs	r0, r3
 80007a4:	2314      	movs	r3, #20
 80007a6:	001a      	movs	r2, r3
 80007a8:	2100      	movs	r1, #0
 80007aa:	f002 fd05 	bl	80031b8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_GPIO_Init+0x78>)
 80007b0:	695a      	ldr	r2, [r3, #20]
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_GPIO_Init+0x78>)
 80007b4:	2180      	movs	r1, #128	; 0x80
 80007b6:	03c9      	lsls	r1, r1, #15
 80007b8:	430a      	orrs	r2, r1
 80007ba:	615a      	str	r2, [r3, #20]
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_GPIO_Init+0x78>)
 80007be:	695a      	ldr	r2, [r3, #20]
 80007c0:	2380      	movs	r3, #128	; 0x80
 80007c2:	03db      	lsls	r3, r3, #15
 80007c4:	4013      	ands	r3, r2
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_GPIO_Init+0x78>)
 80007cc:	695a      	ldr	r2, [r3, #20]
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <MX_GPIO_Init+0x78>)
 80007d0:	2180      	movs	r1, #128	; 0x80
 80007d2:	0289      	lsls	r1, r1, #10
 80007d4:	430a      	orrs	r2, r1
 80007d6:	615a      	str	r2, [r3, #20]
 80007d8:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <MX_GPIO_Init+0x78>)
 80007da:	695a      	ldr	r2, [r3, #20]
 80007dc:	2380      	movs	r3, #128	; 0x80
 80007de:	029b      	lsls	r3, r3, #10
 80007e0:	4013      	ands	r3, r2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : CH1_Direction_Pin CH2_Direction_Pin */
  GPIO_InitStruct.Pin = CH1_Direction_Pin|CH2_Direction_Pin;
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	2284      	movs	r2, #132	; 0x84
 80007ea:	00d2      	lsls	r2, r2, #3
 80007ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	2200      	movs	r2, #0
 80007f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	193a      	adds	r2, r7, r4
 80007fc:	2390      	movs	r3, #144	; 0x90
 80007fe:	05db      	lsls	r3, r3, #23
 8000800:	0011      	movs	r1, r2
 8000802:	0018      	movs	r0, r3
 8000804:	f000 fcbc 	bl	8001180 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	b009      	add	sp, #36	; 0x24
 800080e:	bd90      	pop	{r4, r7, pc}
 8000810:	40021000 	.word	0x40021000

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	e7fe      	b.n	800081c <Error_Handler+0x8>
	...

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <HAL_MspInit+0x44>)
 8000828:	699a      	ldr	r2, [r3, #24]
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <HAL_MspInit+0x44>)
 800082c:	2101      	movs	r1, #1
 800082e:	430a      	orrs	r2, r1
 8000830:	619a      	str	r2, [r3, #24]
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <HAL_MspInit+0x44>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	2201      	movs	r2, #1
 8000838:	4013      	ands	r3, r2
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_MspInit+0x44>)
 8000840:	69da      	ldr	r2, [r3, #28]
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <HAL_MspInit+0x44>)
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	0549      	lsls	r1, r1, #21
 8000848:	430a      	orrs	r2, r1
 800084a:	61da      	str	r2, [r3, #28]
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <HAL_MspInit+0x44>)
 800084e:	69da      	ldr	r2, [r3, #28]
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	055b      	lsls	r3, r3, #21
 8000854:	4013      	ands	r3, r2
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	b002      	add	sp, #8
 8000860:	bd80      	pop	{r7, pc}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	40021000 	.word	0x40021000

08000868 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b08d      	sub	sp, #52	; 0x34
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	241c      	movs	r4, #28
 8000872:	193b      	adds	r3, r7, r4
 8000874:	0018      	movs	r0, r3
 8000876:	2314      	movs	r3, #20
 8000878:	001a      	movs	r2, r3
 800087a:	2100      	movs	r1, #0
 800087c:	f002 fc9c 	bl	80031b8 <memset>
  if(htim_base->Instance==TIM1)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a4f      	ldr	r2, [pc, #316]	; (80009c4 <HAL_TIM_Base_MspInit+0x15c>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d134      	bne.n	80008f4 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800088a:	4b4f      	ldr	r3, [pc, #316]	; (80009c8 <HAL_TIM_Base_MspInit+0x160>)
 800088c:	699a      	ldr	r2, [r3, #24]
 800088e:	4b4e      	ldr	r3, [pc, #312]	; (80009c8 <HAL_TIM_Base_MspInit+0x160>)
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	0109      	lsls	r1, r1, #4
 8000894:	430a      	orrs	r2, r1
 8000896:	619a      	str	r2, [r3, #24]
 8000898:	4b4b      	ldr	r3, [pc, #300]	; (80009c8 <HAL_TIM_Base_MspInit+0x160>)
 800089a:	699a      	ldr	r2, [r3, #24]
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	011b      	lsls	r3, r3, #4
 80008a0:	4013      	ands	r3, r2
 80008a2:	61bb      	str	r3, [r7, #24]
 80008a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b48      	ldr	r3, [pc, #288]	; (80009c8 <HAL_TIM_Base_MspInit+0x160>)
 80008a8:	695a      	ldr	r2, [r3, #20]
 80008aa:	4b47      	ldr	r3, [pc, #284]	; (80009c8 <HAL_TIM_Base_MspInit+0x160>)
 80008ac:	2180      	movs	r1, #128	; 0x80
 80008ae:	0289      	lsls	r1, r1, #10
 80008b0:	430a      	orrs	r2, r1
 80008b2:	615a      	str	r2, [r3, #20]
 80008b4:	4b44      	ldr	r3, [pc, #272]	; (80009c8 <HAL_TIM_Base_MspInit+0x160>)
 80008b6:	695a      	ldr	r2, [r3, #20]
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	029b      	lsls	r3, r3, #10
 80008bc:	4013      	ands	r3, r2
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008c2:	193b      	adds	r3, r7, r4
 80008c4:	2280      	movs	r2, #128	; 0x80
 80008c6:	0092      	lsls	r2, r2, #2
 80008c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	0021      	movs	r1, r4
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2202      	movs	r2, #2
 80008d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2202      	movs	r2, #2
 80008e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	187a      	adds	r2, r7, r1
 80008e6:	2390      	movs	r3, #144	; 0x90
 80008e8:	05db      	lsls	r3, r3, #23
 80008ea:	0011      	movs	r1, r2
 80008ec:	0018      	movs	r0, r3
 80008ee:	f000 fc47 	bl	8001180 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008f2:	e063      	b.n	80009bc <HAL_TIM_Base_MspInit+0x154>
  else if(htim_base->Instance==TIM3)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a34      	ldr	r2, [pc, #208]	; (80009cc <HAL_TIM_Base_MspInit+0x164>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d15e      	bne.n	80009bc <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008fe:	4b32      	ldr	r3, [pc, #200]	; (80009c8 <HAL_TIM_Base_MspInit+0x160>)
 8000900:	69da      	ldr	r2, [r3, #28]
 8000902:	4b31      	ldr	r3, [pc, #196]	; (80009c8 <HAL_TIM_Base_MspInit+0x160>)
 8000904:	2102      	movs	r1, #2
 8000906:	430a      	orrs	r2, r1
 8000908:	61da      	str	r2, [r3, #28]
 800090a:	4b2f      	ldr	r3, [pc, #188]	; (80009c8 <HAL_TIM_Base_MspInit+0x160>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	2202      	movs	r2, #2
 8000910:	4013      	ands	r3, r2
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4b2c      	ldr	r3, [pc, #176]	; (80009c8 <HAL_TIM_Base_MspInit+0x160>)
 8000918:	695a      	ldr	r2, [r3, #20]
 800091a:	4b2b      	ldr	r3, [pc, #172]	; (80009c8 <HAL_TIM_Base_MspInit+0x160>)
 800091c:	2180      	movs	r1, #128	; 0x80
 800091e:	0289      	lsls	r1, r1, #10
 8000920:	430a      	orrs	r2, r1
 8000922:	615a      	str	r2, [r3, #20]
 8000924:	4b28      	ldr	r3, [pc, #160]	; (80009c8 <HAL_TIM_Base_MspInit+0x160>)
 8000926:	695a      	ldr	r2, [r3, #20]
 8000928:	2380      	movs	r3, #128	; 0x80
 800092a:	029b      	lsls	r3, r3, #10
 800092c:	4013      	ands	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000932:	211c      	movs	r1, #28
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2240      	movs	r2, #64	; 0x40
 8000938:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2202      	movs	r2, #2
 800093e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2201      	movs	r2, #1
 8000950:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	187a      	adds	r2, r7, r1
 8000954:	2390      	movs	r3, #144	; 0x90
 8000956:	05db      	lsls	r3, r3, #23
 8000958:	0011      	movs	r1, r2
 800095a:	0018      	movs	r0, r3
 800095c:	f000 fc10 	bl	8001180 <HAL_GPIO_Init>
    hdma_tim3_ch1_trig.Instance = DMA1_Channel4;
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <HAL_TIM_Base_MspInit+0x168>)
 8000962:	4a1c      	ldr	r2, [pc, #112]	; (80009d4 <HAL_TIM_Base_MspInit+0x16c>)
 8000964:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000966:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <HAL_TIM_Base_MspInit+0x168>)
 8000968:	2200      	movs	r2, #0
 800096a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <HAL_TIM_Base_MspInit+0x168>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <HAL_TIM_Base_MspInit+0x168>)
 8000974:	2280      	movs	r2, #128	; 0x80
 8000976:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <HAL_TIM_Base_MspInit+0x168>)
 800097a:	2280      	movs	r2, #128	; 0x80
 800097c:	0052      	lsls	r2, r2, #1
 800097e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000980:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <HAL_TIM_Base_MspInit+0x168>)
 8000982:	2280      	movs	r2, #128	; 0x80
 8000984:	00d2      	lsls	r2, r2, #3
 8000986:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <HAL_TIM_Base_MspInit+0x168>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <HAL_TIM_Base_MspInit+0x168>)
 8000990:	2200      	movs	r2, #0
 8000992:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8000994:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <HAL_TIM_Base_MspInit+0x168>)
 8000996:	0018      	movs	r0, r3
 8000998:	f000 fa5a 	bl	8000e50 <HAL_DMA_Init>
 800099c:	1e03      	subs	r3, r0, #0
 800099e:	d001      	beq.n	80009a4 <HAL_TIM_Base_MspInit+0x13c>
      Error_Handler();
 80009a0:	f7ff ff38 	bl	8000814 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <HAL_TIM_Base_MspInit+0x168>)
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <HAL_TIM_Base_MspInit+0x168>)
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <HAL_TIM_Base_MspInit+0x168>)
 80009b4:	639a      	str	r2, [r3, #56]	; 0x38
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_TIM_Base_MspInit+0x168>)
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	625a      	str	r2, [r3, #36]	; 0x24
}
 80009bc:	46c0      	nop			; (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	b00d      	add	sp, #52	; 0x34
 80009c2:	bd90      	pop	{r4, r7, pc}
 80009c4:	40012c00 	.word	0x40012c00
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40000400 	.word	0x40000400
 80009d0:	200000b8 	.word	0x200000b8
 80009d4:	40020044 	.word	0x40020044

080009d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b08b      	sub	sp, #44	; 0x2c
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	2414      	movs	r4, #20
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	0018      	movs	r0, r3
 80009e6:	2314      	movs	r3, #20
 80009e8:	001a      	movs	r2, r3
 80009ea:	2100      	movs	r1, #0
 80009ec:	f002 fbe4 	bl	80031b8 <memset>
  if(huart->Instance==USART1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a2f      	ldr	r2, [pc, #188]	; (8000ab4 <HAL_UART_MspInit+0xdc>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d158      	bne.n	8000aac <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009fa:	4b2f      	ldr	r3, [pc, #188]	; (8000ab8 <HAL_UART_MspInit+0xe0>)
 80009fc:	699a      	ldr	r2, [r3, #24]
 80009fe:	4b2e      	ldr	r3, [pc, #184]	; (8000ab8 <HAL_UART_MspInit+0xe0>)
 8000a00:	2180      	movs	r1, #128	; 0x80
 8000a02:	01c9      	lsls	r1, r1, #7
 8000a04:	430a      	orrs	r2, r1
 8000a06:	619a      	str	r2, [r3, #24]
 8000a08:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <HAL_UART_MspInit+0xe0>)
 8000a0a:	699a      	ldr	r2, [r3, #24]
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	01db      	lsls	r3, r3, #7
 8000a10:	4013      	ands	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <HAL_UART_MspInit+0xe0>)
 8000a18:	695a      	ldr	r2, [r3, #20]
 8000a1a:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <HAL_UART_MspInit+0xe0>)
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	0289      	lsls	r1, r1, #10
 8000a20:	430a      	orrs	r2, r1
 8000a22:	615a      	str	r2, [r3, #20]
 8000a24:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <HAL_UART_MspInit+0xe0>)
 8000a26:	695a      	ldr	r2, [r3, #20]
 8000a28:	2380      	movs	r3, #128	; 0x80
 8000a2a:	029b      	lsls	r3, r3, #10
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a32:	0021      	movs	r1, r4
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	220c      	movs	r2, #12
 8000a38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2203      	movs	r2, #3
 8000a4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2201      	movs	r2, #1
 8000a50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	187a      	adds	r2, r7, r1
 8000a54:	2390      	movs	r3, #144	; 0x90
 8000a56:	05db      	lsls	r3, r3, #23
 8000a58:	0011      	movs	r1, r2
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f000 fb90 	bl	8001180 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <HAL_UART_MspInit+0xe4>)
 8000a62:	4a17      	ldr	r2, [pc, #92]	; (8000ac0 <HAL_UART_MspInit+0xe8>)
 8000a64:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <HAL_UART_MspInit+0xe4>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <HAL_UART_MspInit+0xe4>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_UART_MspInit+0xe4>)
 8000a74:	2280      	movs	r2, #128	; 0x80
 8000a76:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a78:	4b10      	ldr	r3, [pc, #64]	; (8000abc <HAL_UART_MspInit+0xe4>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <HAL_UART_MspInit+0xe4>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000a84:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <HAL_UART_MspInit+0xe4>)
 8000a86:	2220      	movs	r2, #32
 8000a88:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <HAL_UART_MspInit+0xe4>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a90:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <HAL_UART_MspInit+0xe4>)
 8000a92:	0018      	movs	r0, r3
 8000a94:	f000 f9dc 	bl	8000e50 <HAL_DMA_Init>
 8000a98:	1e03      	subs	r3, r0, #0
 8000a9a:	d001      	beq.n	8000aa0 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000a9c:	f7ff feba 	bl	8000814 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a06      	ldr	r2, [pc, #24]	; (8000abc <HAL_UART_MspInit+0xe4>)
 8000aa4:	675a      	str	r2, [r3, #116]	; 0x74
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_UART_MspInit+0xe4>)
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b00b      	add	sp, #44	; 0x2c
 8000ab2:	bd90      	pop	{r4, r7, pc}
 8000ab4:	40013800 	.word	0x40013800
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	20000184 	.word	0x20000184
 8000ac0:	40020030 	.word	0x40020030

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <NMI_Handler+0x4>

08000aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <HardFault_Handler+0x4>

08000ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae8:	f000 f894 	bl	8000c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 fa56 	bl	8000fac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	20000184 	.word	0x20000184

08000b0c <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <DMA1_Channel4_5_IRQHandler+0x14>)
 8000b12:	0018      	movs	r0, r3
 8000b14:	f000 fa4a 	bl	8000fac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	200000b8 	.word	0x200000b8

08000b24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b30:	480d      	ldr	r0, [pc, #52]	; (8000b68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b32:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b34:	f7ff fff6 	bl	8000b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b38:	480c      	ldr	r0, [pc, #48]	; (8000b6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b3a:	490d      	ldr	r1, [pc, #52]	; (8000b70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	; (8000b74 <LoopForever+0xe>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b40:	e002      	b.n	8000b48 <LoopCopyDataInit>

08000b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b46:	3304      	adds	r3, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b4c:	d3f9      	bcc.n	8000b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b50:	4c0a      	ldr	r4, [pc, #40]	; (8000b7c <LoopForever+0x16>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b54:	e001      	b.n	8000b5a <LoopFillZerobss>

08000b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b58:	3204      	adds	r2, #4

08000b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b5c:	d3fb      	bcc.n	8000b56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b5e:	f002 faeb 	bl	8003138 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b62:	f7ff fb65 	bl	8000230 <main>

08000b66 <LoopForever>:

LoopForever:
    b LoopForever
 8000b66:	e7fe      	b.n	8000b66 <LoopForever>
  ldr   r0, =_estack
 8000b68:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b74:	0800330c 	.word	0x0800330c
  ldr r2, =_sbss
 8000b78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b7c:	200001cc 	.word	0x200001cc

08000b80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC1_IRQHandler>
	...

08000b84 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b88:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <HAL_Init+0x24>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_Init+0x24>)
 8000b8e:	2110      	movs	r1, #16
 8000b90:	430a      	orrs	r2, r1
 8000b92:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b94:	2003      	movs	r0, #3
 8000b96:	f000 f809 	bl	8000bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9a:	f7ff fe41 	bl	8000820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	40022000 	.word	0x40022000

08000bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b590      	push	{r4, r7, lr}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <HAL_InitTick+0x5c>)
 8000bb6:	681c      	ldr	r4, [r3, #0]
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <HAL_InitTick+0x60>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	0019      	movs	r1, r3
 8000bbe:	23fa      	movs	r3, #250	; 0xfa
 8000bc0:	0098      	lsls	r0, r3, #2
 8000bc2:	f7ff faa9 	bl	8000118 <__udivsi3>
 8000bc6:	0003      	movs	r3, r0
 8000bc8:	0019      	movs	r1, r3
 8000bca:	0020      	movs	r0, r4
 8000bcc:	f7ff faa4 	bl	8000118 <__udivsi3>
 8000bd0:	0003      	movs	r3, r0
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f000 f92f 	bl	8000e36 <HAL_SYSTICK_Config>
 8000bd8:	1e03      	subs	r3, r0, #0
 8000bda:	d001      	beq.n	8000be0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e00f      	b.n	8000c00 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b03      	cmp	r3, #3
 8000be4:	d80b      	bhi.n	8000bfe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	2301      	movs	r3, #1
 8000bea:	425b      	negs	r3, r3
 8000bec:	2200      	movs	r2, #0
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f000 f8fc 	bl	8000dec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_InitTick+0x64>)
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e000      	b.n	8000c00 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	0018      	movs	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b003      	add	sp, #12
 8000c06:	bd90      	pop	{r4, r7, pc}
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	20000004 	.word	0x20000004

08000c14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <HAL_IncTick+0x1c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_IncTick+0x20>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	18d2      	adds	r2, r2, r3
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <HAL_IncTick+0x20>)
 8000c26:	601a      	str	r2, [r3, #0]
}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	20000008 	.word	0x20000008
 8000c34:	200001c8 	.word	0x200001c8

08000c38 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b02      	ldr	r3, [pc, #8]	; (8000c48 <HAL_GetTick+0x10>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	0018      	movs	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	200001c8 	.word	0x200001c8

08000c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c54:	f7ff fff0 	bl	8000c38 <HAL_GetTick>
 8000c58:	0003      	movs	r3, r0
 8000c5a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	3301      	adds	r3, #1
 8000c64:	d005      	beq.n	8000c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <HAL_Delay+0x44>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	001a      	movs	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	189b      	adds	r3, r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	f7ff ffe0 	bl	8000c38 <HAL_GetTick>
 8000c78:	0002      	movs	r2, r0
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d8f7      	bhi.n	8000c74 <HAL_Delay+0x28>
  {
  }
}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b004      	add	sp, #16
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	20000008 	.word	0x20000008

08000c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	0002      	movs	r2, r0
 8000c9c:	1dfb      	adds	r3, r7, #7
 8000c9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ca0:	1dfb      	adds	r3, r7, #7
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b7f      	cmp	r3, #127	; 0x7f
 8000ca6:	d809      	bhi.n	8000cbc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca8:	1dfb      	adds	r3, r7, #7
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	001a      	movs	r2, r3
 8000cae:	231f      	movs	r3, #31
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <__NVIC_EnableIRQ+0x30>)
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	000a      	movs	r2, r1
 8000cba:	601a      	str	r2, [r3, #0]
  }
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b002      	add	sp, #8
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	0002      	movs	r2, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b7f      	cmp	r3, #127	; 0x7f
 8000cdc:	d828      	bhi.n	8000d30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cde:	4a2f      	ldr	r2, [pc, #188]	; (8000d9c <__NVIC_SetPriority+0xd4>)
 8000ce0:	1dfb      	adds	r3, r7, #7
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	b25b      	sxtb	r3, r3
 8000ce6:	089b      	lsrs	r3, r3, #2
 8000ce8:	33c0      	adds	r3, #192	; 0xc0
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	589b      	ldr	r3, [r3, r2]
 8000cee:	1dfa      	adds	r2, r7, #7
 8000cf0:	7812      	ldrb	r2, [r2, #0]
 8000cf2:	0011      	movs	r1, r2
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	400a      	ands	r2, r1
 8000cf8:	00d2      	lsls	r2, r2, #3
 8000cfa:	21ff      	movs	r1, #255	; 0xff
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	000a      	movs	r2, r1
 8000d00:	43d2      	mvns	r2, r2
 8000d02:	401a      	ands	r2, r3
 8000d04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	019b      	lsls	r3, r3, #6
 8000d0a:	22ff      	movs	r2, #255	; 0xff
 8000d0c:	401a      	ands	r2, r3
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	0018      	movs	r0, r3
 8000d14:	2303      	movs	r3, #3
 8000d16:	4003      	ands	r3, r0
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d1c:	481f      	ldr	r0, [pc, #124]	; (8000d9c <__NVIC_SetPriority+0xd4>)
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	089b      	lsrs	r3, r3, #2
 8000d26:	430a      	orrs	r2, r1
 8000d28:	33c0      	adds	r3, #192	; 0xc0
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d2e:	e031      	b.n	8000d94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d30:	4a1b      	ldr	r2, [pc, #108]	; (8000da0 <__NVIC_SetPriority+0xd8>)
 8000d32:	1dfb      	adds	r3, r7, #7
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	0019      	movs	r1, r3
 8000d38:	230f      	movs	r3, #15
 8000d3a:	400b      	ands	r3, r1
 8000d3c:	3b08      	subs	r3, #8
 8000d3e:	089b      	lsrs	r3, r3, #2
 8000d40:	3306      	adds	r3, #6
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	18d3      	adds	r3, r2, r3
 8000d46:	3304      	adds	r3, #4
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	1dfa      	adds	r2, r7, #7
 8000d4c:	7812      	ldrb	r2, [r2, #0]
 8000d4e:	0011      	movs	r1, r2
 8000d50:	2203      	movs	r2, #3
 8000d52:	400a      	ands	r2, r1
 8000d54:	00d2      	lsls	r2, r2, #3
 8000d56:	21ff      	movs	r1, #255	; 0xff
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	000a      	movs	r2, r1
 8000d5c:	43d2      	mvns	r2, r2
 8000d5e:	401a      	ands	r2, r3
 8000d60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	019b      	lsls	r3, r3, #6
 8000d66:	22ff      	movs	r2, #255	; 0xff
 8000d68:	401a      	ands	r2, r3
 8000d6a:	1dfb      	adds	r3, r7, #7
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	0018      	movs	r0, r3
 8000d70:	2303      	movs	r3, #3
 8000d72:	4003      	ands	r3, r0
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d78:	4809      	ldr	r0, [pc, #36]	; (8000da0 <__NVIC_SetPriority+0xd8>)
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	001c      	movs	r4, r3
 8000d80:	230f      	movs	r3, #15
 8000d82:	4023      	ands	r3, r4
 8000d84:	3b08      	subs	r3, #8
 8000d86:	089b      	lsrs	r3, r3, #2
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	3306      	adds	r3, #6
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	18c3      	adds	r3, r0, r3
 8000d90:	3304      	adds	r3, #4
 8000d92:	601a      	str	r2, [r3, #0]
}
 8000d94:	46c0      	nop			; (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b003      	add	sp, #12
 8000d9a:	bd90      	pop	{r4, r7, pc}
 8000d9c:	e000e100 	.word	0xe000e100
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	1e5a      	subs	r2, r3, #1
 8000db0:	2380      	movs	r3, #128	; 0x80
 8000db2:	045b      	lsls	r3, r3, #17
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d301      	bcc.n	8000dbc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db8:	2301      	movs	r3, #1
 8000dba:	e010      	b.n	8000dde <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <SysTick_Config+0x44>)
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	3a01      	subs	r2, #1
 8000dc2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	425b      	negs	r3, r3
 8000dc8:	2103      	movs	r1, #3
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f7ff ff7c 	bl	8000cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <SysTick_Config+0x44>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd6:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <SysTick_Config+0x44>)
 8000dd8:	2207      	movs	r2, #7
 8000dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	0018      	movs	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b002      	add	sp, #8
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	e000e010 	.word	0xe000e010

08000dec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
 8000df6:	210f      	movs	r1, #15
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	1c02      	adds	r2, r0, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b25b      	sxtb	r3, r3
 8000e06:	0011      	movs	r1, r2
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f7ff ff5d 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b004      	add	sp, #16
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	0002      	movs	r2, r0
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f7ff ff33 	bl	8000c94 <__NVIC_EnableIRQ>
}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b002      	add	sp, #8
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	0018      	movs	r0, r3
 8000e42:	f7ff ffaf 	bl	8000da4 <SysTick_Config>
 8000e46:	0003      	movs	r3, r0
}
 8000e48:	0018      	movs	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b002      	add	sp, #8
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e036      	b.n	8000ed4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2221      	movs	r2, #33	; 0x21
 8000e6a:	2102      	movs	r1, #2
 8000e6c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	4a18      	ldr	r2, [pc, #96]	; (8000edc <HAL_DMA_Init+0x8c>)
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69db      	ldr	r3, [r3, #28]
 8000ea4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f000 f946 	bl	8001148 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2221      	movs	r2, #33	; 0x21
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2220      	movs	r2, #32
 8000ece:	2100      	movs	r1, #0
 8000ed0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b004      	add	sp, #16
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	ffffc00f 	.word	0xffffc00f

08000ee0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
 8000eec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000eee:	2317      	movs	r3, #23
 8000ef0:	18fb      	adds	r3, r7, r3
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2220      	movs	r2, #32
 8000efa:	5c9b      	ldrb	r3, [r3, r2]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d101      	bne.n	8000f04 <HAL_DMA_Start_IT+0x24>
 8000f00:	2302      	movs	r3, #2
 8000f02:	e04f      	b.n	8000fa4 <HAL_DMA_Start_IT+0xc4>
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2220      	movs	r2, #32
 8000f08:	2101      	movs	r1, #1
 8000f0a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2221      	movs	r2, #33	; 0x21
 8000f10:	5c9b      	ldrb	r3, [r3, r2]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d13a      	bne.n	8000f8e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2221      	movs	r2, #33	; 0x21
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2200      	movs	r2, #0
 8000f24:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2101      	movs	r1, #1
 8000f32:	438a      	bics	r2, r1
 8000f34:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	68b9      	ldr	r1, [r7, #8]
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f000 f8d7 	bl	80010f0 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d008      	beq.n	8000f5c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	210e      	movs	r1, #14
 8000f56:	430a      	orrs	r2, r1
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	e00f      	b.n	8000f7c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	210a      	movs	r1, #10
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2104      	movs	r1, #4
 8000f78:	438a      	bics	r2, r1
 8000f7a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2101      	movs	r1, #1
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	e007      	b.n	8000f9e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2220      	movs	r2, #32
 8000f92:	2100      	movs	r1, #0
 8000f94:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f96:	2317      	movs	r3, #23
 8000f98:	18fb      	adds	r3, r7, r3
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000f9e:	2317      	movs	r3, #23
 8000fa0:	18fb      	adds	r3, r7, r3
 8000fa2:	781b      	ldrb	r3, [r3, #0]
}
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b006      	add	sp, #24
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	2204      	movs	r2, #4
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	0013      	movs	r3, r2
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d024      	beq.n	800101e <HAL_DMA_IRQHandler+0x72>
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	4013      	ands	r3, r2
 8000fda:	d020      	beq.n	800101e <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2220      	movs	r2, #32
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	d107      	bne.n	8000ff8 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2104      	movs	r1, #4
 8000ff4:	438a      	bics	r2, r1
 8000ff6:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001000:	2104      	movs	r1, #4
 8001002:	4091      	lsls	r1, r2
 8001004:	000a      	movs	r2, r1
 8001006:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100c:	2b00      	cmp	r3, #0
 800100e:	d100      	bne.n	8001012 <HAL_DMA_IRQHandler+0x66>
 8001010:	e06a      	b.n	80010e8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	0010      	movs	r0, r2
 800101a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800101c:	e064      	b.n	80010e8 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	2202      	movs	r2, #2
 8001024:	409a      	lsls	r2, r3
 8001026:	0013      	movs	r3, r2
 8001028:	68fa      	ldr	r2, [r7, #12]
 800102a:	4013      	ands	r3, r2
 800102c:	d02b      	beq.n	8001086 <HAL_DMA_IRQHandler+0xda>
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2202      	movs	r2, #2
 8001032:	4013      	ands	r3, r2
 8001034:	d027      	beq.n	8001086 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2220      	movs	r2, #32
 800103e:	4013      	ands	r3, r2
 8001040:	d10b      	bne.n	800105a <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	210a      	movs	r1, #10
 800104e:	438a      	bics	r2, r1
 8001050:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2221      	movs	r2, #33	; 0x21
 8001056:	2101      	movs	r1, #1
 8001058:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001062:	2102      	movs	r1, #2
 8001064:	4091      	lsls	r1, r2
 8001066:	000a      	movs	r2, r1
 8001068:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2220      	movs	r2, #32
 800106e:	2100      	movs	r1, #0
 8001070:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001076:	2b00      	cmp	r3, #0
 8001078:	d036      	beq.n	80010e8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	0010      	movs	r0, r2
 8001082:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001084:	e030      	b.n	80010e8 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	2208      	movs	r2, #8
 800108c:	409a      	lsls	r2, r3
 800108e:	0013      	movs	r3, r2
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	4013      	ands	r3, r2
 8001094:	d028      	beq.n	80010e8 <HAL_DMA_IRQHandler+0x13c>
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	2208      	movs	r2, #8
 800109a:	4013      	ands	r3, r2
 800109c:	d024      	beq.n	80010e8 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	210e      	movs	r1, #14
 80010aa:	438a      	bics	r2, r1
 80010ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b6:	2101      	movs	r1, #1
 80010b8:	4091      	lsls	r1, r2
 80010ba:	000a      	movs	r2, r1
 80010bc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2221      	movs	r2, #33	; 0x21
 80010c8:	2101      	movs	r1, #1
 80010ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2220      	movs	r2, #32
 80010d0:	2100      	movs	r1, #0
 80010d2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d005      	beq.n	80010e8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	0010      	movs	r0, r2
 80010e4:	4798      	blx	r3
    }
  }
}
 80010e6:	e7ff      	b.n	80010e8 <HAL_DMA_IRQHandler+0x13c>
 80010e8:	46c0      	nop			; (mov r8, r8)
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b004      	add	sp, #16
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
 80010fc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001106:	2101      	movs	r1, #1
 8001108:	4091      	lsls	r1, r2
 800110a:	000a      	movs	r2, r1
 800110c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b10      	cmp	r3, #16
 800111c:	d108      	bne.n	8001130 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800112e:	e007      	b.n	8001140 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68ba      	ldr	r2, [r7, #8]
 8001136:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	60da      	str	r2, [r3, #12]
}
 8001140:	46c0      	nop			; (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	b004      	add	sp, #16
 8001146:	bd80      	pop	{r7, pc}

08001148 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a08      	ldr	r2, [pc, #32]	; (8001178 <DMA_CalcBaseAndBitshift+0x30>)
 8001156:	4694      	mov	ip, r2
 8001158:	4463      	add	r3, ip
 800115a:	2114      	movs	r1, #20
 800115c:	0018      	movs	r0, r3
 800115e:	f7fe ffdb 	bl	8000118 <__udivsi3>
 8001162:	0003      	movs	r3, r0
 8001164:	009a      	lsls	r2, r3, #2
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a03      	ldr	r2, [pc, #12]	; (800117c <DMA_CalcBaseAndBitshift+0x34>)
 800116e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	b002      	add	sp, #8
 8001176:	bd80      	pop	{r7, pc}
 8001178:	bffdfff8 	.word	0xbffdfff8
 800117c:	40020000 	.word	0x40020000

08001180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118e:	e14f      	b.n	8001430 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2101      	movs	r1, #1
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	4091      	lsls	r1, r2
 800119a:	000a      	movs	r2, r1
 800119c:	4013      	ands	r3, r2
 800119e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d100      	bne.n	80011a8 <HAL_GPIO_Init+0x28>
 80011a6:	e140      	b.n	800142a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2203      	movs	r2, #3
 80011ae:	4013      	ands	r3, r2
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d005      	beq.n	80011c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2203      	movs	r2, #3
 80011ba:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d130      	bne.n	8001222 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	409a      	lsls	r2, r3
 80011ce:	0013      	movs	r3, r2
 80011d0:	43da      	mvns	r2, r3
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	68da      	ldr	r2, [r3, #12]
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	409a      	lsls	r2, r3
 80011e2:	0013      	movs	r3, r2
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f6:	2201      	movs	r2, #1
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
 80011fc:	0013      	movs	r3, r2
 80011fe:	43da      	mvns	r2, r3
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	091b      	lsrs	r3, r3, #4
 800120c:	2201      	movs	r2, #1
 800120e:	401a      	ands	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	409a      	lsls	r2, r3
 8001214:	0013      	movs	r3, r2
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2203      	movs	r2, #3
 8001228:	4013      	ands	r3, r2
 800122a:	2b03      	cmp	r3, #3
 800122c:	d017      	beq.n	800125e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	2203      	movs	r2, #3
 800123a:	409a      	lsls	r2, r3
 800123c:	0013      	movs	r3, r2
 800123e:	43da      	mvns	r2, r3
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	409a      	lsls	r2, r3
 8001250:	0013      	movs	r3, r2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2203      	movs	r2, #3
 8001264:	4013      	ands	r3, r2
 8001266:	2b02      	cmp	r3, #2
 8001268:	d123      	bne.n	80012b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	08da      	lsrs	r2, r3, #3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3208      	adds	r2, #8
 8001272:	0092      	lsls	r2, r2, #2
 8001274:	58d3      	ldr	r3, [r2, r3]
 8001276:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	2207      	movs	r2, #7
 800127c:	4013      	ands	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	220f      	movs	r2, #15
 8001282:	409a      	lsls	r2, r3
 8001284:	0013      	movs	r3, r2
 8001286:	43da      	mvns	r2, r3
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	691a      	ldr	r2, [r3, #16]
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	2107      	movs	r1, #7
 8001296:	400b      	ands	r3, r1
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	409a      	lsls	r2, r3
 800129c:	0013      	movs	r3, r2
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	08da      	lsrs	r2, r3, #3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3208      	adds	r2, #8
 80012ac:	0092      	lsls	r2, r2, #2
 80012ae:	6939      	ldr	r1, [r7, #16]
 80012b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	2203      	movs	r2, #3
 80012be:	409a      	lsls	r2, r3
 80012c0:	0013      	movs	r3, r2
 80012c2:	43da      	mvns	r2, r3
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4013      	ands	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2203      	movs	r2, #3
 80012d0:	401a      	ands	r2, r3
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	409a      	lsls	r2, r3
 80012d8:	0013      	movs	r3, r2
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	23c0      	movs	r3, #192	; 0xc0
 80012ec:	029b      	lsls	r3, r3, #10
 80012ee:	4013      	ands	r3, r2
 80012f0:	d100      	bne.n	80012f4 <HAL_GPIO_Init+0x174>
 80012f2:	e09a      	b.n	800142a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f4:	4b54      	ldr	r3, [pc, #336]	; (8001448 <HAL_GPIO_Init+0x2c8>)
 80012f6:	699a      	ldr	r2, [r3, #24]
 80012f8:	4b53      	ldr	r3, [pc, #332]	; (8001448 <HAL_GPIO_Init+0x2c8>)
 80012fa:	2101      	movs	r1, #1
 80012fc:	430a      	orrs	r2, r1
 80012fe:	619a      	str	r2, [r3, #24]
 8001300:	4b51      	ldr	r3, [pc, #324]	; (8001448 <HAL_GPIO_Init+0x2c8>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	2201      	movs	r2, #1
 8001306:	4013      	ands	r3, r2
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800130c:	4a4f      	ldr	r2, [pc, #316]	; (800144c <HAL_GPIO_Init+0x2cc>)
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3302      	adds	r3, #2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	589b      	ldr	r3, [r3, r2]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	2203      	movs	r2, #3
 800131e:	4013      	ands	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	220f      	movs	r2, #15
 8001324:	409a      	lsls	r2, r3
 8001326:	0013      	movs	r3, r2
 8001328:	43da      	mvns	r2, r3
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	2390      	movs	r3, #144	; 0x90
 8001334:	05db      	lsls	r3, r3, #23
 8001336:	429a      	cmp	r2, r3
 8001338:	d013      	beq.n	8001362 <HAL_GPIO_Init+0x1e2>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a44      	ldr	r2, [pc, #272]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d00d      	beq.n	800135e <HAL_GPIO_Init+0x1de>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a43      	ldr	r2, [pc, #268]	; (8001454 <HAL_GPIO_Init+0x2d4>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d007      	beq.n	800135a <HAL_GPIO_Init+0x1da>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a42      	ldr	r2, [pc, #264]	; (8001458 <HAL_GPIO_Init+0x2d8>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d101      	bne.n	8001356 <HAL_GPIO_Init+0x1d6>
 8001352:	2303      	movs	r3, #3
 8001354:	e006      	b.n	8001364 <HAL_GPIO_Init+0x1e4>
 8001356:	2305      	movs	r3, #5
 8001358:	e004      	b.n	8001364 <HAL_GPIO_Init+0x1e4>
 800135a:	2302      	movs	r3, #2
 800135c:	e002      	b.n	8001364 <HAL_GPIO_Init+0x1e4>
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <HAL_GPIO_Init+0x1e4>
 8001362:	2300      	movs	r3, #0
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	2103      	movs	r1, #3
 8001368:	400a      	ands	r2, r1
 800136a:	0092      	lsls	r2, r2, #2
 800136c:	4093      	lsls	r3, r2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001374:	4935      	ldr	r1, [pc, #212]	; (800144c <HAL_GPIO_Init+0x2cc>)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	3302      	adds	r3, #2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001382:	4b36      	ldr	r3, [pc, #216]	; (800145c <HAL_GPIO_Init+0x2dc>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43da      	mvns	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	035b      	lsls	r3, r3, #13
 800139a:	4013      	ands	r3, r2
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013a6:	4b2d      	ldr	r3, [pc, #180]	; (800145c <HAL_GPIO_Init+0x2dc>)
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80013ac:	4b2b      	ldr	r3, [pc, #172]	; (800145c <HAL_GPIO_Init+0x2dc>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	43da      	mvns	r2, r3
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	039b      	lsls	r3, r3, #14
 80013c4:	4013      	ands	r3, r2
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013d0:	4b22      	ldr	r3, [pc, #136]	; (800145c <HAL_GPIO_Init+0x2dc>)
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80013d6:	4b21      	ldr	r3, [pc, #132]	; (800145c <HAL_GPIO_Init+0x2dc>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	43da      	mvns	r2, r3
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4013      	ands	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	029b      	lsls	r3, r3, #10
 80013ee:	4013      	ands	r3, r2
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013fa:	4b18      	ldr	r3, [pc, #96]	; (800145c <HAL_GPIO_Init+0x2dc>)
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001400:	4b16      	ldr	r3, [pc, #88]	; (800145c <HAL_GPIO_Init+0x2dc>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	43da      	mvns	r2, r3
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	025b      	lsls	r3, r3, #9
 8001418:	4013      	ands	r3, r2
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001424:	4b0d      	ldr	r3, [pc, #52]	; (800145c <HAL_GPIO_Init+0x2dc>)
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	3301      	adds	r3, #1
 800142e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	40da      	lsrs	r2, r3
 8001438:	1e13      	subs	r3, r2, #0
 800143a:	d000      	beq.n	800143e <HAL_GPIO_Init+0x2be>
 800143c:	e6a8      	b.n	8001190 <HAL_GPIO_Init+0x10>
  } 
}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	46c0      	nop			; (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	b006      	add	sp, #24
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40021000 	.word	0x40021000
 800144c:	40010000 	.word	0x40010000
 8001450:	48000400 	.word	0x48000400
 8001454:	48000800 	.word	0x48000800
 8001458:	48000c00 	.word	0x48000c00
 800145c:	40010400 	.word	0x40010400

08001460 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	000a      	movs	r2, r1
 800146a:	1cbb      	adds	r3, r7, #2
 800146c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	1cba      	adds	r2, r7, #2
 8001474:	8812      	ldrh	r2, [r2, #0]
 8001476:	4013      	ands	r3, r2
 8001478:	d004      	beq.n	8001484 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800147a:	230f      	movs	r3, #15
 800147c:	18fb      	adds	r3, r7, r3
 800147e:	2201      	movs	r2, #1
 8001480:	701a      	strb	r2, [r3, #0]
 8001482:	e003      	b.n	800148c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001484:	230f      	movs	r3, #15
 8001486:	18fb      	adds	r3, r7, r3
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800148c:	230f      	movs	r3, #15
 800148e:	18fb      	adds	r3, r7, r3
 8001490:	781b      	ldrb	r3, [r3, #0]
  }
 8001492:	0018      	movs	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	b004      	add	sp, #16
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e301      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2201      	movs	r2, #1
 80014b4:	4013      	ands	r3, r2
 80014b6:	d100      	bne.n	80014ba <HAL_RCC_OscConfig+0x1e>
 80014b8:	e08d      	b.n	80015d6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014ba:	4bc3      	ldr	r3, [pc, #780]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	220c      	movs	r2, #12
 80014c0:	4013      	ands	r3, r2
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	d00e      	beq.n	80014e4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014c6:	4bc0      	ldr	r3, [pc, #768]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	220c      	movs	r2, #12
 80014cc:	4013      	ands	r3, r2
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d116      	bne.n	8001500 <HAL_RCC_OscConfig+0x64>
 80014d2:	4bbd      	ldr	r3, [pc, #756]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	025b      	lsls	r3, r3, #9
 80014da:	401a      	ands	r2, r3
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	025b      	lsls	r3, r3, #9
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d10d      	bne.n	8001500 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e4:	4bb8      	ldr	r3, [pc, #736]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	029b      	lsls	r3, r3, #10
 80014ec:	4013      	ands	r3, r2
 80014ee:	d100      	bne.n	80014f2 <HAL_RCC_OscConfig+0x56>
 80014f0:	e070      	b.n	80015d4 <HAL_RCC_OscConfig+0x138>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d000      	beq.n	80014fc <HAL_RCC_OscConfig+0x60>
 80014fa:	e06b      	b.n	80015d4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e2d8      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d107      	bne.n	8001518 <HAL_RCC_OscConfig+0x7c>
 8001508:	4baf      	ldr	r3, [pc, #700]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4bae      	ldr	r3, [pc, #696]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 800150e:	2180      	movs	r1, #128	; 0x80
 8001510:	0249      	lsls	r1, r1, #9
 8001512:	430a      	orrs	r2, r1
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	e02f      	b.n	8001578 <HAL_RCC_OscConfig+0xdc>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10c      	bne.n	800153a <HAL_RCC_OscConfig+0x9e>
 8001520:	4ba9      	ldr	r3, [pc, #676]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4ba8      	ldr	r3, [pc, #672]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001526:	49a9      	ldr	r1, [pc, #676]	; (80017cc <HAL_RCC_OscConfig+0x330>)
 8001528:	400a      	ands	r2, r1
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	4ba6      	ldr	r3, [pc, #664]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4ba5      	ldr	r3, [pc, #660]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001532:	49a7      	ldr	r1, [pc, #668]	; (80017d0 <HAL_RCC_OscConfig+0x334>)
 8001534:	400a      	ands	r2, r1
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	e01e      	b.n	8001578 <HAL_RCC_OscConfig+0xdc>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b05      	cmp	r3, #5
 8001540:	d10e      	bne.n	8001560 <HAL_RCC_OscConfig+0xc4>
 8001542:	4ba1      	ldr	r3, [pc, #644]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	4ba0      	ldr	r3, [pc, #640]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	02c9      	lsls	r1, r1, #11
 800154c:	430a      	orrs	r2, r1
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	4b9d      	ldr	r3, [pc, #628]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b9c      	ldr	r3, [pc, #624]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001556:	2180      	movs	r1, #128	; 0x80
 8001558:	0249      	lsls	r1, r1, #9
 800155a:	430a      	orrs	r2, r1
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	e00b      	b.n	8001578 <HAL_RCC_OscConfig+0xdc>
 8001560:	4b99      	ldr	r3, [pc, #612]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b98      	ldr	r3, [pc, #608]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001566:	4999      	ldr	r1, [pc, #612]	; (80017cc <HAL_RCC_OscConfig+0x330>)
 8001568:	400a      	ands	r2, r1
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	4b96      	ldr	r3, [pc, #600]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b95      	ldr	r3, [pc, #596]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001572:	4997      	ldr	r1, [pc, #604]	; (80017d0 <HAL_RCC_OscConfig+0x334>)
 8001574:	400a      	ands	r2, r1
 8001576:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d014      	beq.n	80015aa <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff fb5a 	bl	8000c38 <HAL_GetTick>
 8001584:	0003      	movs	r3, r0
 8001586:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800158a:	f7ff fb55 	bl	8000c38 <HAL_GetTick>
 800158e:	0002      	movs	r2, r0
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b64      	cmp	r3, #100	; 0x64
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e28a      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159c:	4b8a      	ldr	r3, [pc, #552]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	029b      	lsls	r3, r3, #10
 80015a4:	4013      	ands	r3, r2
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0xee>
 80015a8:	e015      	b.n	80015d6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015aa:	f7ff fb45 	bl	8000c38 <HAL_GetTick>
 80015ae:	0003      	movs	r3, r0
 80015b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b4:	f7ff fb40 	bl	8000c38 <HAL_GetTick>
 80015b8:	0002      	movs	r2, r0
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b64      	cmp	r3, #100	; 0x64
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e275      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c6:	4b80      	ldr	r3, [pc, #512]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	2380      	movs	r3, #128	; 0x80
 80015cc:	029b      	lsls	r3, r3, #10
 80015ce:	4013      	ands	r3, r2
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x118>
 80015d2:	e000      	b.n	80015d6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2202      	movs	r2, #2
 80015dc:	4013      	ands	r3, r2
 80015de:	d100      	bne.n	80015e2 <HAL_RCC_OscConfig+0x146>
 80015e0:	e069      	b.n	80016b6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015e2:	4b79      	ldr	r3, [pc, #484]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	220c      	movs	r2, #12
 80015e8:	4013      	ands	r3, r2
 80015ea:	d00b      	beq.n	8001604 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015ec:	4b76      	ldr	r3, [pc, #472]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	220c      	movs	r2, #12
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d11c      	bne.n	8001632 <HAL_RCC_OscConfig+0x196>
 80015f8:	4b73      	ldr	r3, [pc, #460]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	025b      	lsls	r3, r3, #9
 8001600:	4013      	ands	r3, r2
 8001602:	d116      	bne.n	8001632 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001604:	4b70      	ldr	r3, [pc, #448]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2202      	movs	r2, #2
 800160a:	4013      	ands	r3, r2
 800160c:	d005      	beq.n	800161a <HAL_RCC_OscConfig+0x17e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d001      	beq.n	800161a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e24b      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161a:	4b6b      	ldr	r3, [pc, #428]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	22f8      	movs	r2, #248	; 0xf8
 8001620:	4393      	bics	r3, r2
 8001622:	0019      	movs	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	00da      	lsls	r2, r3, #3
 800162a:	4b67      	ldr	r3, [pc, #412]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 800162c:	430a      	orrs	r2, r1
 800162e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001630:	e041      	b.n	80016b6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d024      	beq.n	8001684 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800163a:	4b63      	ldr	r3, [pc, #396]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	4b62      	ldr	r3, [pc, #392]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001640:	2101      	movs	r1, #1
 8001642:	430a      	orrs	r2, r1
 8001644:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff faf7 	bl	8000c38 <HAL_GetTick>
 800164a:	0003      	movs	r3, r0
 800164c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001650:	f7ff faf2 	bl	8000c38 <HAL_GetTick>
 8001654:	0002      	movs	r2, r0
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e227      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001662:	4b59      	ldr	r3, [pc, #356]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2202      	movs	r2, #2
 8001668:	4013      	ands	r3, r2
 800166a:	d0f1      	beq.n	8001650 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166c:	4b56      	ldr	r3, [pc, #344]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	22f8      	movs	r2, #248	; 0xf8
 8001672:	4393      	bics	r3, r2
 8001674:	0019      	movs	r1, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	00da      	lsls	r2, r3, #3
 800167c:	4b52      	ldr	r3, [pc, #328]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 800167e:	430a      	orrs	r2, r1
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	e018      	b.n	80016b6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001684:	4b50      	ldr	r3, [pc, #320]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b4f      	ldr	r3, [pc, #316]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 800168a:	2101      	movs	r1, #1
 800168c:	438a      	bics	r2, r1
 800168e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff fad2 	bl	8000c38 <HAL_GetTick>
 8001694:	0003      	movs	r3, r0
 8001696:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800169a:	f7ff facd 	bl	8000c38 <HAL_GetTick>
 800169e:	0002      	movs	r2, r0
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e202      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ac:	4b46      	ldr	r3, [pc, #280]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2202      	movs	r2, #2
 80016b2:	4013      	ands	r3, r2
 80016b4:	d1f1      	bne.n	800169a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2208      	movs	r2, #8
 80016bc:	4013      	ands	r3, r2
 80016be:	d036      	beq.n	800172e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d019      	beq.n	80016fc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c8:	4b3f      	ldr	r3, [pc, #252]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80016ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016cc:	4b3e      	ldr	r3, [pc, #248]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80016ce:	2101      	movs	r1, #1
 80016d0:	430a      	orrs	r2, r1
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d4:	f7ff fab0 	bl	8000c38 <HAL_GetTick>
 80016d8:	0003      	movs	r3, r0
 80016da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016de:	f7ff faab 	bl	8000c38 <HAL_GetTick>
 80016e2:	0002      	movs	r2, r0
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e1e0      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f0:	4b35      	ldr	r3, [pc, #212]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	2202      	movs	r2, #2
 80016f6:	4013      	ands	r3, r2
 80016f8:	d0f1      	beq.n	80016de <HAL_RCC_OscConfig+0x242>
 80016fa:	e018      	b.n	800172e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016fc:	4b32      	ldr	r3, [pc, #200]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80016fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001700:	4b31      	ldr	r3, [pc, #196]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001702:	2101      	movs	r1, #1
 8001704:	438a      	bics	r2, r1
 8001706:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001708:	f7ff fa96 	bl	8000c38 <HAL_GetTick>
 800170c:	0003      	movs	r3, r0
 800170e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001712:	f7ff fa91 	bl	8000c38 <HAL_GetTick>
 8001716:	0002      	movs	r2, r0
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e1c6      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001724:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	2202      	movs	r2, #2
 800172a:	4013      	ands	r3, r2
 800172c:	d1f1      	bne.n	8001712 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2204      	movs	r2, #4
 8001734:	4013      	ands	r3, r2
 8001736:	d100      	bne.n	800173a <HAL_RCC_OscConfig+0x29e>
 8001738:	e0b4      	b.n	80018a4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800173a:	201f      	movs	r0, #31
 800173c:	183b      	adds	r3, r7, r0
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001742:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001744:	69da      	ldr	r2, [r3, #28]
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	055b      	lsls	r3, r3, #21
 800174a:	4013      	ands	r3, r2
 800174c:	d110      	bne.n	8001770 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001750:	69da      	ldr	r2, [r3, #28]
 8001752:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001754:	2180      	movs	r1, #128	; 0x80
 8001756:	0549      	lsls	r1, r1, #21
 8001758:	430a      	orrs	r2, r1
 800175a:	61da      	str	r2, [r3, #28]
 800175c:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 800175e:	69da      	ldr	r2, [r3, #28]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	055b      	lsls	r3, r3, #21
 8001764:	4013      	ands	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800176a:	183b      	adds	r3, r7, r0
 800176c:	2201      	movs	r2, #1
 800176e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001770:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <HAL_RCC_OscConfig+0x338>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4013      	ands	r3, r2
 800177a:	d11a      	bne.n	80017b2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_RCC_OscConfig+0x338>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <HAL_RCC_OscConfig+0x338>)
 8001782:	2180      	movs	r1, #128	; 0x80
 8001784:	0049      	lsls	r1, r1, #1
 8001786:	430a      	orrs	r2, r1
 8001788:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800178a:	f7ff fa55 	bl	8000c38 <HAL_GetTick>
 800178e:	0003      	movs	r3, r0
 8001790:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001794:	f7ff fa50 	bl	8000c38 <HAL_GetTick>
 8001798:	0002      	movs	r2, r0
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b64      	cmp	r3, #100	; 0x64
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e185      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_RCC_OscConfig+0x338>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4013      	ands	r3, r2
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d10e      	bne.n	80017d8 <HAL_RCC_OscConfig+0x33c>
 80017ba:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80017bc:	6a1a      	ldr	r2, [r3, #32]
 80017be:	4b02      	ldr	r3, [pc, #8]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80017c0:	2101      	movs	r1, #1
 80017c2:	430a      	orrs	r2, r1
 80017c4:	621a      	str	r2, [r3, #32]
 80017c6:	e035      	b.n	8001834 <HAL_RCC_OscConfig+0x398>
 80017c8:	40021000 	.word	0x40021000
 80017cc:	fffeffff 	.word	0xfffeffff
 80017d0:	fffbffff 	.word	0xfffbffff
 80017d4:	40007000 	.word	0x40007000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10c      	bne.n	80017fa <HAL_RCC_OscConfig+0x35e>
 80017e0:	4bb6      	ldr	r3, [pc, #728]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80017e2:	6a1a      	ldr	r2, [r3, #32]
 80017e4:	4bb5      	ldr	r3, [pc, #724]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80017e6:	2101      	movs	r1, #1
 80017e8:	438a      	bics	r2, r1
 80017ea:	621a      	str	r2, [r3, #32]
 80017ec:	4bb3      	ldr	r3, [pc, #716]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80017ee:	6a1a      	ldr	r2, [r3, #32]
 80017f0:	4bb2      	ldr	r3, [pc, #712]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80017f2:	2104      	movs	r1, #4
 80017f4:	438a      	bics	r2, r1
 80017f6:	621a      	str	r2, [r3, #32]
 80017f8:	e01c      	b.n	8001834 <HAL_RCC_OscConfig+0x398>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	2b05      	cmp	r3, #5
 8001800:	d10c      	bne.n	800181c <HAL_RCC_OscConfig+0x380>
 8001802:	4bae      	ldr	r3, [pc, #696]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001804:	6a1a      	ldr	r2, [r3, #32]
 8001806:	4bad      	ldr	r3, [pc, #692]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001808:	2104      	movs	r1, #4
 800180a:	430a      	orrs	r2, r1
 800180c:	621a      	str	r2, [r3, #32]
 800180e:	4bab      	ldr	r3, [pc, #684]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001810:	6a1a      	ldr	r2, [r3, #32]
 8001812:	4baa      	ldr	r3, [pc, #680]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001814:	2101      	movs	r1, #1
 8001816:	430a      	orrs	r2, r1
 8001818:	621a      	str	r2, [r3, #32]
 800181a:	e00b      	b.n	8001834 <HAL_RCC_OscConfig+0x398>
 800181c:	4ba7      	ldr	r3, [pc, #668]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 800181e:	6a1a      	ldr	r2, [r3, #32]
 8001820:	4ba6      	ldr	r3, [pc, #664]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001822:	2101      	movs	r1, #1
 8001824:	438a      	bics	r2, r1
 8001826:	621a      	str	r2, [r3, #32]
 8001828:	4ba4      	ldr	r3, [pc, #656]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 800182a:	6a1a      	ldr	r2, [r3, #32]
 800182c:	4ba3      	ldr	r3, [pc, #652]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 800182e:	2104      	movs	r1, #4
 8001830:	438a      	bics	r2, r1
 8001832:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d014      	beq.n	8001866 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183c:	f7ff f9fc 	bl	8000c38 <HAL_GetTick>
 8001840:	0003      	movs	r3, r0
 8001842:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001844:	e009      	b.n	800185a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001846:	f7ff f9f7 	bl	8000c38 <HAL_GetTick>
 800184a:	0002      	movs	r2, r0
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	4a9b      	ldr	r2, [pc, #620]	; (8001ac0 <HAL_RCC_OscConfig+0x624>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e12b      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800185a:	4b98      	ldr	r3, [pc, #608]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	2202      	movs	r2, #2
 8001860:	4013      	ands	r3, r2
 8001862:	d0f0      	beq.n	8001846 <HAL_RCC_OscConfig+0x3aa>
 8001864:	e013      	b.n	800188e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001866:	f7ff f9e7 	bl	8000c38 <HAL_GetTick>
 800186a:	0003      	movs	r3, r0
 800186c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800186e:	e009      	b.n	8001884 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001870:	f7ff f9e2 	bl	8000c38 <HAL_GetTick>
 8001874:	0002      	movs	r2, r0
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	4a91      	ldr	r2, [pc, #580]	; (8001ac0 <HAL_RCC_OscConfig+0x624>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e116      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001884:	4b8d      	ldr	r3, [pc, #564]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	2202      	movs	r2, #2
 800188a:	4013      	ands	r3, r2
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800188e:	231f      	movs	r3, #31
 8001890:	18fb      	adds	r3, r7, r3
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d105      	bne.n	80018a4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001898:	4b88      	ldr	r3, [pc, #544]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 800189a:	69da      	ldr	r2, [r3, #28]
 800189c:	4b87      	ldr	r3, [pc, #540]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 800189e:	4989      	ldr	r1, [pc, #548]	; (8001ac4 <HAL_RCC_OscConfig+0x628>)
 80018a0:	400a      	ands	r2, r1
 80018a2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2210      	movs	r2, #16
 80018aa:	4013      	ands	r3, r2
 80018ac:	d063      	beq.n	8001976 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d12a      	bne.n	800190c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018b6:	4b81      	ldr	r3, [pc, #516]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80018b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ba:	4b80      	ldr	r3, [pc, #512]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80018bc:	2104      	movs	r1, #4
 80018be:	430a      	orrs	r2, r1
 80018c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80018c2:	4b7e      	ldr	r3, [pc, #504]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80018c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018c6:	4b7d      	ldr	r3, [pc, #500]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80018c8:	2101      	movs	r1, #1
 80018ca:	430a      	orrs	r2, r1
 80018cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ce:	f7ff f9b3 	bl	8000c38 <HAL_GetTick>
 80018d2:	0003      	movs	r3, r0
 80018d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018d8:	f7ff f9ae 	bl	8000c38 <HAL_GetTick>
 80018dc:	0002      	movs	r2, r0
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e0e3      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018ea:	4b74      	ldr	r3, [pc, #464]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80018ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ee:	2202      	movs	r2, #2
 80018f0:	4013      	ands	r3, r2
 80018f2:	d0f1      	beq.n	80018d8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018f4:	4b71      	ldr	r3, [pc, #452]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80018f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f8:	22f8      	movs	r2, #248	; 0xf8
 80018fa:	4393      	bics	r3, r2
 80018fc:	0019      	movs	r1, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	00da      	lsls	r2, r3, #3
 8001904:	4b6d      	ldr	r3, [pc, #436]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001906:	430a      	orrs	r2, r1
 8001908:	635a      	str	r2, [r3, #52]	; 0x34
 800190a:	e034      	b.n	8001976 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	3305      	adds	r3, #5
 8001912:	d111      	bne.n	8001938 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001914:	4b69      	ldr	r3, [pc, #420]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001918:	4b68      	ldr	r3, [pc, #416]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 800191a:	2104      	movs	r1, #4
 800191c:	438a      	bics	r2, r1
 800191e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001920:	4b66      	ldr	r3, [pc, #408]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001924:	22f8      	movs	r2, #248	; 0xf8
 8001926:	4393      	bics	r3, r2
 8001928:	0019      	movs	r1, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	00da      	lsls	r2, r3, #3
 8001930:	4b62      	ldr	r3, [pc, #392]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001932:	430a      	orrs	r2, r1
 8001934:	635a      	str	r2, [r3, #52]	; 0x34
 8001936:	e01e      	b.n	8001976 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001938:	4b60      	ldr	r3, [pc, #384]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 800193a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800193c:	4b5f      	ldr	r3, [pc, #380]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 800193e:	2104      	movs	r1, #4
 8001940:	430a      	orrs	r2, r1
 8001942:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001944:	4b5d      	ldr	r3, [pc, #372]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001948:	4b5c      	ldr	r3, [pc, #368]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 800194a:	2101      	movs	r1, #1
 800194c:	438a      	bics	r2, r1
 800194e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001950:	f7ff f972 	bl	8000c38 <HAL_GetTick>
 8001954:	0003      	movs	r3, r0
 8001956:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800195a:	f7ff f96d 	bl	8000c38 <HAL_GetTick>
 800195e:	0002      	movs	r2, r0
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e0a2      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800196c:	4b53      	ldr	r3, [pc, #332]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 800196e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001970:	2202      	movs	r2, #2
 8001972:	4013      	ands	r3, r2
 8001974:	d1f1      	bne.n	800195a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d100      	bne.n	8001980 <HAL_RCC_OscConfig+0x4e4>
 800197e:	e097      	b.n	8001ab0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001980:	4b4e      	ldr	r3, [pc, #312]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	220c      	movs	r2, #12
 8001986:	4013      	ands	r3, r2
 8001988:	2b08      	cmp	r3, #8
 800198a:	d100      	bne.n	800198e <HAL_RCC_OscConfig+0x4f2>
 800198c:	e06b      	b.n	8001a66 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d14c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001996:	4b49      	ldr	r3, [pc, #292]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4b48      	ldr	r3, [pc, #288]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 800199c:	494a      	ldr	r1, [pc, #296]	; (8001ac8 <HAL_RCC_OscConfig+0x62c>)
 800199e:	400a      	ands	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7ff f949 	bl	8000c38 <HAL_GetTick>
 80019a6:	0003      	movs	r3, r0
 80019a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ac:	f7ff f944 	bl	8000c38 <HAL_GetTick>
 80019b0:	0002      	movs	r2, r0
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e079      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019be:	4b3f      	ldr	r3, [pc, #252]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	049b      	lsls	r3, r3, #18
 80019c6:	4013      	ands	r3, r2
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ca:	4b3c      	ldr	r3, [pc, #240]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80019cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ce:	220f      	movs	r2, #15
 80019d0:	4393      	bics	r3, r2
 80019d2:	0019      	movs	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019d8:	4b38      	ldr	r3, [pc, #224]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80019da:	430a      	orrs	r2, r1
 80019dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80019de:	4b37      	ldr	r3, [pc, #220]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	4a3a      	ldr	r2, [pc, #232]	; (8001acc <HAL_RCC_OscConfig+0x630>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	0019      	movs	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	431a      	orrs	r2, r3
 80019f2:	4b32      	ldr	r3, [pc, #200]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80019f4:	430a      	orrs	r2, r1
 80019f6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f8:	4b30      	ldr	r3, [pc, #192]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b2f      	ldr	r3, [pc, #188]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80019fe:	2180      	movs	r1, #128	; 0x80
 8001a00:	0449      	lsls	r1, r1, #17
 8001a02:	430a      	orrs	r2, r1
 8001a04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a06:	f7ff f917 	bl	8000c38 <HAL_GetTick>
 8001a0a:	0003      	movs	r3, r0
 8001a0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a10:	f7ff f912 	bl	8000c38 <HAL_GetTick>
 8001a14:	0002      	movs	r2, r0
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e047      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a22:	4b26      	ldr	r3, [pc, #152]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	2380      	movs	r3, #128	; 0x80
 8001a28:	049b      	lsls	r3, r3, #18
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCC_OscConfig+0x574>
 8001a2e:	e03f      	b.n	8001ab0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a30:	4b22      	ldr	r3, [pc, #136]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b21      	ldr	r3, [pc, #132]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001a36:	4924      	ldr	r1, [pc, #144]	; (8001ac8 <HAL_RCC_OscConfig+0x62c>)
 8001a38:	400a      	ands	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff f8fc 	bl	8000c38 <HAL_GetTick>
 8001a40:	0003      	movs	r3, r0
 8001a42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a46:	f7ff f8f7 	bl	8000c38 <HAL_GetTick>
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e02c      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a58:	4b18      	ldr	r3, [pc, #96]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	049b      	lsls	r3, r3, #18
 8001a60:	4013      	ands	r3, r2
 8001a62:	d1f0      	bne.n	8001a46 <HAL_RCC_OscConfig+0x5aa>
 8001a64:	e024      	b.n	8001ab0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e01f      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001a78:	4b10      	ldr	r3, [pc, #64]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	025b      	lsls	r3, r3, #9
 8001a84:	401a      	ands	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d10e      	bne.n	8001aac <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	220f      	movs	r2, #15
 8001a92:	401a      	ands	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d107      	bne.n	8001aac <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	23f0      	movs	r3, #240	; 0xf0
 8001aa0:	039b      	lsls	r3, r3, #14
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e000      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	b008      	add	sp, #32
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	00001388 	.word	0x00001388
 8001ac4:	efffffff 	.word	0xefffffff
 8001ac8:	feffffff 	.word	0xfeffffff
 8001acc:	ffc2ffff 	.word	0xffc2ffff

08001ad0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0b3      	b.n	8001c4c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae4:	4b5b      	ldr	r3, [pc, #364]	; (8001c54 <HAL_RCC_ClockConfig+0x184>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	4013      	ands	r3, r2
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d911      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af2:	4b58      	ldr	r3, [pc, #352]	; (8001c54 <HAL_RCC_ClockConfig+0x184>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2201      	movs	r2, #1
 8001af8:	4393      	bics	r3, r2
 8001afa:	0019      	movs	r1, r3
 8001afc:	4b55      	ldr	r3, [pc, #340]	; (8001c54 <HAL_RCC_ClockConfig+0x184>)
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b04:	4b53      	ldr	r3, [pc, #332]	; (8001c54 <HAL_RCC_ClockConfig+0x184>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d001      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e09a      	b.n	8001c4c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d015      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2204      	movs	r2, #4
 8001b26:	4013      	ands	r3, r2
 8001b28:	d006      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b2a:	4b4b      	ldr	r3, [pc, #300]	; (8001c58 <HAL_RCC_ClockConfig+0x188>)
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	4b4a      	ldr	r3, [pc, #296]	; (8001c58 <HAL_RCC_ClockConfig+0x188>)
 8001b30:	21e0      	movs	r1, #224	; 0xe0
 8001b32:	00c9      	lsls	r1, r1, #3
 8001b34:	430a      	orrs	r2, r1
 8001b36:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b38:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <HAL_RCC_ClockConfig+0x188>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	22f0      	movs	r2, #240	; 0xf0
 8001b3e:	4393      	bics	r3, r2
 8001b40:	0019      	movs	r1, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	4b44      	ldr	r3, [pc, #272]	; (8001c58 <HAL_RCC_ClockConfig+0x188>)
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2201      	movs	r2, #1
 8001b52:	4013      	ands	r3, r2
 8001b54:	d040      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d107      	bne.n	8001b6e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5e:	4b3e      	ldr	r3, [pc, #248]	; (8001c58 <HAL_RCC_ClockConfig+0x188>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	029b      	lsls	r3, r3, #10
 8001b66:	4013      	ands	r3, r2
 8001b68:	d114      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e06e      	b.n	8001c4c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d107      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b76:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <HAL_RCC_ClockConfig+0x188>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	049b      	lsls	r3, r3, #18
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d108      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e062      	b.n	8001c4c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b86:	4b34      	ldr	r3, [pc, #208]	; (8001c58 <HAL_RCC_ClockConfig+0x188>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d101      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e05b      	b.n	8001c4c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b94:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <HAL_RCC_ClockConfig+0x188>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2203      	movs	r2, #3
 8001b9a:	4393      	bics	r3, r2
 8001b9c:	0019      	movs	r1, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <HAL_RCC_ClockConfig+0x188>)
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ba8:	f7ff f846 	bl	8000c38 <HAL_GetTick>
 8001bac:	0003      	movs	r3, r0
 8001bae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb0:	e009      	b.n	8001bc6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb2:	f7ff f841 	bl	8000c38 <HAL_GetTick>
 8001bb6:	0002      	movs	r2, r0
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	4a27      	ldr	r2, [pc, #156]	; (8001c5c <HAL_RCC_ClockConfig+0x18c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e042      	b.n	8001c4c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc6:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <HAL_RCC_ClockConfig+0x188>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	220c      	movs	r2, #12
 8001bcc:	401a      	ands	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d1ec      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd8:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <HAL_RCC_ClockConfig+0x184>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4013      	ands	r3, r2
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d211      	bcs.n	8001c0a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be6:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <HAL_RCC_ClockConfig+0x184>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2201      	movs	r2, #1
 8001bec:	4393      	bics	r3, r2
 8001bee:	0019      	movs	r1, r3
 8001bf0:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_RCC_ClockConfig+0x184>)
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf8:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <HAL_RCC_ClockConfig+0x184>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	4013      	ands	r3, r2
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d001      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e020      	b.n	8001c4c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2204      	movs	r2, #4
 8001c10:	4013      	ands	r3, r2
 8001c12:	d009      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c14:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <HAL_RCC_ClockConfig+0x188>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	4a11      	ldr	r2, [pc, #68]	; (8001c60 <HAL_RCC_ClockConfig+0x190>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <HAL_RCC_ClockConfig+0x188>)
 8001c24:	430a      	orrs	r2, r1
 8001c26:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c28:	f000 f820 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 8001c2c:	0001      	movs	r1, r0
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <HAL_RCC_ClockConfig+0x188>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	091b      	lsrs	r3, r3, #4
 8001c34:	220f      	movs	r2, #15
 8001c36:	4013      	ands	r3, r2
 8001c38:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <HAL_RCC_ClockConfig+0x194>)
 8001c3a:	5cd3      	ldrb	r3, [r2, r3]
 8001c3c:	000a      	movs	r2, r1
 8001c3e:	40da      	lsrs	r2, r3
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_RCC_ClockConfig+0x198>)
 8001c42:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c44:	2003      	movs	r0, #3
 8001c46:	f7fe ffb1 	bl	8000bac <HAL_InitTick>
  
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b004      	add	sp, #16
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40022000 	.word	0x40022000
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	00001388 	.word	0x00001388
 8001c60:	fffff8ff 	.word	0xfffff8ff
 8001c64:	080032a4 	.word	0x080032a4
 8001c68:	20000000 	.word	0x20000000

08001c6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001c86:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	220c      	movs	r2, #12
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d002      	beq.n	8001c9c <HAL_RCC_GetSysClockFreq+0x30>
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d003      	beq.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x36>
 8001c9a:	e02c      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c9c:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c9e:	613b      	str	r3, [r7, #16]
      break;
 8001ca0:	e02c      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	0c9b      	lsrs	r3, r3, #18
 8001ca6:	220f      	movs	r2, #15
 8001ca8:	4013      	ands	r3, r2
 8001caa:	4a19      	ldr	r2, [pc, #100]	; (8001d10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cac:	5cd3      	ldrb	r3, [r2, r3]
 8001cae:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001cb0:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	220f      	movs	r2, #15
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	4a16      	ldr	r2, [pc, #88]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001cba:	5cd3      	ldrb	r3, [r2, r3]
 8001cbc:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	025b      	lsls	r3, r3, #9
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d009      	beq.n	8001cdc <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	4810      	ldr	r0, [pc, #64]	; (8001d0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ccc:	f7fe fa24 	bl	8000118 <__udivsi3>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	001a      	movs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4353      	muls	r3, r2
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	e009      	b.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	000a      	movs	r2, r1
 8001ce0:	0152      	lsls	r2, r2, #5
 8001ce2:	1a52      	subs	r2, r2, r1
 8001ce4:	0193      	lsls	r3, r2, #6
 8001ce6:	1a9b      	subs	r3, r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	185b      	adds	r3, r3, r1
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	613b      	str	r3, [r7, #16]
      break;
 8001cf4:	e002      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cf6:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cf8:	613b      	str	r3, [r7, #16]
      break;
 8001cfa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001cfc:	693b      	ldr	r3, [r7, #16]
}
 8001cfe:	0018      	movs	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b006      	add	sp, #24
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	007a1200 	.word	0x007a1200
 8001d10:	080032bc 	.word	0x080032bc
 8001d14:	080032cc 	.word	0x080032cc

08001d18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d1c:	4b02      	ldr	r3, [pc, #8]	; (8001d28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
}
 8001d20:	0018      	movs	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	20000000 	.word	0x20000000

08001d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001d30:	f7ff fff2 	bl	8001d18 <HAL_RCC_GetHCLKFreq>
 8001d34:	0001      	movs	r1, r0
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	0a1b      	lsrs	r3, r3, #8
 8001d3c:	2207      	movs	r2, #7
 8001d3e:	4013      	ands	r3, r2
 8001d40:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d42:	5cd3      	ldrb	r3, [r2, r3]
 8001d44:	40d9      	lsrs	r1, r3
 8001d46:	000b      	movs	r3, r1
}    
 8001d48:	0018      	movs	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	40021000 	.word	0x40021000
 8001d54:	080032b4 	.word	0x080032b4

08001d58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	025b      	lsls	r3, r3, #9
 8001d70:	4013      	ands	r3, r2
 8001d72:	d100      	bne.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001d74:	e08e      	b.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001d76:	2017      	movs	r0, #23
 8001d78:	183b      	adds	r3, r7, r0
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7e:	4b57      	ldr	r3, [pc, #348]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d80:	69da      	ldr	r2, [r3, #28]
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	055b      	lsls	r3, r3, #21
 8001d86:	4013      	ands	r3, r2
 8001d88:	d110      	bne.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	4b54      	ldr	r3, [pc, #336]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d8c:	69da      	ldr	r2, [r3, #28]
 8001d8e:	4b53      	ldr	r3, [pc, #332]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d90:	2180      	movs	r1, #128	; 0x80
 8001d92:	0549      	lsls	r1, r1, #21
 8001d94:	430a      	orrs	r2, r1
 8001d96:	61da      	str	r2, [r3, #28]
 8001d98:	4b50      	ldr	r3, [pc, #320]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d9a:	69da      	ldr	r2, [r3, #28]
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	055b      	lsls	r3, r3, #21
 8001da0:	4013      	ands	r3, r2
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001da6:	183b      	adds	r3, r7, r0
 8001da8:	2201      	movs	r2, #1
 8001daa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dac:	4b4c      	ldr	r3, [pc, #304]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4013      	ands	r3, r2
 8001db6:	d11a      	bne.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db8:	4b49      	ldr	r3, [pc, #292]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b48      	ldr	r3, [pc, #288]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001dbe:	2180      	movs	r1, #128	; 0x80
 8001dc0:	0049      	lsls	r1, r1, #1
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dc6:	f7fe ff37 	bl	8000c38 <HAL_GetTick>
 8001dca:	0003      	movs	r3, r0
 8001dcc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dce:	e008      	b.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd0:	f7fe ff32 	bl	8000c38 <HAL_GetTick>
 8001dd4:	0002      	movs	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	; 0x64
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e077      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de2:	4b3f      	ldr	r3, [pc, #252]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	4013      	ands	r3, r2
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dee:	4b3b      	ldr	r3, [pc, #236]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001df0:	6a1a      	ldr	r2, [r3, #32]
 8001df2:	23c0      	movs	r3, #192	; 0xc0
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4013      	ands	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d034      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	23c0      	movs	r3, #192	; 0xc0
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4013      	ands	r3, r2
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d02c      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e10:	4b32      	ldr	r3, [pc, #200]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4a33      	ldr	r2, [pc, #204]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e1a:	4b30      	ldr	r3, [pc, #192]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e1c:	6a1a      	ldr	r2, [r3, #32]
 8001e1e:	4b2f      	ldr	r3, [pc, #188]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e20:	2180      	movs	r1, #128	; 0x80
 8001e22:	0249      	lsls	r1, r1, #9
 8001e24:	430a      	orrs	r2, r1
 8001e26:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e28:	4b2c      	ldr	r3, [pc, #176]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e2a:	6a1a      	ldr	r2, [r3, #32]
 8001e2c:	4b2b      	ldr	r3, [pc, #172]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e2e:	492e      	ldr	r1, [pc, #184]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001e30:	400a      	ands	r2, r1
 8001e32:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e34:	4b29      	ldr	r3, [pc, #164]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d013      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e42:	f7fe fef9 	bl	8000c38 <HAL_GetTick>
 8001e46:	0003      	movs	r3, r0
 8001e48:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4a:	e009      	b.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4c:	f7fe fef4 	bl	8000c38 <HAL_GetTick>
 8001e50:	0002      	movs	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	4a25      	ldr	r2, [pc, #148]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e038      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e60:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	2202      	movs	r2, #2
 8001e66:	4013      	ands	r3, r2
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e6a:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	4a1d      	ldr	r2, [pc, #116]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	0019      	movs	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	4b18      	ldr	r3, [pc, #96]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e7e:	2317      	movs	r3, #23
 8001e80:	18fb      	adds	r3, r7, r3
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d105      	bne.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e88:	4b14      	ldr	r3, [pc, #80]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e8a:	69da      	ldr	r2, [r3, #28]
 8001e8c:	4b13      	ldr	r3, [pc, #76]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e8e:	4918      	ldr	r1, [pc, #96]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001e90:	400a      	ands	r2, r1
 8001e92:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d009      	beq.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	4393      	bics	r3, r2
 8001ea6:	0019      	movs	r1, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d009      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ebc:	4b07      	ldr	r3, [pc, #28]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec0:	2210      	movs	r2, #16
 8001ec2:	4393      	bics	r3, r2
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	4b04      	ldr	r3, [pc, #16]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b006      	add	sp, #24
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40007000 	.word	0x40007000
 8001ee4:	fffffcff 	.word	0xfffffcff
 8001ee8:	fffeffff 	.word	0xfffeffff
 8001eec:	00001388 	.word	0x00001388
 8001ef0:	efffffff 	.word	0xefffffff

08001ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e042      	b.n	8001f8c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	223d      	movs	r2, #61	; 0x3d
 8001f0a:	5c9b      	ldrb	r3, [r3, r2]
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d107      	bne.n	8001f22 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	223c      	movs	r2, #60	; 0x3c
 8001f16:	2100      	movs	r1, #0
 8001f18:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f7fe fca3 	bl	8000868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	223d      	movs	r2, #61	; 0x3d
 8001f26:	2102      	movs	r1, #2
 8001f28:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3304      	adds	r3, #4
 8001f32:	0019      	movs	r1, r3
 8001f34:	0010      	movs	r0, r2
 8001f36:	f000 f8b1 	bl	800209c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2246      	movs	r2, #70	; 0x46
 8001f3e:	2101      	movs	r1, #1
 8001f40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	223e      	movs	r2, #62	; 0x3e
 8001f46:	2101      	movs	r1, #1
 8001f48:	5499      	strb	r1, [r3, r2]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	223f      	movs	r2, #63	; 0x3f
 8001f4e:	2101      	movs	r1, #1
 8001f50:	5499      	strb	r1, [r3, r2]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2240      	movs	r2, #64	; 0x40
 8001f56:	2101      	movs	r1, #1
 8001f58:	5499      	strb	r1, [r3, r2]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2241      	movs	r2, #65	; 0x41
 8001f5e:	2101      	movs	r1, #1
 8001f60:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2242      	movs	r2, #66	; 0x42
 8001f66:	2101      	movs	r1, #1
 8001f68:	5499      	strb	r1, [r3, r2]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2243      	movs	r2, #67	; 0x43
 8001f6e:	2101      	movs	r1, #1
 8001f70:	5499      	strb	r1, [r3, r2]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2244      	movs	r2, #68	; 0x44
 8001f76:	2101      	movs	r1, #1
 8001f78:	5499      	strb	r1, [r3, r2]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2245      	movs	r2, #69	; 0x45
 8001f7e:	2101      	movs	r1, #1
 8001f80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	223d      	movs	r2, #61	; 0x3d
 8001f86:	2101      	movs	r1, #1
 8001f88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	b002      	add	sp, #8
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	223d      	movs	r2, #61	; 0x3d
 8001fa0:	5c9b      	ldrb	r3, [r3, r2]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d001      	beq.n	8001fac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e028      	b.n	8001ffe <HAL_TIM_Base_Start+0x6a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	223d      	movs	r2, #61	; 0x3d
 8001fb0:	2102      	movs	r1, #2
 8001fb2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a13      	ldr	r2, [pc, #76]	; (8002008 <HAL_TIM_Base_Start+0x74>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d004      	beq.n	8001fc8 <HAL_TIM_Base_Start+0x34>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a12      	ldr	r2, [pc, #72]	; (800200c <HAL_TIM_Base_Start+0x78>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d111      	bne.n	8001fec <HAL_TIM_Base_Start+0x58>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	2207      	movs	r2, #7
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d010      	beq.n	8001ffc <HAL_TIM_Base_Start+0x68>
    {
      __HAL_TIM_ENABLE(htim);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fea:	e007      	b.n	8001ffc <HAL_TIM_Base_Start+0x68>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	0018      	movs	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	b004      	add	sp, #16
 8002004:	bd80      	pop	{r7, pc}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	40012c00 	.word	0x40012c00
 800200c:	40000400 	.word	0x40000400

08002010 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	223c      	movs	r2, #60	; 0x3c
 800201e:	5c9b      	ldrb	r3, [r3, r2]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002024:	2302      	movs	r3, #2
 8002026:	e032      	b.n	800208e <HAL_TIM_SlaveConfigSynchro+0x7e>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	223c      	movs	r2, #60	; 0x3c
 800202c:	2101      	movs	r1, #1
 800202e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	223d      	movs	r2, #61	; 0x3d
 8002034:	2102      	movs	r1, #2
 8002036:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	0011      	movs	r1, r2
 800203e:	0018      	movs	r0, r3
 8002040:	f000 f898 	bl	8002174 <TIM_SlaveTimer_SetConfig>
 8002044:	1e03      	subs	r3, r0, #0
 8002046:	d009      	beq.n	800205c <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	223d      	movs	r2, #61	; 0x3d
 800204c:	2101      	movs	r1, #1
 800204e:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	223c      	movs	r2, #60	; 0x3c
 8002054:	2100      	movs	r1, #0
 8002056:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e018      	b.n	800208e <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2140      	movs	r1, #64	; 0x40
 8002068:	438a      	bics	r2, r1
 800206a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4908      	ldr	r1, [pc, #32]	; (8002098 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8002078:	400a      	ands	r2, r1
 800207a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	223d      	movs	r2, #61	; 0x3d
 8002080:	2101      	movs	r1, #1
 8002082:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	223c      	movs	r2, #60	; 0x3c
 8002088:	2100      	movs	r1, #0
 800208a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	0018      	movs	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	b002      	add	sp, #8
 8002094:	bd80      	pop	{r7, pc}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	ffffbfff 	.word	0xffffbfff

0800209c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a2b      	ldr	r2, [pc, #172]	; (800215c <TIM_Base_SetConfig+0xc0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d003      	beq.n	80020bc <TIM_Base_SetConfig+0x20>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a2a      	ldr	r2, [pc, #168]	; (8002160 <TIM_Base_SetConfig+0xc4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d108      	bne.n	80020ce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2270      	movs	r2, #112	; 0x70
 80020c0:	4393      	bics	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a22      	ldr	r2, [pc, #136]	; (800215c <TIM_Base_SetConfig+0xc0>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00f      	beq.n	80020f6 <TIM_Base_SetConfig+0x5a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a21      	ldr	r2, [pc, #132]	; (8002160 <TIM_Base_SetConfig+0xc4>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00b      	beq.n	80020f6 <TIM_Base_SetConfig+0x5a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a20      	ldr	r2, [pc, #128]	; (8002164 <TIM_Base_SetConfig+0xc8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d007      	beq.n	80020f6 <TIM_Base_SetConfig+0x5a>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a1f      	ldr	r2, [pc, #124]	; (8002168 <TIM_Base_SetConfig+0xcc>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d003      	beq.n	80020f6 <TIM_Base_SetConfig+0x5a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a1e      	ldr	r2, [pc, #120]	; (800216c <TIM_Base_SetConfig+0xd0>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d108      	bne.n	8002108 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4a1d      	ldr	r2, [pc, #116]	; (8002170 <TIM_Base_SetConfig+0xd4>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4313      	orrs	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2280      	movs	r2, #128	; 0x80
 800210c:	4393      	bics	r3, r2
 800210e:	001a      	movs	r2, r3
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	4313      	orrs	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a0a      	ldr	r2, [pc, #40]	; (800215c <TIM_Base_SetConfig+0xc0>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d007      	beq.n	8002146 <TIM_Base_SetConfig+0xaa>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a0b      	ldr	r2, [pc, #44]	; (8002168 <TIM_Base_SetConfig+0xcc>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d003      	beq.n	8002146 <TIM_Base_SetConfig+0xaa>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a0a      	ldr	r2, [pc, #40]	; (800216c <TIM_Base_SetConfig+0xd0>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d103      	bne.n	800214e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	691a      	ldr	r2, [r3, #16]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	615a      	str	r2, [r3, #20]
}
 8002154:	46c0      	nop			; (mov r8, r8)
 8002156:	46bd      	mov	sp, r7
 8002158:	b004      	add	sp, #16
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40012c00 	.word	0x40012c00
 8002160:	40000400 	.word	0x40000400
 8002164:	40002000 	.word	0x40002000
 8002168:	40014400 	.word	0x40014400
 800216c:	40014800 	.word	0x40014800
 8002170:	fffffcff 	.word	0xfffffcff

08002174 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800217e:	2317      	movs	r3, #23
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	2270      	movs	r2, #112	; 0x70
 8002192:	4393      	bics	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	2207      	movs	r2, #7
 80021a4:	4393      	bics	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b70      	cmp	r3, #112	; 0x70
 80021c0:	d015      	beq.n	80021ee <TIM_SlaveTimer_SetConfig+0x7a>
 80021c2:	d900      	bls.n	80021c6 <TIM_SlaveTimer_SetConfig+0x52>
 80021c4:	e05b      	b.n	800227e <TIM_SlaveTimer_SetConfig+0x10a>
 80021c6:	2b60      	cmp	r3, #96	; 0x60
 80021c8:	d04f      	beq.n	800226a <TIM_SlaveTimer_SetConfig+0xf6>
 80021ca:	d858      	bhi.n	800227e <TIM_SlaveTimer_SetConfig+0x10a>
 80021cc:	2b50      	cmp	r3, #80	; 0x50
 80021ce:	d042      	beq.n	8002256 <TIM_SlaveTimer_SetConfig+0xe2>
 80021d0:	d855      	bhi.n	800227e <TIM_SlaveTimer_SetConfig+0x10a>
 80021d2:	2b40      	cmp	r3, #64	; 0x40
 80021d4:	d016      	beq.n	8002204 <TIM_SlaveTimer_SetConfig+0x90>
 80021d6:	d852      	bhi.n	800227e <TIM_SlaveTimer_SetConfig+0x10a>
 80021d8:	2b30      	cmp	r3, #48	; 0x30
 80021da:	d055      	beq.n	8002288 <TIM_SlaveTimer_SetConfig+0x114>
 80021dc:	d84f      	bhi.n	800227e <TIM_SlaveTimer_SetConfig+0x10a>
 80021de:	2b20      	cmp	r3, #32
 80021e0:	d052      	beq.n	8002288 <TIM_SlaveTimer_SetConfig+0x114>
 80021e2:	d84c      	bhi.n	800227e <TIM_SlaveTimer_SetConfig+0x10a>
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d04f      	beq.n	8002288 <TIM_SlaveTimer_SetConfig+0x114>
 80021e8:	2b10      	cmp	r3, #16
 80021ea:	d04d      	beq.n	8002288 <TIM_SlaveTimer_SetConfig+0x114>
 80021ec:	e047      	b.n	800227e <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6818      	ldr	r0, [r3, #0]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68d9      	ldr	r1, [r3, #12]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f000 f8ab 	bl	8002358 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8002202:	e042      	b.n	800228a <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b05      	cmp	r3, #5
 800220a:	d101      	bne.n	8002210 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e03f      	b.n	8002290 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6a1a      	ldr	r2, [r3, #32]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2101      	movs	r1, #1
 8002224:	438a      	bics	r2, r1
 8002226:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	22f0      	movs	r2, #240	; 0xf0
 8002234:	4393      	bics	r3, r2
 8002236:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	4313      	orrs	r3, r2
 8002242:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	621a      	str	r2, [r3, #32]
      break;
 8002254:	e019      	b.n	800228a <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	6899      	ldr	r1, [r3, #8]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	001a      	movs	r2, r3
 8002264:	f000 f818 	bl	8002298 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8002268:	e00f      	b.n	800228a <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	6899      	ldr	r1, [r3, #8]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	001a      	movs	r2, r3
 8002278:	f000 f83c 	bl	80022f4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800227c:	e005      	b.n	800228a <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800227e:	2317      	movs	r3, #23
 8002280:	18fb      	adds	r3, r7, r3
 8002282:	2201      	movs	r2, #1
 8002284:	701a      	strb	r2, [r3, #0]
      break;
 8002286:	e000      	b.n	800228a <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8002288:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 800228a:	2317      	movs	r3, #23
 800228c:	18fb      	adds	r3, r7, r3
 800228e:	781b      	ldrb	r3, [r3, #0]
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	b006      	add	sp, #24
 8002296:	bd80      	pop	{r7, pc}

08002298 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	2201      	movs	r2, #1
 80022b0:	4393      	bics	r3, r2
 80022b2:	001a      	movs	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	22f0      	movs	r2, #240	; 0xf0
 80022c2:	4393      	bics	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	220a      	movs	r2, #10
 80022d4:	4393      	bics	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	4313      	orrs	r3, r2
 80022de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	621a      	str	r2, [r3, #32]
}
 80022ec:	46c0      	nop			; (mov r8, r8)
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b006      	add	sp, #24
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	2210      	movs	r2, #16
 8002306:	4393      	bics	r3, r2
 8002308:	001a      	movs	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	4a0d      	ldr	r2, [pc, #52]	; (8002354 <TIM_TI2_ConfigInputStage+0x60>)
 800231e:	4013      	ands	r3, r2
 8002320:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	031b      	lsls	r3, r3, #12
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	4313      	orrs	r3, r2
 800232a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	22a0      	movs	r2, #160	; 0xa0
 8002330:	4393      	bics	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	621a      	str	r2, [r3, #32]
}
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	46bd      	mov	sp, r7
 800234e:	b006      	add	sp, #24
 8002350:	bd80      	pop	{r7, pc}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	ffff0fff 	.word	0xffff0fff

08002358 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
 8002364:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	4a09      	ldr	r2, [pc, #36]	; (8002394 <TIM_ETR_SetConfig+0x3c>)
 8002370:	4013      	ands	r3, r2
 8002372:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	021a      	lsls	r2, r3, #8
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	431a      	orrs	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4313      	orrs	r3, r2
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	4313      	orrs	r3, r2
 8002384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	609a      	str	r2, [r3, #8]
}
 800238c:	46c0      	nop			; (mov r8, r8)
 800238e:	46bd      	mov	sp, r7
 8002390:	b006      	add	sp, #24
 8002392:	bd80      	pop	{r7, pc}
 8002394:	ffff00ff 	.word	0xffff00ff

08002398 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	223c      	movs	r2, #60	; 0x3c
 80023a6:	5c9b      	ldrb	r3, [r3, r2]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023ac:	2302      	movs	r3, #2
 80023ae:	e03c      	b.n	800242a <HAL_TIMEx_MasterConfigSynchronization+0x92>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	223c      	movs	r2, #60	; 0x3c
 80023b4:	2101      	movs	r1, #1
 80023b6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	223d      	movs	r2, #61	; 0x3d
 80023bc:	2102      	movs	r1, #2
 80023be:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2270      	movs	r2, #112	; 0x70
 80023d4:	4393      	bics	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	4313      	orrs	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a11      	ldr	r2, [pc, #68]	; (8002434 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d004      	beq.n	80023fe <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a0f      	ldr	r2, [pc, #60]	; (8002438 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d10c      	bne.n	8002418 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2280      	movs	r2, #128	; 0x80
 8002402:	4393      	bics	r3, r2
 8002404:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	4313      	orrs	r3, r2
 800240e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	223d      	movs	r2, #61	; 0x3d
 800241c:	2101      	movs	r1, #1
 800241e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	223c      	movs	r2, #60	; 0x3c
 8002424:	2100      	movs	r1, #0
 8002426:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	0018      	movs	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	b004      	add	sp, #16
 8002430:	bd80      	pop	{r7, pc}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	40012c00 	.word	0x40012c00
 8002438:	40000400 	.word	0x40000400

0800243c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e044      	b.n	80024d8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002452:	2b00      	cmp	r3, #0
 8002454:	d107      	bne.n	8002466 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2278      	movs	r2, #120	; 0x78
 800245a:	2100      	movs	r1, #0
 800245c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	0018      	movs	r0, r3
 8002462:	f7fe fab9 	bl	80009d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2224      	movs	r2, #36	; 0x24
 800246a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2101      	movs	r1, #1
 8002478:	438a      	bics	r2, r1
 800247a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	0018      	movs	r0, r3
 8002480:	f000 f94a 	bl	8002718 <UART_SetConfig>
 8002484:	0003      	movs	r3, r0
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e024      	b.n	80024d8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	0018      	movs	r0, r3
 800249a:	f000 fa65 	bl	8002968 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	490d      	ldr	r1, [pc, #52]	; (80024e0 <HAL_UART_Init+0xa4>)
 80024aa:	400a      	ands	r2, r1
 80024ac:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2108      	movs	r1, #8
 80024ba:	438a      	bics	r2, r1
 80024bc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2101      	movs	r1, #1
 80024ca:	430a      	orrs	r2, r1
 80024cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	0018      	movs	r0, r3
 80024d2:	f000 fafd 	bl	8002ad0 <UART_CheckIdleState>
 80024d6:	0003      	movs	r3, r0
}
 80024d8:	0018      	movs	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	b002      	add	sp, #8
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	fffff7ff 	.word	0xfffff7ff

080024e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08a      	sub	sp, #40	; 0x28
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	1dbb      	adds	r3, r7, #6
 80024f2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024f8:	2b20      	cmp	r3, #32
 80024fa:	d000      	beq.n	80024fe <HAL_UART_Transmit+0x1a>
 80024fc:	e08d      	b.n	800261a <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_UART_Transmit+0x28>
 8002504:	1dbb      	adds	r3, r7, #6
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e085      	b.n	800261c <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	015b      	lsls	r3, r3, #5
 8002518:	429a      	cmp	r2, r3
 800251a:	d109      	bne.n	8002530 <HAL_UART_Transmit+0x4c>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d105      	bne.n	8002530 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2201      	movs	r2, #1
 8002528:	4013      	ands	r3, r2
 800252a:	d001      	beq.n	8002530 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e075      	b.n	800261c <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2284      	movs	r2, #132	; 0x84
 8002534:	2100      	movs	r1, #0
 8002536:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2221      	movs	r2, #33	; 0x21
 800253c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800253e:	f7fe fb7b 	bl	8000c38 <HAL_GetTick>
 8002542:	0003      	movs	r3, r0
 8002544:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	1dba      	adds	r2, r7, #6
 800254a:	2150      	movs	r1, #80	; 0x50
 800254c:	8812      	ldrh	r2, [r2, #0]
 800254e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1dba      	adds	r2, r7, #6
 8002554:	2152      	movs	r1, #82	; 0x52
 8002556:	8812      	ldrh	r2, [r2, #0]
 8002558:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	2380      	movs	r3, #128	; 0x80
 8002560:	015b      	lsls	r3, r3, #5
 8002562:	429a      	cmp	r2, r3
 8002564:	d108      	bne.n	8002578 <HAL_UART_Transmit+0x94>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d104      	bne.n	8002578 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	61bb      	str	r3, [r7, #24]
 8002576:	e003      	b.n	8002580 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800257c:	2300      	movs	r3, #0
 800257e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002580:	e030      	b.n	80025e4 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	0013      	movs	r3, r2
 800258c:	2200      	movs	r2, #0
 800258e:	2180      	movs	r1, #128	; 0x80
 8002590:	f000 fb46 	bl	8002c20 <UART_WaitOnFlagUntilTimeout>
 8002594:	1e03      	subs	r3, r0, #0
 8002596:	d004      	beq.n	80025a2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2220      	movs	r2, #32
 800259c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e03c      	b.n	800261c <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10b      	bne.n	80025c0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	881a      	ldrh	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	05d2      	lsls	r2, r2, #23
 80025b2:	0dd2      	lsrs	r2, r2, #23
 80025b4:	b292      	uxth	r2, r2
 80025b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	3302      	adds	r3, #2
 80025bc:	61bb      	str	r3, [r7, #24]
 80025be:	e008      	b.n	80025d2 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	781a      	ldrb	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	b292      	uxth	r2, r2
 80025ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	3301      	adds	r3, #1
 80025d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2252      	movs	r2, #82	; 0x52
 80025d6:	5a9b      	ldrh	r3, [r3, r2]
 80025d8:	b29b      	uxth	r3, r3
 80025da:	3b01      	subs	r3, #1
 80025dc:	b299      	uxth	r1, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2252      	movs	r2, #82	; 0x52
 80025e2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2252      	movs	r2, #82	; 0x52
 80025e8:	5a9b      	ldrh	r3, [r3, r2]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1c8      	bne.n	8002582 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	0013      	movs	r3, r2
 80025fa:	2200      	movs	r2, #0
 80025fc:	2140      	movs	r1, #64	; 0x40
 80025fe:	f000 fb0f 	bl	8002c20 <UART_WaitOnFlagUntilTimeout>
 8002602:	1e03      	subs	r3, r0, #0
 8002604:	d004      	beq.n	8002610 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2220      	movs	r2, #32
 800260a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e005      	b.n	800261c <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2220      	movs	r2, #32
 8002614:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	e000      	b.n	800261c <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800261a:	2302      	movs	r3, #2
  }
}
 800261c:	0018      	movs	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	b008      	add	sp, #32
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	1dbb      	adds	r3, r7, #6
 8002630:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2280      	movs	r2, #128	; 0x80
 8002636:	589b      	ldr	r3, [r3, r2]
 8002638:	2b20      	cmp	r3, #32
 800263a:	d145      	bne.n	80026c8 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_UART_Receive_DMA+0x26>
 8002642:	1dbb      	adds	r3, r7, #6
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e03d      	b.n	80026ca <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	2380      	movs	r3, #128	; 0x80
 8002654:	015b      	lsls	r3, r3, #5
 8002656:	429a      	cmp	r2, r3
 8002658:	d109      	bne.n	800266e <HAL_UART_Receive_DMA+0x4a>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d105      	bne.n	800266e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2201      	movs	r2, #1
 8002666:	4013      	ands	r3, r2
 8002668:	d001      	beq.n	800266e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e02d      	b.n	80026ca <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	041b      	lsls	r3, r3, #16
 800267e:	4013      	ands	r3, r2
 8002680:	d019      	beq.n	80026b6 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002682:	f3ef 8310 	mrs	r3, PRIMASK
 8002686:	613b      	str	r3, [r7, #16]
  return(result);
 8002688:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800268a:	61fb      	str	r3, [r7, #28]
 800268c:	2301      	movs	r3, #1
 800268e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f383 8810 	msr	PRIMASK, r3
}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2180      	movs	r1, #128	; 0x80
 80026a4:	04c9      	lsls	r1, r1, #19
 80026a6:	430a      	orrs	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	f383 8810 	msr	PRIMASK, r3
}
 80026b4:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80026b6:	1dbb      	adds	r3, r7, #6
 80026b8:	881a      	ldrh	r2, [r3, #0]
 80026ba:	68b9      	ldr	r1, [r7, #8]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	0018      	movs	r0, r3
 80026c0:	f000 fb18 	bl	8002cf4 <UART_Start_Receive_DMA>
 80026c4:	0003      	movs	r3, r0
 80026c6:	e000      	b.n	80026ca <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80026c8:	2302      	movs	r3, #2
  }
}
 80026ca:	0018      	movs	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b008      	add	sp, #32
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	46bd      	mov	sp, r7
 80026de:	b002      	add	sp, #8
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b002      	add	sp, #8
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	46bd      	mov	sp, r7
 80026fe:	b002      	add	sp, #8
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	000a      	movs	r2, r1
 800270c:	1cbb      	adds	r3, r7, #2
 800270e:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002710:	46c0      	nop			; (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	b002      	add	sp, #8
 8002716:	bd80      	pop	{r7, pc}

08002718 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002720:	231e      	movs	r3, #30
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	4313      	orrs	r3, r2
 800273e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a83      	ldr	r2, [pc, #524]	; (8002954 <UART_SetConfig+0x23c>)
 8002748:	4013      	ands	r3, r2
 800274a:	0019      	movs	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	430a      	orrs	r2, r1
 8002754:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4a7e      	ldr	r2, [pc, #504]	; (8002958 <UART_SetConfig+0x240>)
 800275e:	4013      	ands	r3, r2
 8002760:	0019      	movs	r1, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	4313      	orrs	r3, r2
 800277c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4a75      	ldr	r2, [pc, #468]	; (800295c <UART_SetConfig+0x244>)
 8002786:	4013      	ands	r3, r2
 8002788:	0019      	movs	r1, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	430a      	orrs	r2, r1
 8002792:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002794:	4b72      	ldr	r3, [pc, #456]	; (8002960 <UART_SetConfig+0x248>)
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	2203      	movs	r2, #3
 800279a:	4013      	ands	r3, r2
 800279c:	2b03      	cmp	r3, #3
 800279e:	d00d      	beq.n	80027bc <UART_SetConfig+0xa4>
 80027a0:	d81b      	bhi.n	80027da <UART_SetConfig+0xc2>
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d014      	beq.n	80027d0 <UART_SetConfig+0xb8>
 80027a6:	d818      	bhi.n	80027da <UART_SetConfig+0xc2>
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <UART_SetConfig+0x9a>
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d00a      	beq.n	80027c6 <UART_SetConfig+0xae>
 80027b0:	e013      	b.n	80027da <UART_SetConfig+0xc2>
 80027b2:	231f      	movs	r3, #31
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]
 80027ba:	e012      	b.n	80027e2 <UART_SetConfig+0xca>
 80027bc:	231f      	movs	r3, #31
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	2202      	movs	r2, #2
 80027c2:	701a      	strb	r2, [r3, #0]
 80027c4:	e00d      	b.n	80027e2 <UART_SetConfig+0xca>
 80027c6:	231f      	movs	r3, #31
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	2204      	movs	r2, #4
 80027cc:	701a      	strb	r2, [r3, #0]
 80027ce:	e008      	b.n	80027e2 <UART_SetConfig+0xca>
 80027d0:	231f      	movs	r3, #31
 80027d2:	18fb      	adds	r3, r7, r3
 80027d4:	2208      	movs	r2, #8
 80027d6:	701a      	strb	r2, [r3, #0]
 80027d8:	e003      	b.n	80027e2 <UART_SetConfig+0xca>
 80027da:	231f      	movs	r3, #31
 80027dc:	18fb      	adds	r3, r7, r3
 80027de:	2210      	movs	r2, #16
 80027e0:	701a      	strb	r2, [r3, #0]
 80027e2:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69da      	ldr	r2, [r3, #28]
 80027e8:	2380      	movs	r3, #128	; 0x80
 80027ea:	021b      	lsls	r3, r3, #8
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d15c      	bne.n	80028aa <UART_SetConfig+0x192>
  {
    switch (clocksource)
 80027f0:	231f      	movs	r3, #31
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d015      	beq.n	8002826 <UART_SetConfig+0x10e>
 80027fa:	dc18      	bgt.n	800282e <UART_SetConfig+0x116>
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d00d      	beq.n	800281c <UART_SetConfig+0x104>
 8002800:	dc15      	bgt.n	800282e <UART_SetConfig+0x116>
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <UART_SetConfig+0xf4>
 8002806:	2b02      	cmp	r3, #2
 8002808:	d005      	beq.n	8002816 <UART_SetConfig+0xfe>
 800280a:	e010      	b.n	800282e <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800280c:	f7ff fa8e 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
 8002810:	0003      	movs	r3, r0
 8002812:	61bb      	str	r3, [r7, #24]
        break;
 8002814:	e012      	b.n	800283c <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002816:	4b53      	ldr	r3, [pc, #332]	; (8002964 <UART_SetConfig+0x24c>)
 8002818:	61bb      	str	r3, [r7, #24]
        break;
 800281a:	e00f      	b.n	800283c <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800281c:	f7ff fa26 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 8002820:	0003      	movs	r3, r0
 8002822:	61bb      	str	r3, [r7, #24]
        break;
 8002824:	e00a      	b.n	800283c <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002826:	2380      	movs	r3, #128	; 0x80
 8002828:	021b      	lsls	r3, r3, #8
 800282a:	61bb      	str	r3, [r7, #24]
        break;
 800282c:	e006      	b.n	800283c <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002832:	231e      	movs	r3, #30
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	2201      	movs	r2, #1
 8002838:	701a      	strb	r2, [r3, #0]
        break;
 800283a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d100      	bne.n	8002844 <UART_SetConfig+0x12c>
 8002842:	e07a      	b.n	800293a <UART_SetConfig+0x222>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	005a      	lsls	r2, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	085b      	lsrs	r3, r3, #1
 800284e:	18d2      	adds	r2, r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	0019      	movs	r1, r3
 8002856:	0010      	movs	r0, r2
 8002858:	f7fd fc5e 	bl	8000118 <__udivsi3>
 800285c:	0003      	movs	r3, r0
 800285e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	2b0f      	cmp	r3, #15
 8002864:	d91c      	bls.n	80028a0 <UART_SetConfig+0x188>
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	2380      	movs	r3, #128	; 0x80
 800286a:	025b      	lsls	r3, r3, #9
 800286c:	429a      	cmp	r2, r3
 800286e:	d217      	bcs.n	80028a0 <UART_SetConfig+0x188>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	b29a      	uxth	r2, r3
 8002874:	200e      	movs	r0, #14
 8002876:	183b      	adds	r3, r7, r0
 8002878:	210f      	movs	r1, #15
 800287a:	438a      	bics	r2, r1
 800287c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	085b      	lsrs	r3, r3, #1
 8002882:	b29b      	uxth	r3, r3
 8002884:	2207      	movs	r2, #7
 8002886:	4013      	ands	r3, r2
 8002888:	b299      	uxth	r1, r3
 800288a:	183b      	adds	r3, r7, r0
 800288c:	183a      	adds	r2, r7, r0
 800288e:	8812      	ldrh	r2, [r2, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	183a      	adds	r2, r7, r0
 800289a:	8812      	ldrh	r2, [r2, #0]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	e04c      	b.n	800293a <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 80028a0:	231e      	movs	r3, #30
 80028a2:	18fb      	adds	r3, r7, r3
 80028a4:	2201      	movs	r2, #1
 80028a6:	701a      	strb	r2, [r3, #0]
 80028a8:	e047      	b.n	800293a <UART_SetConfig+0x222>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028aa:	231f      	movs	r3, #31
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d015      	beq.n	80028e0 <UART_SetConfig+0x1c8>
 80028b4:	dc18      	bgt.n	80028e8 <UART_SetConfig+0x1d0>
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d00d      	beq.n	80028d6 <UART_SetConfig+0x1be>
 80028ba:	dc15      	bgt.n	80028e8 <UART_SetConfig+0x1d0>
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <UART_SetConfig+0x1ae>
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d005      	beq.n	80028d0 <UART_SetConfig+0x1b8>
 80028c4:	e010      	b.n	80028e8 <UART_SetConfig+0x1d0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028c6:	f7ff fa31 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
 80028ca:	0003      	movs	r3, r0
 80028cc:	61bb      	str	r3, [r7, #24]
        break;
 80028ce:	e012      	b.n	80028f6 <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028d0:	4b24      	ldr	r3, [pc, #144]	; (8002964 <UART_SetConfig+0x24c>)
 80028d2:	61bb      	str	r3, [r7, #24]
        break;
 80028d4:	e00f      	b.n	80028f6 <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028d6:	f7ff f9c9 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 80028da:	0003      	movs	r3, r0
 80028dc:	61bb      	str	r3, [r7, #24]
        break;
 80028de:	e00a      	b.n	80028f6 <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028e0:	2380      	movs	r3, #128	; 0x80
 80028e2:	021b      	lsls	r3, r3, #8
 80028e4:	61bb      	str	r3, [r7, #24]
        break;
 80028e6:	e006      	b.n	80028f6 <UART_SetConfig+0x1de>
      default:
        pclk = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80028ec:	231e      	movs	r3, #30
 80028ee:	18fb      	adds	r3, r7, r3
 80028f0:	2201      	movs	r2, #1
 80028f2:	701a      	strb	r2, [r3, #0]
        break;
 80028f4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01e      	beq.n	800293a <UART_SetConfig+0x222>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	085a      	lsrs	r2, r3, #1
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	18d2      	adds	r2, r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	0019      	movs	r1, r3
 800290c:	0010      	movs	r0, r2
 800290e:	f7fd fc03 	bl	8000118 <__udivsi3>
 8002912:	0003      	movs	r3, r0
 8002914:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b0f      	cmp	r3, #15
 800291a:	d90a      	bls.n	8002932 <UART_SetConfig+0x21a>
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	025b      	lsls	r3, r3, #9
 8002922:	429a      	cmp	r2, r3
 8002924:	d205      	bcs.n	8002932 <UART_SetConfig+0x21a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	b29a      	uxth	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	60da      	str	r2, [r3, #12]
 8002930:	e003      	b.n	800293a <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 8002932:	231e      	movs	r3, #30
 8002934:	18fb      	adds	r3, r7, r3
 8002936:	2201      	movs	r2, #1
 8002938:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002946:	231e      	movs	r3, #30
 8002948:	18fb      	adds	r3, r7, r3
 800294a:	781b      	ldrb	r3, [r3, #0]
}
 800294c:	0018      	movs	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	b008      	add	sp, #32
 8002952:	bd80      	pop	{r7, pc}
 8002954:	ffff69f3 	.word	0xffff69f3
 8002958:	ffffcfff 	.word	0xffffcfff
 800295c:	fffff4ff 	.word	0xfffff4ff
 8002960:	40021000 	.word	0x40021000
 8002964:	007a1200 	.word	0x007a1200

08002968 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	2201      	movs	r2, #1
 8002976:	4013      	ands	r3, r2
 8002978:	d00b      	beq.n	8002992 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	4a4a      	ldr	r2, [pc, #296]	; (8002aac <UART_AdvFeatureConfig+0x144>)
 8002982:	4013      	ands	r3, r2
 8002984:	0019      	movs	r1, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	2202      	movs	r2, #2
 8002998:	4013      	ands	r3, r2
 800299a:	d00b      	beq.n	80029b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	4a43      	ldr	r2, [pc, #268]	; (8002ab0 <UART_AdvFeatureConfig+0x148>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	0019      	movs	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	2204      	movs	r2, #4
 80029ba:	4013      	ands	r3, r2
 80029bc:	d00b      	beq.n	80029d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	4a3b      	ldr	r2, [pc, #236]	; (8002ab4 <UART_AdvFeatureConfig+0x14c>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	0019      	movs	r1, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	2208      	movs	r2, #8
 80029dc:	4013      	ands	r3, r2
 80029de:	d00b      	beq.n	80029f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4a34      	ldr	r2, [pc, #208]	; (8002ab8 <UART_AdvFeatureConfig+0x150>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	0019      	movs	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	2210      	movs	r2, #16
 80029fe:	4013      	ands	r3, r2
 8002a00:	d00b      	beq.n	8002a1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	4a2c      	ldr	r2, [pc, #176]	; (8002abc <UART_AdvFeatureConfig+0x154>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	0019      	movs	r1, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	2220      	movs	r2, #32
 8002a20:	4013      	ands	r3, r2
 8002a22:	d00b      	beq.n	8002a3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	4a25      	ldr	r2, [pc, #148]	; (8002ac0 <UART_AdvFeatureConfig+0x158>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	0019      	movs	r1, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	2240      	movs	r2, #64	; 0x40
 8002a42:	4013      	ands	r3, r2
 8002a44:	d01d      	beq.n	8002a82 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4a1d      	ldr	r2, [pc, #116]	; (8002ac4 <UART_AdvFeatureConfig+0x15c>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	0019      	movs	r1, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a62:	2380      	movs	r3, #128	; 0x80
 8002a64:	035b      	lsls	r3, r3, #13
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d10b      	bne.n	8002a82 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	4a15      	ldr	r2, [pc, #84]	; (8002ac8 <UART_AdvFeatureConfig+0x160>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	0019      	movs	r1, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	2280      	movs	r2, #128	; 0x80
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d00b      	beq.n	8002aa4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4a0e      	ldr	r2, [pc, #56]	; (8002acc <UART_AdvFeatureConfig+0x164>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	0019      	movs	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	605a      	str	r2, [r3, #4]
  }
}
 8002aa4:	46c0      	nop			; (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b002      	add	sp, #8
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	fffdffff 	.word	0xfffdffff
 8002ab0:	fffeffff 	.word	0xfffeffff
 8002ab4:	fffbffff 	.word	0xfffbffff
 8002ab8:	ffff7fff 	.word	0xffff7fff
 8002abc:	ffffefff 	.word	0xffffefff
 8002ac0:	ffffdfff 	.word	0xffffdfff
 8002ac4:	ffefffff 	.word	0xffefffff
 8002ac8:	ff9fffff 	.word	0xff9fffff
 8002acc:	fff7ffff 	.word	0xfff7ffff

08002ad0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b092      	sub	sp, #72	; 0x48
 8002ad4:	af02      	add	r7, sp, #8
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2284      	movs	r2, #132	; 0x84
 8002adc:	2100      	movs	r1, #0
 8002ade:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ae0:	f7fe f8aa 	bl	8000c38 <HAL_GetTick>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2208      	movs	r2, #8
 8002af0:	4013      	ands	r3, r2
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d12c      	bne.n	8002b50 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002af8:	2280      	movs	r2, #128	; 0x80
 8002afa:	0391      	lsls	r1, r2, #14
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	4a46      	ldr	r2, [pc, #280]	; (8002c18 <UART_CheckIdleState+0x148>)
 8002b00:	9200      	str	r2, [sp, #0]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f000 f88c 	bl	8002c20 <UART_WaitOnFlagUntilTimeout>
 8002b08:	1e03      	subs	r3, r0, #0
 8002b0a:	d021      	beq.n	8002b50 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002b14:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b16:	2301      	movs	r3, #1
 8002b18:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1c:	f383 8810 	msr	PRIMASK, r3
}
 8002b20:	46c0      	nop			; (mov r8, r8)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2180      	movs	r1, #128	; 0x80
 8002b2e:	438a      	bics	r2, r1
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b38:	f383 8810 	msr	PRIMASK, r3
}
 8002b3c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2220      	movs	r2, #32
 8002b42:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2278      	movs	r2, #120	; 0x78
 8002b48:	2100      	movs	r1, #0
 8002b4a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e05f      	b.n	8002c10 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2204      	movs	r2, #4
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d146      	bne.n	8002bec <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b60:	2280      	movs	r2, #128	; 0x80
 8002b62:	03d1      	lsls	r1, r2, #15
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	4a2c      	ldr	r2, [pc, #176]	; (8002c18 <UART_CheckIdleState+0x148>)
 8002b68:	9200      	str	r2, [sp, #0]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f000 f858 	bl	8002c20 <UART_WaitOnFlagUntilTimeout>
 8002b70:	1e03      	subs	r3, r0, #0
 8002b72:	d03b      	beq.n	8002bec <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b74:	f3ef 8310 	mrs	r3, PRIMASK
 8002b78:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b7e:	2301      	movs	r3, #1
 8002b80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	f383 8810 	msr	PRIMASK, r3
}
 8002b88:	46c0      	nop			; (mov r8, r8)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4921      	ldr	r1, [pc, #132]	; (8002c1c <UART_CheckIdleState+0x14c>)
 8002b96:	400a      	ands	r2, r1
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f383 8810 	msr	PRIMASK, r3
}
 8002ba4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8002baa:	61bb      	str	r3, [r7, #24]
  return(result);
 8002bac:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bae:	633b      	str	r3, [r7, #48]	; 0x30
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f383 8810 	msr	PRIMASK, r3
}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	438a      	bics	r2, r1
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	f383 8810 	msr	PRIMASK, r3
}
 8002bd6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2280      	movs	r2, #128	; 0x80
 8002bdc:	2120      	movs	r1, #32
 8002bde:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2278      	movs	r2, #120	; 0x78
 8002be4:	2100      	movs	r1, #0
 8002be6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e011      	b.n	8002c10 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2280      	movs	r2, #128	; 0x80
 8002bf6:	2120      	movs	r1, #32
 8002bf8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2278      	movs	r2, #120	; 0x78
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	0018      	movs	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b010      	add	sp, #64	; 0x40
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	01ffffff 	.word	0x01ffffff
 8002c1c:	fffffedf 	.word	0xfffffedf

08002c20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	1dfb      	adds	r3, r7, #7
 8002c2e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c30:	e04b      	b.n	8002cca <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	3301      	adds	r3, #1
 8002c36:	d048      	beq.n	8002cca <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c38:	f7fd fffe 	bl	8000c38 <HAL_GetTick>
 8002c3c:	0002      	movs	r2, r0
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d302      	bcc.n	8002c4e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e04b      	b.n	8002cea <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2204      	movs	r2, #4
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d035      	beq.n	8002cca <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	2208      	movs	r2, #8
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d111      	bne.n	8002c90 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2208      	movs	r2, #8
 8002c72:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	0018      	movs	r0, r3
 8002c78:	f000 f900 	bl	8002e7c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2284      	movs	r2, #132	; 0x84
 8002c80:	2108      	movs	r1, #8
 8002c82:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2278      	movs	r2, #120	; 0x78
 8002c88:	2100      	movs	r1, #0
 8002c8a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e02c      	b.n	8002cea <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	69da      	ldr	r2, [r3, #28]
 8002c96:	2380      	movs	r3, #128	; 0x80
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d112      	bne.n	8002cca <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2280      	movs	r2, #128	; 0x80
 8002caa:	0112      	lsls	r2, r2, #4
 8002cac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f000 f8e3 	bl	8002e7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2284      	movs	r2, #132	; 0x84
 8002cba:	2120      	movs	r1, #32
 8002cbc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2278      	movs	r2, #120	; 0x78
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e00f      	b.n	8002cea <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	425a      	negs	r2, r3
 8002cda:	4153      	adcs	r3, r2
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	001a      	movs	r2, r3
 8002ce0:	1dfb      	adds	r3, r7, #7
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d0a4      	beq.n	8002c32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	0018      	movs	r0, r3
 8002cec:	46bd      	mov	sp, r7
 8002cee:	b004      	add	sp, #16
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b090      	sub	sp, #64	; 0x40
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	1dbb      	adds	r3, r7, #6
 8002d00:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	1dba      	adds	r2, r7, #6
 8002d0c:	2158      	movs	r1, #88	; 0x58
 8002d0e:	8812      	ldrh	r2, [r2, #0]
 8002d10:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2284      	movs	r2, #132	; 0x84
 8002d16:	2100      	movs	r1, #0
 8002d18:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2280      	movs	r2, #128	; 0x80
 8002d1e:	2122      	movs	r1, #34	; 0x22
 8002d20:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d028      	beq.n	8002d7c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d2e:	4a3e      	ldr	r2, [pc, #248]	; (8002e28 <UART_Start_Receive_DMA+0x134>)
 8002d30:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d36:	4a3d      	ldr	r2, [pc, #244]	; (8002e2c <UART_Start_Receive_DMA+0x138>)
 8002d38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3e:	4a3c      	ldr	r2, [pc, #240]	; (8002e30 <UART_Start_Receive_DMA+0x13c>)
 8002d40:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d46:	2200      	movs	r2, #0
 8002d48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	3324      	adds	r3, #36	; 0x24
 8002d54:	0019      	movs	r1, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5a:	001a      	movs	r2, r3
 8002d5c:	1dbb      	adds	r3, r7, #6
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	f7fe f8be 	bl	8000ee0 <HAL_DMA_Start_IT>
 8002d64:	1e03      	subs	r3, r0, #0
 8002d66:	d009      	beq.n	8002d7c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2284      	movs	r2, #132	; 0x84
 8002d6c:	2110      	movs	r1, #16
 8002d6e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2280      	movs	r2, #128	; 0x80
 8002d74:	2120      	movs	r1, #32
 8002d76:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e050      	b.n	8002e1e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d019      	beq.n	8002db8 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d84:	f3ef 8310 	mrs	r3, PRIMASK
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d8e:	2301      	movs	r3, #1
 8002d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d94:	f383 8810 	msr	PRIMASK, r3
}
 8002d98:	46c0      	nop			; (mov r8, r8)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2180      	movs	r1, #128	; 0x80
 8002da6:	0049      	lsls	r1, r1, #1
 8002da8:	430a      	orrs	r2, r1
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dae:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db2:	f383 8810 	msr	PRIMASK, r3
}
 8002db6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002db8:	f3ef 8310 	mrs	r3, PRIMASK
 8002dbc:	613b      	str	r3, [r7, #16]
  return(result);
 8002dbe:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f383 8810 	msr	PRIMASK, r3
}
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2101      	movs	r1, #1
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	609a      	str	r2, [r3, #8]
 8002dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	f383 8810 	msr	PRIMASK, r3
}
 8002de8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dea:	f3ef 8310 	mrs	r3, PRIMASK
 8002dee:	61fb      	str	r3, [r7, #28]
  return(result);
 8002df0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002df2:	637b      	str	r3, [r7, #52]	; 0x34
 8002df4:	2301      	movs	r3, #1
 8002df6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	f383 8810 	msr	PRIMASK, r3
}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2140      	movs	r1, #64	; 0x40
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e12:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	f383 8810 	msr	PRIMASK, r3
}
 8002e1a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	0018      	movs	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b010      	add	sp, #64	; 0x40
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	08002f45 	.word	0x08002f45
 8002e2c:	08003071 	.word	0x08003071
 8002e30:	080030b3 	.word	0x080030b3

08002e34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8002e40:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e42:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	2301      	movs	r3, #1
 8002e48:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f383 8810 	msr	PRIMASK, r3
}
 8002e50:	46c0      	nop			; (mov r8, r8)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	21c0      	movs	r1, #192	; 0xc0
 8002e5e:	438a      	bics	r2, r1
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f383 8810 	msr	PRIMASK, r3
}
 8002e6c:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2220      	movs	r2, #32
 8002e72:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8002e74:	46c0      	nop			; (mov r8, r8)
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b006      	add	sp, #24
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08e      	sub	sp, #56	; 0x38
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e84:	f3ef 8310 	mrs	r3, PRIMASK
 8002e88:	617b      	str	r3, [r7, #20]
  return(result);
 8002e8a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e8e:	2301      	movs	r3, #1
 8002e90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	f383 8810 	msr	PRIMASK, r3
}
 8002e98:	46c0      	nop			; (mov r8, r8)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4926      	ldr	r1, [pc, #152]	; (8002f40 <UART_EndRxTransfer+0xc4>)
 8002ea6:	400a      	ands	r2, r1
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	f383 8810 	msr	PRIMASK, r3
}
 8002eb4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8002eba:	623b      	str	r3, [r7, #32]
  return(result);
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ebe:	633b      	str	r3, [r7, #48]	; 0x30
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	f383 8810 	msr	PRIMASK, r3
}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	438a      	bics	r2, r1
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee2:	f383 8810 	msr	PRIMASK, r3
}
 8002ee6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d118      	bne.n	8002f22 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ef0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ef4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ef6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002efa:	2301      	movs	r3, #1
 8002efc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f383 8810 	msr	PRIMASK, r3
}
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2110      	movs	r1, #16
 8002f12:	438a      	bics	r2, r1
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f383 8810 	msr	PRIMASK, r3
}
 8002f20:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2280      	movs	r2, #128	; 0x80
 8002f26:	2120      	movs	r1, #32
 8002f28:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b00e      	add	sp, #56	; 0x38
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	fffffedf 	.word	0xfffffedf

08002f44 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b094      	sub	sp, #80	; 0x50
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	d06f      	beq.n	800303a <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8002f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f5c:	225a      	movs	r2, #90	; 0x5a
 8002f5e:	2100      	movs	r1, #0
 8002f60:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f62:	f3ef 8310 	mrs	r3, PRIMASK
 8002f66:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f68:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	f383 8810 	msr	PRIMASK, r3
}
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	493a      	ldr	r1, [pc, #232]	; (800306c <UART_DMAReceiveCplt+0x128>)
 8002f84:	400a      	ands	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f8a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	f383 8810 	msr	PRIMASK, r3
}
 8002f92:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f94:	f3ef 8310 	mrs	r3, PRIMASK
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa4:	f383 8810 	msr	PRIMASK, r3
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	438a      	bics	r2, r1
 8002fb8:	609a      	str	r2, [r3, #8]
 8002fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc0:	f383 8810 	msr	PRIMASK, r3
}
 8002fc4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fc6:	f3ef 8310 	mrs	r3, PRIMASK
 8002fca:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fce:	643b      	str	r3, [r7, #64]	; 0x40
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd6:	f383 8810 	msr	PRIMASK, r3
}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2140      	movs	r1, #64	; 0x40
 8002fe8:	438a      	bics	r2, r1
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff2:	f383 8810 	msr	PRIMASK, r3
}
 8002ff6:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ffa:	2280      	movs	r2, #128	; 0x80
 8002ffc:	2120      	movs	r1, #32
 8002ffe:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003004:	2b01      	cmp	r3, #1
 8003006:	d118      	bne.n	800303a <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003008:	f3ef 8310 	mrs	r3, PRIMASK
 800300c:	60fb      	str	r3, [r7, #12]
  return(result);
 800300e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003010:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003012:	2301      	movs	r3, #1
 8003014:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f383 8810 	msr	PRIMASK, r3
}
 800301c:	46c0      	nop			; (mov r8, r8)
 800301e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2110      	movs	r1, #16
 800302a:	438a      	bics	r2, r1
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003030:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f383 8810 	msr	PRIMASK, r3
}
 8003038:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800303a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800303c:	2200      	movs	r2, #0
 800303e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003044:	2b01      	cmp	r3, #1
 8003046:	d108      	bne.n	800305a <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800304a:	2258      	movs	r2, #88	; 0x58
 800304c:	5a9a      	ldrh	r2, [r3, r2]
 800304e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003050:	0011      	movs	r1, r2
 8003052:	0018      	movs	r0, r3
 8003054:	f7ff fb55 	bl	8002702 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003058:	e003      	b.n	8003062 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800305a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800305c:	0018      	movs	r0, r3
 800305e:	f7ff fb38 	bl	80026d2 <HAL_UART_RxCpltCallback>
}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	46bd      	mov	sp, r7
 8003066:	b014      	add	sp, #80	; 0x50
 8003068:	bd80      	pop	{r7, pc}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	fffffeff 	.word	0xfffffeff

08003070 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2201      	movs	r2, #1
 8003082:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003088:	2b01      	cmp	r3, #1
 800308a:	d10a      	bne.n	80030a2 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2258      	movs	r2, #88	; 0x58
 8003090:	5a9b      	ldrh	r3, [r3, r2]
 8003092:	085b      	lsrs	r3, r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	0011      	movs	r1, r2
 800309a:	0018      	movs	r0, r3
 800309c:	f7ff fb31 	bl	8002702 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80030a0:	e003      	b.n	80030aa <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	0018      	movs	r0, r3
 80030a6:	f7ff fb1c 	bl	80026e2 <HAL_UART_RxHalfCpltCallback>
}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	46bd      	mov	sp, r7
 80030ae:	b004      	add	sp, #16
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b086      	sub	sp, #24
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030c4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2280      	movs	r2, #128	; 0x80
 80030ca:	589b      	ldr	r3, [r3, r2]
 80030cc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2280      	movs	r2, #128	; 0x80
 80030d6:	4013      	ands	r3, r2
 80030d8:	2b80      	cmp	r3, #128	; 0x80
 80030da:	d10a      	bne.n	80030f2 <UART_DMAError+0x40>
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	2b21      	cmp	r3, #33	; 0x21
 80030e0:	d107      	bne.n	80030f2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2252      	movs	r2, #82	; 0x52
 80030e6:	2100      	movs	r1, #0
 80030e8:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	0018      	movs	r0, r3
 80030ee:	f7ff fea1 	bl	8002e34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2240      	movs	r2, #64	; 0x40
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b40      	cmp	r3, #64	; 0x40
 80030fe:	d10a      	bne.n	8003116 <UART_DMAError+0x64>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b22      	cmp	r3, #34	; 0x22
 8003104:	d107      	bne.n	8003116 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	225a      	movs	r2, #90	; 0x5a
 800310a:	2100      	movs	r1, #0
 800310c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	0018      	movs	r0, r3
 8003112:	f7ff feb3 	bl	8002e7c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2284      	movs	r2, #132	; 0x84
 800311a:	589b      	ldr	r3, [r3, r2]
 800311c:	2210      	movs	r2, #16
 800311e:	431a      	orrs	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	2184      	movs	r1, #132	; 0x84
 8003124:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	0018      	movs	r0, r3
 800312a:	f7ff fae2 	bl	80026f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	46bd      	mov	sp, r7
 8003132:	b006      	add	sp, #24
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <__libc_init_array>:
 8003138:	b570      	push	{r4, r5, r6, lr}
 800313a:	2600      	movs	r6, #0
 800313c:	4d0c      	ldr	r5, [pc, #48]	; (8003170 <__libc_init_array+0x38>)
 800313e:	4c0d      	ldr	r4, [pc, #52]	; (8003174 <__libc_init_array+0x3c>)
 8003140:	1b64      	subs	r4, r4, r5
 8003142:	10a4      	asrs	r4, r4, #2
 8003144:	42a6      	cmp	r6, r4
 8003146:	d109      	bne.n	800315c <__libc_init_array+0x24>
 8003148:	2600      	movs	r6, #0
 800314a:	f000 f87d 	bl	8003248 <_init>
 800314e:	4d0a      	ldr	r5, [pc, #40]	; (8003178 <__libc_init_array+0x40>)
 8003150:	4c0a      	ldr	r4, [pc, #40]	; (800317c <__libc_init_array+0x44>)
 8003152:	1b64      	subs	r4, r4, r5
 8003154:	10a4      	asrs	r4, r4, #2
 8003156:	42a6      	cmp	r6, r4
 8003158:	d105      	bne.n	8003166 <__libc_init_array+0x2e>
 800315a:	bd70      	pop	{r4, r5, r6, pc}
 800315c:	00b3      	lsls	r3, r6, #2
 800315e:	58eb      	ldr	r3, [r5, r3]
 8003160:	4798      	blx	r3
 8003162:	3601      	adds	r6, #1
 8003164:	e7ee      	b.n	8003144 <__libc_init_array+0xc>
 8003166:	00b3      	lsls	r3, r6, #2
 8003168:	58eb      	ldr	r3, [r5, r3]
 800316a:	4798      	blx	r3
 800316c:	3601      	adds	r6, #1
 800316e:	e7f2      	b.n	8003156 <__libc_init_array+0x1e>
 8003170:	08003304 	.word	0x08003304
 8003174:	08003304 	.word	0x08003304
 8003178:	08003304 	.word	0x08003304
 800317c:	08003308 	.word	0x08003308

08003180 <__itoa>:
 8003180:	1e93      	subs	r3, r2, #2
 8003182:	b510      	push	{r4, lr}
 8003184:	000c      	movs	r4, r1
 8003186:	2b22      	cmp	r3, #34	; 0x22
 8003188:	d904      	bls.n	8003194 <__itoa+0x14>
 800318a:	2300      	movs	r3, #0
 800318c:	001c      	movs	r4, r3
 800318e:	700b      	strb	r3, [r1, #0]
 8003190:	0020      	movs	r0, r4
 8003192:	bd10      	pop	{r4, pc}
 8003194:	2a0a      	cmp	r2, #10
 8003196:	d109      	bne.n	80031ac <__itoa+0x2c>
 8003198:	2800      	cmp	r0, #0
 800319a:	da07      	bge.n	80031ac <__itoa+0x2c>
 800319c:	232d      	movs	r3, #45	; 0x2d
 800319e:	700b      	strb	r3, [r1, #0]
 80031a0:	2101      	movs	r1, #1
 80031a2:	4240      	negs	r0, r0
 80031a4:	1861      	adds	r1, r4, r1
 80031a6:	f000 f80f 	bl	80031c8 <__utoa>
 80031aa:	e7f1      	b.n	8003190 <__itoa+0x10>
 80031ac:	2100      	movs	r1, #0
 80031ae:	e7f9      	b.n	80031a4 <__itoa+0x24>

080031b0 <itoa>:
 80031b0:	b510      	push	{r4, lr}
 80031b2:	f7ff ffe5 	bl	8003180 <__itoa>
 80031b6:	bd10      	pop	{r4, pc}

080031b8 <memset>:
 80031b8:	0003      	movs	r3, r0
 80031ba:	1882      	adds	r2, r0, r2
 80031bc:	4293      	cmp	r3, r2
 80031be:	d100      	bne.n	80031c2 <memset+0xa>
 80031c0:	4770      	bx	lr
 80031c2:	7019      	strb	r1, [r3, #0]
 80031c4:	3301      	adds	r3, #1
 80031c6:	e7f9      	b.n	80031bc <memset+0x4>

080031c8 <__utoa>:
 80031c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ca:	000c      	movs	r4, r1
 80031cc:	0016      	movs	r6, r2
 80031ce:	b08d      	sub	sp, #52	; 0x34
 80031d0:	2225      	movs	r2, #37	; 0x25
 80031d2:	0007      	movs	r7, r0
 80031d4:	4916      	ldr	r1, [pc, #88]	; (8003230 <__utoa+0x68>)
 80031d6:	a802      	add	r0, sp, #8
 80031d8:	f000 f82c 	bl	8003234 <memcpy>
 80031dc:	1e62      	subs	r2, r4, #1
 80031de:	9200      	str	r2, [sp, #0]
 80031e0:	1eb3      	subs	r3, r6, #2
 80031e2:	aa02      	add	r2, sp, #8
 80031e4:	2500      	movs	r5, #0
 80031e6:	9201      	str	r2, [sp, #4]
 80031e8:	2b22      	cmp	r3, #34	; 0x22
 80031ea:	d904      	bls.n	80031f6 <__utoa+0x2e>
 80031ec:	7025      	strb	r5, [r4, #0]
 80031ee:	002c      	movs	r4, r5
 80031f0:	0020      	movs	r0, r4
 80031f2:	b00d      	add	sp, #52	; 0x34
 80031f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031f6:	0038      	movs	r0, r7
 80031f8:	0031      	movs	r1, r6
 80031fa:	f7fd f813 	bl	8000224 <__aeabi_uidivmod>
 80031fe:	000b      	movs	r3, r1
 8003200:	9a01      	ldr	r2, [sp, #4]
 8003202:	0029      	movs	r1, r5
 8003204:	5cd3      	ldrb	r3, [r2, r3]
 8003206:	9a00      	ldr	r2, [sp, #0]
 8003208:	3501      	adds	r5, #1
 800320a:	5553      	strb	r3, [r2, r5]
 800320c:	003b      	movs	r3, r7
 800320e:	0007      	movs	r7, r0
 8003210:	429e      	cmp	r6, r3
 8003212:	d9f0      	bls.n	80031f6 <__utoa+0x2e>
 8003214:	2300      	movs	r3, #0
 8003216:	0022      	movs	r2, r4
 8003218:	5563      	strb	r3, [r4, r5]
 800321a:	000b      	movs	r3, r1
 800321c:	1ac8      	subs	r0, r1, r3
 800321e:	4283      	cmp	r3, r0
 8003220:	dde6      	ble.n	80031f0 <__utoa+0x28>
 8003222:	7810      	ldrb	r0, [r2, #0]
 8003224:	5ce5      	ldrb	r5, [r4, r3]
 8003226:	7015      	strb	r5, [r2, #0]
 8003228:	54e0      	strb	r0, [r4, r3]
 800322a:	3201      	adds	r2, #1
 800322c:	3b01      	subs	r3, #1
 800322e:	e7f5      	b.n	800321c <__utoa+0x54>
 8003230:	080032dc 	.word	0x080032dc

08003234 <memcpy>:
 8003234:	2300      	movs	r3, #0
 8003236:	b510      	push	{r4, lr}
 8003238:	429a      	cmp	r2, r3
 800323a:	d100      	bne.n	800323e <memcpy+0xa>
 800323c:	bd10      	pop	{r4, pc}
 800323e:	5ccc      	ldrb	r4, [r1, r3]
 8003240:	54c4      	strb	r4, [r0, r3]
 8003242:	3301      	adds	r3, #1
 8003244:	e7f8      	b.n	8003238 <memcpy+0x4>
	...

08003248 <_init>:
 8003248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324e:	bc08      	pop	{r3}
 8003250:	469e      	mov	lr, r3
 8003252:	4770      	bx	lr

08003254 <_fini>:
 8003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325a:	bc08      	pop	{r3}
 800325c:	469e      	mov	lr, r3
 800325e:	4770      	bx	lr
